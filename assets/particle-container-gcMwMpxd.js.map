{"version":3,"file":"particle-container-gcMwMpxd.js","sources":["../../src/pages/demo/basic/particle-container.tsx"],"sourcesContent":["import { Application, Container, onTick, Sprite } from \"@danneu/solid-pixi\";\nimport { useApp } from \"@danneu/solid-pixi\";\nimport * as PIXI from \"pixi.js\";\nimport {\n  createResource,\n  Index,\n  Show,\n  Suspense,\n  type Component,\n} from \"solid-js\";\n\nconst TOTAL_SPRITES = 10_000;\n\nconst Example: Component<{ texture: PIXI.Texture }> = (props) => {\n  const app = useApp();\n\n  type Maggot = PIXI.Sprite & {\n    direction: number;\n    turningSpeed: number;\n    speed: number;\n    offset: number;\n  };\n\n  // For performance, we create PIXI.Sprite instances and update them directly.\n\n  const maggots = Array.from({ length: TOTAL_SPRITES }, () => {\n    const maggot = new PIXI.Sprite(props.texture) as Maggot;\n    maggot.anchor.set(0.5);\n    maggot.scale.set(0.8 + Math.random() * 0.3);\n    maggot.x = Math.random() * app.screen.width;\n    maggot.y = Math.random() * app.screen.height;\n    maggot.tint = Math.random() * 0x808080;\n    maggot.direction = Math.random() * Math.PI * 2;\n    maggot.turningSpeed = Math.random() - 0.8;\n    maggot.speed = (2 + Math.random() * 2) * 0.2;\n    maggot.offset = Math.random() * 100;\n    return maggot;\n  });\n\n  const boundingBox = (() => {\n    const padding = 100;\n    return new PIXI.Rectangle(\n      -padding,\n      -padding,\n      app.screen.width + padding * 2,\n      app.screen.height + padding * 2\n    );\n  })();\n\n  let tick = 0;\n\n  onTick(() => {\n    tick += 0.1;\n\n    for (const maggot of maggots) {\n      maggot.scale.y = 0.95 + Math.sin(tick + maggot.offset) * 0.05;\n      maggot.direction += maggot.turningSpeed * 0.01;\n      maggot.x += Math.sin(maggot.direction) * (maggot.speed * maggot.scale.y);\n      maggot.y += Math.cos(maggot.direction) * (maggot.speed * maggot.scale.y);\n      maggot.rotation = -maggot.direction + Math.PI;\n\n      // Wrap the maggots\n      if (maggot.x < boundingBox.x) {\n        maggot.x += boundingBox.width;\n      } else if (maggot.x > boundingBox.x + boundingBox.width) {\n        maggot.x -= boundingBox.width;\n      }\n\n      if (maggot.y < boundingBox.y) {\n        maggot.y += boundingBox.height;\n      } else if (maggot.y > boundingBox.y + boundingBox.height) {\n        maggot.y -= boundingBox.height;\n      }\n    }\n  });\n\n  return (\n    <Container>\n      <Index each={maggots}>{(maggot) => <Sprite as={maggot()} />}</Index>\n    </Container>\n  );\n};\n\nexport default function () {\n  const [texture] = createResource(async () => {\n    return await PIXI.Assets.load(\"https://pixijs.com/assets/maggot_tiny.png\");\n  });\n\n  return (\n    <Suspense fallback={<div>Loading</div>}>\n      <Application backgroundColor={0x1099bb}>\n        <Show when={texture()}>\n          <Example texture={texture()} />\n        </Show>\n      </Application>\n    </Suspense>\n  );\n}\n"],"names":["TOTAL_SPRITES","Example","props","app","useApp","maggots","Array","from","length","maggot","PIXI","texture","anchor","set","scale","Math","random","x","screen","width","y","height","tint","direction","PI","turningSpeed","speed","offset","boundingBox","padding","tick","onTick","sin","cos","rotation","_$createComponent","Container","children","Index","each","Sprite","as","createResource","load","Suspense","fallback","_tmpl$","Application","backgroundColor","Show","when"],"mappings":"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"}