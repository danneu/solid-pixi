{"version":3,"file":"GraphicsContext-Bdf06Sox.js","sources":["../../node_modules/pixi.js/lib/rendering/renderers/shared/utils/createIdFromString.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getTestContext.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getMaxFragmentPrecision.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/addProgramDefines.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/ensurePrecision.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/insertVersion.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/setProgramName.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/stripVersion.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractAttributesFromGpuProgram.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractStructAndGroups.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/const.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateGpuLayoutGroups.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateLayoutHash.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/removeStructAndGroupDuplicates.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuProgram.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/types.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/getDefaultUniformValue.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/UniformGroup.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/BindGroup.mjs","../../node_modules/pixi.js/lib/rendering/renderers/types.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/Shader.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/fill/FillGradient.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/fill/FillPattern.mjs","../../node_modules/parse-svg-path/index.js","../../node_modules/pixi.js/lib/scene/graphics/shared/svg/parseSVGPath.mjs","../../node_modules/pixi.js/lib/maths/shapes/Circle.mjs","../../node_modules/pixi.js/lib/maths/shapes/Ellipse.mjs","../../node_modules/pixi.js/lib/maths/misc/squaredDistanceToLineSegment.mjs","../../node_modules/pixi.js/lib/maths/shapes/Polygon.mjs","../../node_modules/pixi.js/lib/maths/shapes/RoundedRectangle.mjs","../../node_modules/pixi.js/lib/rendering/batcher/gl/utils/checkMaxIfStatementsInShader.mjs","../../node_modules/pixi.js/lib/rendering/batcher/gl/utils/maxRecommendedTextures.mjs","../../node_modules/pixi.js/lib/rendering/batcher/gpu/getTextureBatchBindGroup.mjs","../../node_modules/pixi.js/lib/utils/data/ViewableBuffer.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/utils/fastCopy.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/state/const.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs","../../node_modules/pixi.js/lib/rendering/batcher/shared/BatchTextureArray.mjs","../../node_modules/pixi.js/lib/rendering/batcher/shared/Batcher.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/const.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/Buffer.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/ensureIsBuffer.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/getGeometryBounds.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/Geometry.mjs","../../node_modules/pixi.js/lib/rendering/batcher/shared/BatchGeometry.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/addBits.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileHooks.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileInputs.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileOutputs.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/injectBits.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/compiler/compileHighShader.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/defaultProgramTemplate.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/globalUniformsBit.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/compileHighShaderToProgram.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/colorBit.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/generateTextureBatchBit.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/roundPixelsBit.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs","../../node_modules/pixi.js/lib/rendering/batcher/shared/DefaultShader.mjs","../../node_modules/pixi.js/lib/rendering/batcher/shared/DefaultBatcher.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/buildUvs.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/transformVertices.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/BatchableGraphics.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildCircle.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/const.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/utils/getOrientationOfPoints.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildLine.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildPixelLine.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/utils/triangulateWithHoles.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildPolygon.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildRectangle.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildTriangle.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/utils/generateTextureFillMatrix.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/utils/buildContextBatches.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/GraphicsContextSystem.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildAdaptiveBezier.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildAdaptiveQuadratic.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArc.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArcTo.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArcToSvg.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/path/roundShape.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/path/ShapePath.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/path/GraphicsPath.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/svg/parseSVGFloatAttribute.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/svg/parseSVGDefinitions.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/svg/utils/extractSvgUrlId.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/svg/parseSVGStyle.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/svg/SVGParser.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/utils/convertFillInputToFillStyle.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/GraphicsContext.mjs"],"sourcesContent":["\"use strict\";\nconst idCounts = /* @__PURE__ */ Object.create(null);\nconst idHash = /* @__PURE__ */ Object.create(null);\nfunction createIdFromString(value, groupId) {\n  let id = idHash[value];\n  if (id === void 0) {\n    if (idCounts[groupId] === void 0) {\n      idCounts[groupId] = 1;\n    }\n    idHash[value] = id = idCounts[groupId]++;\n  }\n  return id;\n}\n\nexport { createIdFromString };\n//# sourceMappingURL=createIdFromString.mjs.map\n","import { DOMAdapter } from '../../../../../environment/adapter.mjs';\n\n\"use strict\";\nlet context;\nfunction getTestContext() {\n  if (!context || context?.isContextLost()) {\n    const canvas = DOMAdapter.get().createCanvas();\n    context = canvas.getContext(\"webgl\", {});\n  }\n  return context;\n}\n\nexport { getTestContext };\n//# sourceMappingURL=getTestContext.mjs.map\n","import { getTestContext } from './getTestContext.mjs';\n\n\"use strict\";\nlet maxFragmentPrecision;\nfunction getMaxFragmentPrecision() {\n  if (!maxFragmentPrecision) {\n    maxFragmentPrecision = \"mediump\";\n    const gl = getTestContext();\n    if (gl) {\n      if (gl.getShaderPrecisionFormat) {\n        const shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n        maxFragmentPrecision = shaderFragment.precision ? \"highp\" : \"mediump\";\n      }\n    }\n  }\n  return maxFragmentPrecision;\n}\n\nexport { getMaxFragmentPrecision };\n//# sourceMappingURL=getMaxFragmentPrecision.mjs.map\n","\"use strict\";\nfunction addProgramDefines(src, isES300, isFragment) {\n  if (isES300)\n    return src;\n  if (isFragment) {\n    src = src.replace(\"out vec4 finalColor;\", \"\");\n    return `\n        \n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in varying\n        #define finalColor gl_FragColor\n        #define texture texture2D\n        #endif\n        ${src}\n        `;\n  }\n  return `\n        \n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in attribute\n        #define out varying\n        #endif\n        ${src}\n        `;\n}\n\nexport { addProgramDefines };\n//# sourceMappingURL=addProgramDefines.mjs.map\n","\"use strict\";\nfunction ensurePrecision(src, options, isFragment) {\n  const maxSupportedPrecision = isFragment ? options.maxSupportedFragmentPrecision : options.maxSupportedVertexPrecision;\n  if (src.substring(0, 9) !== \"precision\") {\n    let precision = isFragment ? options.requestedFragmentPrecision : options.requestedVertexPrecision;\n    if (precision === \"highp\" && maxSupportedPrecision !== \"highp\") {\n      precision = \"mediump\";\n    }\n    return `precision ${precision} float;\n${src}`;\n  } else if (maxSupportedPrecision !== \"highp\" && src.substring(0, 15) === \"precision highp\") {\n    return src.replace(\"precision highp\", \"precision mediump\");\n  }\n  return src;\n}\n\nexport { ensurePrecision };\n//# sourceMappingURL=ensurePrecision.mjs.map\n","\"use strict\";\nfunction insertVersion(src, isES300) {\n  if (!isES300)\n    return src;\n  return `#version 300 es\n${src}`;\n}\n\nexport { insertVersion };\n//# sourceMappingURL=insertVersion.mjs.map\n","\"use strict\";\nconst fragmentNameCache = {};\nconst VertexNameCache = {};\nfunction setProgramName(src, { name = `pixi-program` }, isFragment = true) {\n  name = name.replace(/\\s+/g, \"-\");\n  name += isFragment ? \"-fragment\" : \"-vertex\";\n  const nameCache = isFragment ? fragmentNameCache : VertexNameCache;\n  if (nameCache[name]) {\n    nameCache[name]++;\n    name += `-${nameCache[name]}`;\n  } else {\n    nameCache[name] = 1;\n  }\n  if (src.indexOf(\"#define SHADER_NAME\") !== -1)\n    return src;\n  const shaderName = `#define SHADER_NAME ${name}`;\n  return `${shaderName}\n${src}`;\n}\n\nexport { setProgramName };\n//# sourceMappingURL=setProgramName.mjs.map\n","\"use strict\";\nfunction stripVersion(src, isES300) {\n  if (!isES300)\n    return src;\n  return src.replace(\"#version 300 es\", \"\");\n}\n\nexport { stripVersion };\n//# sourceMappingURL=stripVersion.mjs.map\n","import { createIdFromString } from '../../shared/utils/createIdFromString.mjs';\nimport { getMaxFragmentPrecision } from './program/getMaxFragmentPrecision.mjs';\nimport { addProgramDefines } from './program/preprocessors/addProgramDefines.mjs';\nimport { ensurePrecision } from './program/preprocessors/ensurePrecision.mjs';\nimport { insertVersion } from './program/preprocessors/insertVersion.mjs';\nimport { setProgramName } from './program/preprocessors/setProgramName.mjs';\nimport { stripVersion } from './program/preprocessors/stripVersion.mjs';\n\n\"use strict\";\nconst processes = {\n  // strips any version headers..\n  stripVersion,\n  // adds precision string if not already present\n  ensurePrecision,\n  // add some defines if WebGL1 to make it more compatible with WebGL2 shaders\n  addProgramDefines,\n  // add the program name to the shader\n  setProgramName,\n  // add the version string to the shader header\n  insertVersion\n};\nconst programCache = /* @__PURE__ */ Object.create(null);\nconst _GlProgram = class _GlProgram {\n  /**\n   * Creates a shiny new GlProgram. Used by WebGL renderer.\n   * @param options - The options for the program.\n   */\n  constructor(options) {\n    options = { ..._GlProgram.defaultOptions, ...options };\n    const isES300 = options.fragment.indexOf(\"#version 300 es\") !== -1;\n    const preprocessorOptions = {\n      stripVersion: isES300,\n      ensurePrecision: {\n        requestedFragmentPrecision: options.preferredFragmentPrecision,\n        requestedVertexPrecision: options.preferredVertexPrecision,\n        maxSupportedVertexPrecision: \"highp\",\n        maxSupportedFragmentPrecision: getMaxFragmentPrecision()\n      },\n      setProgramName: {\n        name: options.name\n      },\n      addProgramDefines: isES300,\n      insertVersion: isES300\n    };\n    let fragment = options.fragment;\n    let vertex = options.vertex;\n    Object.keys(processes).forEach((processKey) => {\n      const processOptions = preprocessorOptions[processKey];\n      fragment = processes[processKey](fragment, processOptions, true);\n      vertex = processes[processKey](vertex, processOptions, false);\n    });\n    this.fragment = fragment;\n    this.vertex = vertex;\n    this.transformFeedbackVaryings = options.transformFeedbackVaryings;\n    this._key = createIdFromString(`${this.vertex}:${this.fragment}`, \"gl-program\");\n  }\n  /** destroys the program */\n  destroy() {\n    this.fragment = null;\n    this.vertex = null;\n    this._attributeData = null;\n    this._uniformData = null;\n    this._uniformBlockData = null;\n    this.transformFeedbackVaryings = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex}:${options.fragment}`;\n    if (!programCache[key]) {\n      programCache[key] = new _GlProgram(options);\n    }\n    return programCache[key];\n  }\n};\n/** The default options used by the program. */\n_GlProgram.defaultOptions = {\n  preferredVertexPrecision: \"highp\",\n  preferredFragmentPrecision: \"mediump\"\n};\nlet GlProgram = _GlProgram;\n\nexport { GlProgram };\n//# sourceMappingURL=GlProgram.mjs.map\n","\"use strict\";\nconst attributeFormatData = {\n  uint8x2: { size: 2, stride: 2, normalised: false },\n  uint8x4: { size: 4, stride: 4, normalised: false },\n  sint8x2: { size: 2, stride: 2, normalised: false },\n  sint8x4: { size: 4, stride: 4, normalised: false },\n  unorm8x2: { size: 2, stride: 2, normalised: true },\n  unorm8x4: { size: 4, stride: 4, normalised: true },\n  snorm8x2: { size: 2, stride: 2, normalised: true },\n  snorm8x4: { size: 4, stride: 4, normalised: true },\n  uint16x2: { size: 2, stride: 4, normalised: false },\n  uint16x4: { size: 4, stride: 8, normalised: false },\n  sint16x2: { size: 2, stride: 4, normalised: false },\n  sint16x4: { size: 4, stride: 8, normalised: false },\n  unorm16x2: { size: 2, stride: 4, normalised: true },\n  unorm16x4: { size: 4, stride: 8, normalised: true },\n  snorm16x2: { size: 2, stride: 4, normalised: true },\n  snorm16x4: { size: 4, stride: 8, normalised: true },\n  float16x2: { size: 2, stride: 4, normalised: false },\n  float16x4: { size: 4, stride: 8, normalised: false },\n  float32: { size: 1, stride: 4, normalised: false },\n  float32x2: { size: 2, stride: 8, normalised: false },\n  float32x3: { size: 3, stride: 12, normalised: false },\n  float32x4: { size: 4, stride: 16, normalised: false },\n  uint32: { size: 1, stride: 4, normalised: false },\n  uint32x2: { size: 2, stride: 8, normalised: false },\n  uint32x3: { size: 3, stride: 12, normalised: false },\n  uint32x4: { size: 4, stride: 16, normalised: false },\n  sint32: { size: 1, stride: 4, normalised: false },\n  sint32x2: { size: 2, stride: 8, normalised: false },\n  sint32x3: { size: 3, stride: 12, normalised: false },\n  sint32x4: { size: 4, stride: 16, normalised: false }\n};\nfunction getAttributeInfoFromFormat(format) {\n  return attributeFormatData[format] ?? attributeFormatData.float32;\n}\n\nexport { getAttributeInfoFromFormat };\n//# sourceMappingURL=getAttributeInfoFromFormat.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nconst WGSL_TO_VERTEX_TYPES = {\n  f32: \"float32\",\n  \"vec2<f32>\": \"float32x2\",\n  \"vec3<f32>\": \"float32x3\",\n  \"vec4<f32>\": \"float32x4\",\n  vec2f: \"float32x2\",\n  vec3f: \"float32x3\",\n  vec4f: \"float32x4\",\n  i32: \"sint32\",\n  \"vec2<i32>\": \"sint32x2\",\n  \"vec3<i32>\": \"sint32x3\",\n  \"vec4<i32>\": \"sint32x4\",\n  u32: \"uint32\",\n  \"vec2<u32>\": \"uint32x2\",\n  \"vec3<u32>\": \"uint32x3\",\n  \"vec4<u32>\": \"uint32x4\",\n  bool: \"uint32\",\n  \"vec2<bool>\": \"uint32x2\",\n  \"vec3<bool>\": \"uint32x3\",\n  \"vec4<bool>\": \"uint32x4\"\n};\nfunction extractAttributesFromGpuProgram({ source, entryPoint }) {\n  const results = {};\n  const mainVertStart = source.indexOf(`fn ${entryPoint}`);\n  if (mainVertStart !== -1) {\n    const arrowFunctionStart = source.indexOf(\"->\", mainVertStart);\n    if (arrowFunctionStart !== -1) {\n      const functionArgsSubstring = source.substring(mainVertStart, arrowFunctionStart);\n      const inputsRegex = /@location\\((\\d+)\\)\\s+([a-zA-Z0-9_]+)\\s*:\\s*([a-zA-Z0-9_<>]+)(?:,|\\s|$)/g;\n      let match;\n      while ((match = inputsRegex.exec(functionArgsSubstring)) !== null) {\n        const format = WGSL_TO_VERTEX_TYPES[match[3]] ?? \"float32\";\n        results[match[2]] = {\n          location: parseInt(match[1], 10),\n          format,\n          stride: getAttributeInfoFromFormat(format).stride,\n          offset: 0,\n          instance: false,\n          start: 0\n        };\n      }\n    }\n  }\n  return results;\n}\n\nexport { extractAttributesFromGpuProgram };\n//# sourceMappingURL=extractAttributesFromGpuProgram.mjs.map\n","\"use strict\";\nfunction extractStructAndGroups(wgsl) {\n  const linePattern = /(^|[^/])@(group|binding)\\(\\d+\\)[^;]+;/g;\n  const groupPattern = /@group\\((\\d+)\\)/;\n  const bindingPattern = /@binding\\((\\d+)\\)/;\n  const namePattern = /var(<[^>]+>)? (\\w+)/;\n  const typePattern = /:\\s*(\\w+)/;\n  const structPattern = /struct\\s+(\\w+)\\s*{([^}]+)}/g;\n  const structMemberPattern = /(\\w+)\\s*:\\s*([\\w\\<\\>]+)/g;\n  const structName = /struct\\s+(\\w+)/;\n  const groups = wgsl.match(linePattern)?.map((item) => ({\n    group: parseInt(item.match(groupPattern)[1], 10),\n    binding: parseInt(item.match(bindingPattern)[1], 10),\n    name: item.match(namePattern)[2],\n    isUniform: item.match(namePattern)[1] === \"<uniform>\",\n    type: item.match(typePattern)[1]\n  }));\n  if (!groups) {\n    return {\n      groups: [],\n      structs: []\n    };\n  }\n  const structs = wgsl.match(structPattern)?.map((struct) => {\n    const name = struct.match(structName)[1];\n    const members = struct.match(structMemberPattern).reduce((acc, member) => {\n      const [name2, type] = member.split(\":\");\n      acc[name2.trim()] = type.trim();\n      return acc;\n    }, {});\n    if (!members) {\n      return null;\n    }\n    return { name, members };\n  }).filter(({ name }) => groups.some((group) => group.type === name)) ?? [];\n  return {\n    groups,\n    structs\n  };\n}\n\nexport { extractStructAndGroups };\n//# sourceMappingURL=extractStructAndGroups.mjs.map\n","\"use strict\";\nvar ShaderStage = /* @__PURE__ */ ((ShaderStage2) => {\n  ShaderStage2[ShaderStage2[\"VERTEX\"] = 1] = \"VERTEX\";\n  ShaderStage2[ShaderStage2[\"FRAGMENT\"] = 2] = \"FRAGMENT\";\n  ShaderStage2[ShaderStage2[\"COMPUTE\"] = 4] = \"COMPUTE\";\n  return ShaderStage2;\n})(ShaderStage || {});\n\nexport { ShaderStage };\n//# sourceMappingURL=const.mjs.map\n","import { ShaderStage } from '../../../shared/shader/const.mjs';\n\n\"use strict\";\nfunction generateGpuLayoutGroups({ groups }) {\n  const layout = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (!layout[group.group]) {\n      layout[group.group] = [];\n    }\n    if (group.isUniform) {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.VERTEX | ShaderStage.FRAGMENT,\n        buffer: {\n          type: \"uniform\"\n        }\n      });\n    } else if (group.type === \"sampler\") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.FRAGMENT,\n        sampler: {\n          type: \"filtering\"\n        }\n      });\n    } else if (group.type === \"texture_2d\") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.FRAGMENT,\n        texture: {\n          sampleType: \"float\",\n          viewDimension: \"2d\",\n          multisampled: false\n        }\n      });\n    }\n  }\n  return layout;\n}\n\nexport { generateGpuLayoutGroups };\n//# sourceMappingURL=generateGpuLayoutGroups.mjs.map\n","\"use strict\";\nfunction generateLayoutHash({ groups }) {\n  const layout = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (!layout[group.group]) {\n      layout[group.group] = {};\n    }\n    layout[group.group][group.name] = group.binding;\n  }\n  return layout;\n}\n\nexport { generateLayoutHash };\n//# sourceMappingURL=generateLayoutHash.mjs.map\n","\"use strict\";\nfunction removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups) {\n  const structNameSet = /* @__PURE__ */ new Set();\n  const dupeGroupKeySet = /* @__PURE__ */ new Set();\n  const structs = [...vertexStructsAndGroups.structs, ...fragmentStructsAndGroups.structs].filter((struct) => {\n    if (structNameSet.has(struct.name)) {\n      return false;\n    }\n    structNameSet.add(struct.name);\n    return true;\n  });\n  const groups = [...vertexStructsAndGroups.groups, ...fragmentStructsAndGroups.groups].filter((group) => {\n    const key = `${group.name}-${group.binding}`;\n    if (dupeGroupKeySet.has(key)) {\n      return false;\n    }\n    dupeGroupKeySet.add(key);\n    return true;\n  });\n  return { structs, groups };\n}\n\nexport { removeStructAndGroupDuplicates };\n//# sourceMappingURL=removeStructAndGroupDuplicates.mjs.map\n","import { createIdFromString } from '../../shared/utils/createIdFromString.mjs';\nimport { extractAttributesFromGpuProgram } from './utils/extractAttributesFromGpuProgram.mjs';\nimport { extractStructAndGroups } from './utils/extractStructAndGroups.mjs';\nimport { generateGpuLayoutGroups } from './utils/generateGpuLayoutGroups.mjs';\nimport { generateLayoutHash } from './utils/generateLayoutHash.mjs';\nimport { removeStructAndGroupDuplicates } from './utils/removeStructAndGroupDuplicates.mjs';\n\n\"use strict\";\nconst programCache = /* @__PURE__ */ Object.create(null);\nclass GpuProgram {\n  /**\n   * Create a new GpuProgram\n   * @param options - The options for the gpu program\n   */\n  constructor(options) {\n    /**\n     * @internal\n     * @ignore\n     */\n    this._layoutKey = 0;\n    /**\n     * @internal\n     * @ignore\n     */\n    this._attributeLocationsKey = 0;\n    const { fragment, vertex, layout, gpuLayout, name } = options;\n    this.name = name;\n    this.fragment = fragment;\n    this.vertex = vertex;\n    if (fragment.source === vertex.source) {\n      const structsAndGroups = extractStructAndGroups(fragment.source);\n      this.structsAndGroups = structsAndGroups;\n    } else {\n      const vertexStructsAndGroups = extractStructAndGroups(vertex.source);\n      const fragmentStructsAndGroups = extractStructAndGroups(fragment.source);\n      this.structsAndGroups = removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups);\n    }\n    this.layout = layout ?? generateLayoutHash(this.structsAndGroups);\n    this.gpuLayout = gpuLayout ?? generateGpuLayoutGroups(this.structsAndGroups);\n    this.autoAssignGlobalUniforms = !!(this.layout[0]?.globalUniforms !== void 0);\n    this.autoAssignLocalUniforms = !!(this.layout[1]?.localUniforms !== void 0);\n    this._generateProgramKey();\n  }\n  // TODO maker this pure\n  _generateProgramKey() {\n    const { vertex, fragment } = this;\n    const bigKey = vertex.source + fragment.source + vertex.entryPoint + fragment.entryPoint;\n    this._layoutKey = createIdFromString(bigKey, \"program\");\n  }\n  get attributeData() {\n    this._attributeData ?? (this._attributeData = extractAttributesFromGpuProgram(this.vertex));\n    return this._attributeData;\n  }\n  /** destroys the program */\n  destroy() {\n    this.gpuLayout = null;\n    this.layout = null;\n    this.structsAndGroups = null;\n    this.fragment = null;\n    this.vertex = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex.source}:${options.fragment.source}:${options.fragment.entryPoint}:${options.vertex.entryPoint}`;\n    if (!programCache[key]) {\n      programCache[key] = new GpuProgram(options);\n    }\n    return programCache[key];\n  }\n}\n\nexport { GpuProgram };\n//# sourceMappingURL=GpuProgram.mjs.map\n","\"use strict\";\nconst UNIFORM_TYPES_VALUES = [\n  \"f32\",\n  \"i32\",\n  \"vec2<f32>\",\n  \"vec3<f32>\",\n  \"vec4<f32>\",\n  \"mat2x2<f32>\",\n  \"mat3x3<f32>\",\n  \"mat4x4<f32>\",\n  \"mat3x2<f32>\",\n  \"mat4x2<f32>\",\n  \"mat2x3<f32>\",\n  \"mat4x3<f32>\",\n  \"mat2x4<f32>\",\n  \"mat3x4<f32>\",\n  \"vec2<i32>\",\n  \"vec3<i32>\",\n  \"vec4<i32>\"\n];\nconst UNIFORM_TYPES_MAP = UNIFORM_TYPES_VALUES.reduce((acc, type) => {\n  acc[type] = true;\n  return acc;\n}, {});\n\nexport { UNIFORM_TYPES_MAP, UNIFORM_TYPES_VALUES };\n//# sourceMappingURL=types.mjs.map\n","\"use strict\";\nfunction getDefaultUniformValue(type, size) {\n  switch (type) {\n    case \"f32\":\n      return 0;\n    case \"vec2<f32>\":\n      return new Float32Array(2 * size);\n    case \"vec3<f32>\":\n      return new Float32Array(3 * size);\n    case \"vec4<f32>\":\n      return new Float32Array(4 * size);\n    case \"mat2x2<f32>\":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        1\n      ]);\n    case \"mat3x3<f32>\":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        1\n      ]);\n    case \"mat4x4<f32>\":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n      ]);\n  }\n  return null;\n}\n\nexport { getDefaultUniformValue };\n//# sourceMappingURL=getDefaultUniformValue.mjs.map\n","import { uid } from '../../../../utils/data/uid.mjs';\nimport { createIdFromString } from '../utils/createIdFromString.mjs';\nimport { UNIFORM_TYPES_MAP, UNIFORM_TYPES_VALUES } from './types.mjs';\nimport { getDefaultUniformValue } from './utils/getDefaultUniformValue.mjs';\n\n\"use strict\";\nconst _UniformGroup = class _UniformGroup {\n  /**\n   * Create a new Uniform group\n   * @param uniformStructures - The structures of the uniform group\n   * @param options - The optional parameters of this uniform group\n   */\n  constructor(uniformStructures, options) {\n    /** used internally to know if a uniform group was used in the last render pass */\n    this._touched = 0;\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"uniform\");\n    /** a resource type, used to identify how to handle it when its in a bind group / shader resource */\n    this._resourceType = \"uniformGroup\";\n    /** the resource id used internally by the renderer to build bind group keys */\n    this._resourceId = uid(\"resource\");\n    /** used ito identify if this is a uniform group */\n    this.isUniformGroup = true;\n    /**\n     * used to flag if this Uniform groups data is different from what it has stored in its buffer / on the GPU\n     * @internal\n     * @ignore\n     */\n    this._dirtyId = 0;\n    // implementing the interface - UniformGroup are not destroyed\n    this.destroyed = false;\n    options = { ..._UniformGroup.defaultOptions, ...options };\n    this.uniformStructures = uniformStructures;\n    const uniforms = {};\n    for (const i in uniformStructures) {\n      const uniformData = uniformStructures[i];\n      uniformData.name = i;\n      uniformData.size = uniformData.size ?? 1;\n      if (!UNIFORM_TYPES_MAP[uniformData.type]) {\n        throw new Error(`Uniform type ${uniformData.type} is not supported. Supported uniform types are: ${UNIFORM_TYPES_VALUES.join(\", \")}`);\n      }\n      uniformData.value ?? (uniformData.value = getDefaultUniformValue(uniformData.type, uniformData.size));\n      uniforms[i] = uniformData.value;\n    }\n    this.uniforms = uniforms;\n    this._dirtyId = 1;\n    this.ubo = options.ubo;\n    this.isStatic = options.isStatic;\n    this._signature = createIdFromString(Object.keys(uniforms).map(\n      (i) => `${i}-${uniformStructures[i].type}`\n    ).join(\"-\"), \"uniform-group\");\n  }\n  /** Call this if you want the uniform groups data to be uploaded to the GPU only useful if `isStatic` is true. */\n  update() {\n    this._dirtyId++;\n  }\n};\n/** The default options used by the uniform group. */\n_UniformGroup.defaultOptions = {\n  /** if true the UniformGroup is handled as an Uniform buffer object. */\n  ubo: false,\n  /** if true, then you are responsible for when the data is uploaded to the GPU by calling `update()` */\n  isStatic: false\n};\nlet UniformGroup = _UniformGroup;\n\nexport { UniformGroup };\n//# sourceMappingURL=UniformGroup.mjs.map\n","\"use strict\";\nclass BindGroup {\n  /**\n   * Create a new instance eof the Bind Group.\n   * @param resources - The resources that are bound together for use by a shader.\n   */\n  constructor(resources) {\n    /** The resources that are bound together for use by a shader. */\n    this.resources = /* @__PURE__ */ Object.create(null);\n    this._dirty = true;\n    let index = 0;\n    for (const i in resources) {\n      const resource = resources[i];\n      this.setResource(resource, index++);\n    }\n    this._updateKey();\n  }\n  /**\n   * Updates the key if its flagged as dirty. This is used internally to\n   * match this bind group to a WebGPU BindGroup.\n   * @internal\n   * @ignore\n   */\n  _updateKey() {\n    if (!this._dirty)\n      return;\n    this._dirty = false;\n    const keyParts = [];\n    let index = 0;\n    for (const i in this.resources) {\n      keyParts[index++] = this.resources[i]._resourceId;\n    }\n    this._key = keyParts.join(\"|\");\n  }\n  /**\n   * Set a resource at a given index. this function will\n   * ensure that listeners will be removed from the current resource\n   * and added to the new resource.\n   * @param resource - The resource to set.\n   * @param index - The index to set the resource at.\n   */\n  setResource(resource, index) {\n    const currentResource = this.resources[index];\n    if (resource === currentResource)\n      return;\n    if (currentResource) {\n      resource.off?.(\"change\", this.onResourceChange, this);\n    }\n    resource.on?.(\"change\", this.onResourceChange, this);\n    this.resources[index] = resource;\n    this._dirty = true;\n  }\n  /**\n   * Returns the resource at the current specified index.\n   * @param index - The index of the resource to get.\n   * @returns - The resource at the specified index.\n   */\n  getResource(index) {\n    return this.resources[index];\n  }\n  /**\n   * Used internally to 'touch' each resource, to ensure that the GC\n   * knows that all resources in this bind group are still being used.\n   * @param tick - The current tick.\n   * @internal\n   * @ignore\n   */\n  _touch(tick) {\n    const resources = this.resources;\n    for (const i in resources) {\n      resources[i]._touched = tick;\n    }\n  }\n  /** Destroys this bind group and removes all listeners. */\n  destroy() {\n    const resources = this.resources;\n    for (const i in resources) {\n      const resource = resources[i];\n      resource.off?.(\"change\", this.onResourceChange, this);\n    }\n    this.resources = null;\n  }\n  onResourceChange(resource) {\n    this._dirty = true;\n    if (resource.destroyed) {\n      const resources = this.resources;\n      for (const i in resources) {\n        if (resources[i] === resource) {\n          resources[i] = null;\n        }\n      }\n    } else {\n      this._updateKey();\n    }\n  }\n}\n\nexport { BindGroup };\n//# sourceMappingURL=BindGroup.mjs.map\n","\"use strict\";\nvar RendererType = /* @__PURE__ */ ((RendererType2) => {\n  RendererType2[RendererType2[\"WEBGL\"] = 1] = \"WEBGL\";\n  RendererType2[RendererType2[\"WEBGPU\"] = 2] = \"WEBGPU\";\n  RendererType2[RendererType2[\"BOTH\"] = 3] = \"BOTH\";\n  return RendererType2;\n})(RendererType || {});\n\nexport { RendererType };\n//# sourceMappingURL=types.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { GlProgram } from '../../gl/shader/GlProgram.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { GpuProgram } from '../../gpu/shader/GpuProgram.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from './UniformGroup.mjs';\n\n\"use strict\";\nclass Shader extends EventEmitter {\n  constructor(options) {\n    super();\n    /** A unique identifier for the shader */\n    this.uid = uid(\"shader\");\n    /**\n     * A record of the uniform groups and resources used by the shader.\n     * This is used by WebGL renderer to sync uniform data.\n     * @internal\n     * @ignore\n     */\n    this._uniformBindMap = /* @__PURE__ */ Object.create(null);\n    this._ownedBindGroups = [];\n    let {\n      gpuProgram,\n      glProgram,\n      groups,\n      resources,\n      compatibleRenderers,\n      groupMap\n    } = options;\n    this.gpuProgram = gpuProgram;\n    this.glProgram = glProgram;\n    if (compatibleRenderers === void 0) {\n      compatibleRenderers = 0;\n      if (gpuProgram)\n        compatibleRenderers |= RendererType.WEBGPU;\n      if (glProgram)\n        compatibleRenderers |= RendererType.WEBGL;\n    }\n    this.compatibleRenderers = compatibleRenderers;\n    const nameHash = {};\n    if (!resources && !groups) {\n      resources = {};\n    }\n    if (resources && groups) {\n      throw new Error(\"[Shader] Cannot have both resources and groups\");\n    } else if (!gpuProgram && groups && !groupMap) {\n      throw new Error(\"[Shader] No group map or WebGPU shader provided - consider using resources instead.\");\n    } else if (!gpuProgram && groups && groupMap) {\n      for (const i in groupMap) {\n        for (const j in groupMap[i]) {\n          const uniformName = groupMap[i][j];\n          nameHash[uniformName] = {\n            group: i,\n            binding: j,\n            name: uniformName\n          };\n        }\n      }\n    } else if (gpuProgram && groups && !groupMap) {\n      const groupData = gpuProgram.structsAndGroups.groups;\n      groupMap = {};\n      groupData.forEach((data) => {\n        groupMap[data.group] = groupMap[data.group] || {};\n        groupMap[data.group][data.binding] = data.name;\n        nameHash[data.name] = data;\n      });\n    } else if (resources) {\n      groups = {};\n      groupMap = {};\n      if (gpuProgram) {\n        const groupData = gpuProgram.structsAndGroups.groups;\n        groupData.forEach((data) => {\n          groupMap[data.group] = groupMap[data.group] || {};\n          groupMap[data.group][data.binding] = data.name;\n          nameHash[data.name] = data;\n        });\n      }\n      let bindTick = 0;\n      for (const i in resources) {\n        if (nameHash[i])\n          continue;\n        if (!groups[99]) {\n          groups[99] = new BindGroup();\n          this._ownedBindGroups.push(groups[99]);\n        }\n        nameHash[i] = { group: 99, binding: bindTick, name: i };\n        groupMap[99] = groupMap[99] || {};\n        groupMap[99][bindTick] = i;\n        bindTick++;\n      }\n      for (const i in resources) {\n        const name = i;\n        let value = resources[i];\n        if (!value.source && !value._resourceType) {\n          value = new UniformGroup(value);\n        }\n        const data = nameHash[name];\n        if (data) {\n          if (!groups[data.group]) {\n            groups[data.group] = new BindGroup();\n            this._ownedBindGroups.push(groups[data.group]);\n          }\n          groups[data.group].setResource(value, data.binding);\n        }\n      }\n    }\n    this.groups = groups;\n    this._uniformBindMap = groupMap;\n    this.resources = this._buildResourceAccessor(groups, nameHash);\n  }\n  /**\n   * Sometimes a resource group will be provided later (for example global uniforms)\n   * In such cases, this method can be used to let the shader know about the group.\n   * @param name - the name of the resource group\n   * @param groupIndex - the index of the group (should match the webGPU shader group location)\n   * @param bindIndex - the index of the bind point (should match the webGPU shader bind point)\n   */\n  addResource(name, groupIndex, bindIndex) {\n    var _a, _b;\n    (_a = this._uniformBindMap)[groupIndex] || (_a[groupIndex] = {});\n    (_b = this._uniformBindMap[groupIndex])[bindIndex] || (_b[bindIndex] = name);\n    if (!this.groups[groupIndex]) {\n      this.groups[groupIndex] = new BindGroup();\n      this._ownedBindGroups.push(this.groups[groupIndex]);\n    }\n  }\n  _buildResourceAccessor(groups, nameHash) {\n    const uniformsOut = {};\n    for (const i in nameHash) {\n      const data = nameHash[i];\n      Object.defineProperty(uniformsOut, data.name, {\n        get() {\n          return groups[data.group].getResource(data.binding);\n        },\n        set(value) {\n          groups[data.group].setResource(value, data.binding);\n        }\n      });\n    }\n    return uniformsOut;\n  }\n  /**\n   * Use to destroy the shader when its not longer needed.\n   * It will destroy the resources and remove listeners.\n   * @param destroyPrograms - if the programs should be destroyed as well.\n   * Make sure its not being used by other shaders!\n   */\n  destroy(destroyPrograms = false) {\n    this.emit(\"destroy\", this);\n    if (destroyPrograms) {\n      this.gpuProgram?.destroy();\n      this.glProgram?.destroy();\n    }\n    this.gpuProgram = null;\n    this.glProgram = null;\n    this.removeAllListeners();\n    this._uniformBindMap = null;\n    this._ownedBindGroups.forEach((bindGroup) => {\n      bindGroup.destroy();\n    });\n    this._ownedBindGroups = null;\n    this.resources = null;\n    this.groups = null;\n  }\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram.from(gl);\n    }\n    return new Shader({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n}\n\nexport { Shader };\n//# sourceMappingURL=Shader.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { ImageSource } from '../../../../rendering/renderers/shared/texture/sources/ImageSource.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { deprecation } from '../../../../utils/logging/deprecation.mjs';\nimport { definedProps } from '../../../container/utils/definedProps.mjs';\n\n\"use strict\";\nconst emptyColorStops = [{ offset: 0, color: \"white\" }, { offset: 1, color: \"black\" }];\nconst _FillGradient = class _FillGradient {\n  constructor(...args) {\n    /** Unique identifier for this gradient instance */\n    this.uid = uid(\"fillGradient\");\n    /** Type of gradient - currently only supports 'linear' */\n    this.type = \"linear\";\n    /** Array of color stops defining the gradient */\n    this.colorStops = [];\n    let options = ensureGradientOptions(args);\n    const defaults = options.type === \"radial\" ? _FillGradient.defaultRadialOptions : _FillGradient.defaultLinearOptions;\n    options = { ...defaults, ...definedProps(options) };\n    this._textureSize = options.textureSize;\n    this._wrapMode = options.wrapMode;\n    if (options.type === \"radial\") {\n      this.center = options.center;\n      this.outerCenter = options.outerCenter ?? this.center;\n      this.innerRadius = options.innerRadius;\n      this.outerRadius = options.outerRadius;\n      this.scale = options.scale;\n      this.rotation = options.rotation;\n    } else {\n      this.start = options.start;\n      this.end = options.end;\n    }\n    this.textureSpace = options.textureSpace;\n    this.type = options.type;\n    options.colorStops.forEach((stop) => {\n      this.addColorStop(stop.offset, stop.color);\n    });\n  }\n  /**\n   * Adds a color stop to the gradient\n   * @param offset - Position of the stop (0-1)\n   * @param color - Color of the stop\n   * @returns This gradient instance for chaining\n   */\n  addColorStop(offset, color) {\n    this.colorStops.push({ offset, color: Color.shared.setValue(color).toHexa() });\n    return this;\n  }\n  /**\n   * Builds the internal texture and transform for the gradient.\n   * Called automatically when the gradient is first used.\n   * @internal\n   */\n  buildLinearGradient() {\n    if (this.texture)\n      return;\n    let { x: x0, y: y0 } = this.start;\n    let { x: x1, y: y1 } = this.end;\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    const flip = dx < 0 || dy < 0;\n    if (this._wrapMode === \"clamp-to-edge\") {\n      if (dx < 0) {\n        const temp = x0;\n        x0 = x1;\n        x1 = temp;\n        dx *= -1;\n      }\n      if (dy < 0) {\n        const temp = y0;\n        y0 = y1;\n        y1 = temp;\n        dy *= -1;\n      }\n    }\n    const colorStops = this.colorStops.length ? this.colorStops : emptyColorStops;\n    const defaultSize = this._textureSize;\n    const { canvas, context } = getCanvas(defaultSize, 1);\n    const gradient = !flip ? context.createLinearGradient(0, 0, this._textureSize, 0) : context.createLinearGradient(this._textureSize, 0, 0, 0);\n    addColorStops(gradient, colorStops);\n    context.fillStyle = gradient;\n    context.fillRect(0, 0, defaultSize, 1);\n    this.texture = new Texture({\n      source: new ImageSource({\n        resource: canvas,\n        addressMode: this._wrapMode\n      })\n    });\n    const dist = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx);\n    const m = new Matrix();\n    m.scale(dist / defaultSize, 1);\n    m.rotate(angle);\n    m.translate(x0, y0);\n    if (this.textureSpace === \"local\") {\n      m.scale(defaultSize, defaultSize);\n    }\n    this.transform = m;\n  }\n  buildGradient() {\n    if (this.type === \"linear\") {\n      this.buildLinearGradient();\n    } else {\n      this.buildRadialGradient();\n    }\n  }\n  buildRadialGradient() {\n    if (this.texture)\n      return;\n    const colorStops = this.colorStops.length ? this.colorStops : emptyColorStops;\n    const defaultSize = this._textureSize;\n    const { canvas, context } = getCanvas(defaultSize, defaultSize);\n    const { x: x0, y: y0 } = this.center;\n    const { x: x1, y: y1 } = this.outerCenter;\n    const r0 = this.innerRadius;\n    const r1 = this.outerRadius;\n    const ox = x1 - r1;\n    const oy = y1 - r1;\n    const scale = defaultSize / (r1 * 2);\n    const cx = (x0 - ox) * scale;\n    const cy = (y0 - oy) * scale;\n    const gradient = context.createRadialGradient(\n      cx,\n      cy,\n      r0 * scale,\n      (x1 - ox) * scale,\n      (y1 - oy) * scale,\n      r1 * scale\n    );\n    addColorStops(gradient, colorStops);\n    context.fillStyle = colorStops[colorStops.length - 1].color;\n    context.fillRect(0, 0, defaultSize, defaultSize);\n    context.fillStyle = gradient;\n    context.translate(cx, cy);\n    context.rotate(this.rotation);\n    context.scale(1, this.scale);\n    context.translate(-cx, -cy);\n    context.fillRect(0, 0, defaultSize, defaultSize);\n    this.texture = new Texture({\n      source: new ImageSource({\n        resource: canvas,\n        addressMode: this._wrapMode\n      })\n    });\n    const m = new Matrix();\n    m.scale(1 / scale, 1 / scale);\n    m.translate(ox, oy);\n    if (this.textureSpace === \"local\") {\n      m.scale(defaultSize, defaultSize);\n    }\n    this.transform = m;\n  }\n  /**\n   * Gets a unique key representing the current state of the gradient.\n   * Used internally for caching.\n   * @returns Unique string key\n   */\n  get styleKey() {\n    return this.uid;\n  }\n  destroy() {\n    this.texture?.destroy(true);\n    this.texture = null;\n  }\n};\n/**\n * Default options for creating a gradient fill\n * @property {PointData} start - Start point of the gradient (default: { x: 0, y: 0 })\n * @property {PointData} end - End point of the gradient (default: { x: 0, y: 1 })\n * @property {TextureSpace} textureSpace - Whether coordinates are 'global' or 'local' (default: 'local')\n * @property {number} textureSize - The size of the texture to use for the gradient (default: 256)\n * @property {Array<{offset: number, color: ColorSource}>} colorStops - Array of color stops (default: empty array)\n * @property {GradientType} type - Type of gradient (default: 'linear')\n * @property {WRAP_MODE} wrapMode - The wrap mode of the gradient (default: 'clamp-to-edge')\n */\n_FillGradient.defaultLinearOptions = {\n  start: { x: 0, y: 0 },\n  end: { x: 0, y: 1 },\n  colorStops: [],\n  textureSpace: \"local\",\n  type: \"linear\",\n  textureSize: 256,\n  wrapMode: \"clamp-to-edge\"\n};\n/**\n * Default options for creating a radial gradient fill\n * @property {PointData} innerCenter - Center of the inner circle (default: { x: 0.5, y: 0.5 })\n * @property {number} innerRadius - Radius of the inner circle (default: 0)\n * @property {PointData} outerCenter - Center of the outer circle (default: { x: 0.5, y: 0.5 })\n * @property {number} outerRadius - Radius of the outer circle (default: 0.5)\n * @property {TextureSpace} textureSpace - Whether coordinates are 'global' or 'local' (default: 'local')\n * @property {number} textureSize - The size of the texture to use for the gradient (default: 256)\n * @property {Array<{offset: number, color: ColorSource}>} colorStops - Array of color stops (default: empty array)\n * @property {GradientType} type - Type of gradient (default: 'radial')\n * @property {WRAP_MODE} wrapMode - The wrap mode of the gradient (default: 'clamp-to-edge')\n */\n_FillGradient.defaultRadialOptions = {\n  center: { x: 0.5, y: 0.5 },\n  innerRadius: 0,\n  outerRadius: 0.5,\n  colorStops: [],\n  scale: 1,\n  textureSpace: \"local\",\n  type: \"radial\",\n  textureSize: 256,\n  wrapMode: \"clamp-to-edge\"\n};\nlet FillGradient = _FillGradient;\nfunction addColorStops(gradient, colorStops) {\n  for (let i = 0; i < colorStops.length; i++) {\n    const stop = colorStops[i];\n    gradient.addColorStop(stop.offset, stop.color);\n  }\n}\nfunction getCanvas(width, height) {\n  const canvas = DOMAdapter.get().createCanvas(width, height);\n  const context = canvas.getContext(\"2d\");\n  return { canvas, context };\n}\nfunction ensureGradientOptions(args) {\n  let options = args[0] ?? {};\n  if (typeof options === \"number\" || args[1]) {\n    deprecation(\"8.5.2\", `use options object instead`);\n    options = {\n      type: \"linear\",\n      start: { x: args[0], y: args[1] },\n      end: { x: args[2], y: args[3] },\n      textureSpace: args[4],\n      textureSize: args[5] ?? FillGradient.defaultLinearOptions.textureSize\n    };\n  }\n  return options;\n}\n\nexport { FillGradient };\n//# sourceMappingURL=FillGradient.mjs.map\n","import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nconst repetitionMap = {\n  repeat: {\n    addressModeU: \"repeat\",\n    addressModeV: \"repeat\"\n  },\n  \"repeat-x\": {\n    addressModeU: \"repeat\",\n    addressModeV: \"clamp-to-edge\"\n  },\n  \"repeat-y\": {\n    addressModeU: \"clamp-to-edge\",\n    addressModeV: \"repeat\"\n  },\n  \"no-repeat\": {\n    addressModeU: \"clamp-to-edge\",\n    addressModeV: \"clamp-to-edge\"\n  }\n};\nclass FillPattern {\n  constructor(texture, repetition) {\n    /** unique id for this fill pattern */\n    this.uid = uid(\"fillPattern\");\n    this.transform = new Matrix();\n    this._styleKey = null;\n    this.texture = texture;\n    this.transform.scale(\n      1 / texture.frame.width,\n      1 / texture.frame.height\n    );\n    if (repetition) {\n      texture.source.style.addressModeU = repetitionMap[repetition].addressModeU;\n      texture.source.style.addressModeV = repetitionMap[repetition].addressModeV;\n    }\n  }\n  setTransform(transform) {\n    const texture = this.texture;\n    this.transform.copyFrom(transform);\n    this.transform.invert();\n    this.transform.scale(\n      1 / texture.frame.width,\n      1 / texture.frame.height\n    );\n    this._styleKey = null;\n  }\n  get styleKey() {\n    if (this._styleKey)\n      return this._styleKey;\n    this._styleKey = `fill-pattern-${this.uid}-${this.texture.uid}-${this.transform.toArray().join(\"-\")}`;\n    return this._styleKey;\n  }\n}\n\nexport { FillPattern };\n//# sourceMappingURL=FillPattern.mjs.map\n","\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n","import parse from 'parse-svg-path';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nfunction parseSVGPath(svgPath, path) {\n  const commands = parse(svgPath);\n  const subpaths = [];\n  let currentSubPath = null;\n  let lastX = 0;\n  let lastY = 0;\n  for (let i = 0; i < commands.length; i++) {\n    const command = commands[i];\n    const type = command[0];\n    const data = command;\n    switch (type) {\n      case \"M\":\n        lastX = data[1];\n        lastY = data[2];\n        path.moveTo(lastX, lastY);\n        break;\n      case \"m\":\n        lastX += data[1];\n        lastY += data[2];\n        path.moveTo(lastX, lastY);\n        break;\n      case \"H\":\n        lastX = data[1];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"h\":\n        lastX += data[1];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"V\":\n        lastY = data[1];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"v\":\n        lastY += data[1];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"L\":\n        lastX = data[1];\n        lastY = data[2];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"l\":\n        lastX += data[1];\n        lastY += data[2];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"C\":\n        lastX = data[5];\n        lastY = data[6];\n        path.bezierCurveTo(\n          data[1],\n          data[2],\n          // First control point\n          data[3],\n          data[4],\n          // Second control point\n          lastX,\n          lastY\n          // End point\n        );\n        break;\n      case \"c\":\n        path.bezierCurveTo(\n          lastX + data[1],\n          lastY + data[2],\n          // First control point\n          lastX + data[3],\n          lastY + data[4],\n          // Second control point\n          lastX + data[5],\n          lastY + data[6]\n          // End point\n        );\n        lastX += data[5];\n        lastY += data[6];\n        break;\n      case \"S\":\n        lastX = data[3];\n        lastY = data[4];\n        path.bezierCurveToShort(\n          data[1],\n          data[2],\n          // Control point\n          lastX,\n          lastY\n          // End point\n        );\n        break;\n      case \"s\":\n        path.bezierCurveToShort(\n          lastX + data[1],\n          lastY + data[2],\n          // Control point\n          lastX + data[3],\n          lastY + data[4]\n          // End point\n        );\n        lastX += data[3];\n        lastY += data[4];\n        break;\n      case \"Q\":\n        lastX = data[3];\n        lastY = data[4];\n        path.quadraticCurveTo(\n          data[1],\n          data[2],\n          // Control point\n          lastX,\n          lastY\n          // End point\n        );\n        break;\n      case \"q\":\n        path.quadraticCurveTo(\n          lastX + data[1],\n          lastY + data[2],\n          // Control point\n          lastX + data[3],\n          lastY + data[4]\n          // End point\n        );\n        lastX += data[3];\n        lastY += data[4];\n        break;\n      case \"T\":\n        lastX = data[1];\n        lastY = data[2];\n        path.quadraticCurveToShort(\n          lastX,\n          lastY\n          // End point\n        );\n        break;\n      case \"t\":\n        lastX += data[1];\n        lastY += data[2];\n        path.quadraticCurveToShort(\n          lastX,\n          lastY\n          // End point\n        );\n        break;\n      case \"A\":\n        lastX = data[6];\n        lastY = data[7];\n        path.arcToSvg(\n          data[1],\n          // rx\n          data[2],\n          // ry\n          data[3],\n          // x-axis-rotation\n          data[4],\n          // large-arc-flag\n          data[5],\n          // sweep-flag\n          lastX,\n          lastY\n          // End point\n        );\n        break;\n      case \"a\":\n        lastX += data[6];\n        lastY += data[7];\n        path.arcToSvg(\n          data[1],\n          // rx\n          data[2],\n          // ry\n          data[3],\n          // x-axis-rotation\n          data[4],\n          // large-arc-flag\n          data[5],\n          // sweep-flag\n          lastX,\n          lastY\n          // End point\n        );\n        break;\n      case \"Z\":\n      case \"z\":\n        path.closePath();\n        if (subpaths.length > 0) {\n          currentSubPath = subpaths.pop();\n          if (currentSubPath) {\n            lastX = currentSubPath.startX;\n            lastY = currentSubPath.startY;\n          } else {\n            lastX = 0;\n            lastY = 0;\n          }\n        }\n        currentSubPath = null;\n        break;\n      default:\n        warn(`Unknown SVG path command: ${type}`);\n    }\n    if (type !== \"Z\" && type !== \"z\") {\n      if (currentSubPath === null) {\n        currentSubPath = { startX: lastX, startY: lastY };\n        subpaths.push(currentSubPath);\n      }\n    }\n  }\n  return path;\n}\n\nexport { parseSVGPath };\n//# sourceMappingURL=parseSVGPath.mjs.map\n","import { Rectangle } from './Rectangle.mjs';\n\n\"use strict\";\nclass Circle {\n  /**\n   * @param x - The X coordinate of the center of this circle\n   * @param y - The Y coordinate of the center of this circle\n   * @param radius - The radius of the circle\n   */\n  constructor(x = 0, y = 0, radius = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'circle'\n     */\n    this.type = \"circle\";\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n  }\n  /**\n   * Creates a clone of this Circle instance\n   * @returns A copy of the Circle\n   */\n  clone() {\n    return new Circle(this.x, this.y, this.radius);\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coordinates are within this Circle\n   */\n  contains(x, y) {\n    if (this.radius <= 0)\n      return false;\n    const r2 = this.radius * this.radius;\n    let dx = this.x - x;\n    let dy = this.y - y;\n    dx *= dx;\n    dy *= dy;\n    return dx + dy <= r2;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle including the stroke.\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param width - The width of the line to check\n   * @param alignment - The alignment of the stroke, 0.5 by default\n   * @returns Whether the x/y coordinates are within this Circle\n   */\n  strokeContains(x, y, width, alignment = 0.5) {\n    if (this.radius === 0)\n      return false;\n    const dx = this.x - x;\n    const dy = this.y - y;\n    const radius = this.radius;\n    const outerWidth = (1 - alignment) * width;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance <= radius + outerWidth && distance > radius - (width - outerWidth);\n  }\n  /**\n   * Returns the framing rectangle of the circle as a Rectangle object\n   * @param out\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out || (out = new Rectangle());\n    out.x = this.x - this.radius;\n    out.y = this.y - this.radius;\n    out.width = this.radius * 2;\n    out.height = this.radius * 2;\n    return out;\n  }\n  /**\n   * Copies another circle to this one.\n   * @param circle - The circle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(circle) {\n    this.x = circle.x;\n    this.y = circle.y;\n    this.radius = circle.radius;\n    return this;\n  }\n  /**\n   * Copies this circle to another one.\n   * @param circle - The circle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(circle) {\n    circle.copyFrom(this);\n    return circle;\n  }\n  toString() {\n    return `[pixi.js/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`;\n  }\n}\n\nexport { Circle };\n//# sourceMappingURL=Circle.mjs.map\n","import { Rectangle } from './Rectangle.mjs';\n\n\"use strict\";\nclass Ellipse {\n  /**\n   * @param x - The X coordinate of the center of this ellipse\n   * @param y - The Y coordinate of the center of this ellipse\n   * @param halfWidth - The half width of this ellipse\n   * @param halfHeight - The half height of this ellipse\n   */\n  constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'ellipse'\n     */\n    this.type = \"ellipse\";\n    this.x = x;\n    this.y = y;\n    this.halfWidth = halfWidth;\n    this.halfHeight = halfHeight;\n  }\n  /**\n   * Creates a clone of this Ellipse instance\n   * @returns {Ellipse} A copy of the ellipse\n   */\n  clone() {\n    return new Ellipse(this.x, this.y, this.halfWidth, this.halfHeight);\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coords are within this ellipse\n   */\n  contains(x, y) {\n    if (this.halfWidth <= 0 || this.halfHeight <= 0) {\n      return false;\n    }\n    let normx = (x - this.x) / this.halfWidth;\n    let normy = (y - this.y) / this.halfHeight;\n    normx *= normx;\n    normy *= normy;\n    return normx + normy <= 1;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse including stroke\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @param alignment - The alignment of the stroke\n   * @returns Whether the x/y coords are within this ellipse\n   */\n  strokeContains(x, y, strokeWidth, alignment = 0.5) {\n    const { halfWidth, halfHeight } = this;\n    if (halfWidth <= 0 || halfHeight <= 0) {\n      return false;\n    }\n    const strokeOuterWidth = strokeWidth * (1 - alignment);\n    const strokeInnerWidth = strokeWidth - strokeOuterWidth;\n    const innerHorizontal = halfWidth - strokeInnerWidth;\n    const innerVertical = halfHeight - strokeInnerWidth;\n    const outerHorizontal = halfWidth + strokeOuterWidth;\n    const outerVertical = halfHeight + strokeOuterWidth;\n    const normalizedX = x - this.x;\n    const normalizedY = y - this.y;\n    const innerEllipse = normalizedX * normalizedX / (innerHorizontal * innerHorizontal) + normalizedY * normalizedY / (innerVertical * innerVertical);\n    const outerEllipse = normalizedX * normalizedX / (outerHorizontal * outerHorizontal) + normalizedY * normalizedY / (outerVertical * outerVertical);\n    return innerEllipse > 1 && outerEllipse <= 1;\n  }\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   * @param out\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out || (out = new Rectangle());\n    out.x = this.x - this.halfWidth;\n    out.y = this.y - this.halfHeight;\n    out.width = this.halfWidth * 2;\n    out.height = this.halfHeight * 2;\n    return out;\n  }\n  /**\n   * Copies another ellipse to this one.\n   * @param ellipse - The ellipse to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(ellipse) {\n    this.x = ellipse.x;\n    this.y = ellipse.y;\n    this.halfWidth = ellipse.halfWidth;\n    this.halfHeight = ellipse.halfHeight;\n    return this;\n  }\n  /**\n   * Copies this ellipse to another one.\n   * @param ellipse - The ellipse to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(ellipse) {\n    ellipse.copyFrom(this);\n    return ellipse;\n  }\n  toString() {\n    return `[pixi.js/math:Ellipse x=${this.x} y=${this.y} halfWidth=${this.halfWidth} halfHeight=${this.halfHeight}]`;\n  }\n}\n\nexport { Ellipse };\n//# sourceMappingURL=Ellipse.mjs.map\n","\"use strict\";\nfunction squaredDistanceToLineSegment(x, y, x1, y1, x2, y2) {\n  const a = x - x1;\n  const b = y - y1;\n  const c = x2 - x1;\n  const d = y2 - y1;\n  const dot = a * c + b * d;\n  const lenSq = c * c + d * d;\n  let param = -1;\n  if (lenSq !== 0) {\n    param = dot / lenSq;\n  }\n  let xx;\n  let yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * c;\n    yy = y1 + param * d;\n  }\n  const dx = x - xx;\n  const dy = y - yy;\n  return dx * dx + dy * dy;\n}\n\nexport { squaredDistanceToLineSegment };\n//# sourceMappingURL=squaredDistanceToLineSegment.mjs.map\n","import { squaredDistanceToLineSegment } from '../misc/squaredDistanceToLineSegment.mjs';\nimport { Rectangle } from './Rectangle.mjs';\n\n\"use strict\";\nlet tempRect;\nlet tempRect2;\nclass Polygon {\n  /**\n   * @param points - This can be an array of Points\n   *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n   *  the arguments passed can be all the points of the polygon e.g.\n   *  `new Polygon(new Point(), new Point(), ...)`, or the arguments passed can be flat\n   *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n   */\n  constructor(...points) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'polygon'\n     */\n    this.type = \"polygon\";\n    let flat = Array.isArray(points[0]) ? points[0] : points;\n    if (typeof flat[0] !== \"number\") {\n      const p = [];\n      for (let i = 0, il = flat.length; i < il; i++) {\n        p.push(flat[i].x, flat[i].y);\n      }\n      flat = p;\n    }\n    this.points = flat;\n    this.closePath = true;\n  }\n  /**\n   * Determines whether the polygon's points are arranged in a clockwise direction.\n   * This is calculated using the \"shoelace formula\" (also known as surveyor's formula) to find the signed area.\n   * A positive area indicates clockwise winding, while negative indicates counter-clockwise.\n   *\n   * The formula sums up the cross products of adjacent vertices:\n   * For each pair of adjacent points (x1,y1) and (x2,y2), we calculate (x1*y2 - x2*y1)\n   * The final sum divided by 2 gives the signed area - positive for clockwise.\n   * @returns `true` if the polygon's points are arranged clockwise, `false` if counter-clockwise\n   */\n  isClockwise() {\n    let area = 0;\n    const points = this.points;\n    const length = points.length;\n    for (let i = 0; i < length; i += 2) {\n      const x1 = points[i];\n      const y1 = points[i + 1];\n      const x2 = points[(i + 2) % length];\n      const y2 = points[(i + 3) % length];\n      area += (x2 - x1) * (y2 + y1);\n    }\n    return area < 0;\n  }\n  /**\n   * Checks if this polygon completely contains another polygon.\n   *\n   * This is useful for detecting holes in shapes, like when parsing SVG paths.\n   * For example, if you have two polygons:\n   * ```ts\n   * const outerSquare = new Polygon([0,0, 100,0, 100,100, 0,100]); // A square\n   * const innerSquare = new Polygon([25,25, 75,25, 75,75, 25,75]); // A smaller square inside\n   *\n   * outerSquare.containsPolygon(innerSquare); // Returns true\n   * innerSquare.containsPolygon(outerSquare); // Returns false\n   * ```\n   * @param polygon - The polygon to test for containment\n   * @returns True if this polygon completely contains the other polygon\n   */\n  containsPolygon(polygon) {\n    const thisBounds = this.getBounds(tempRect);\n    const otherBounds = polygon.getBounds(tempRect2);\n    if (!thisBounds.containsRect(otherBounds)) {\n      return false;\n    }\n    const points = polygon.points;\n    for (let i = 0; i < points.length; i += 2) {\n      const x = points[i];\n      const y = points[i + 1];\n      if (!this.contains(x, y)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Creates a clone of this polygon.\n   * @returns - A copy of the polygon.\n   */\n  clone() {\n    const points = this.points.slice();\n    const polygon = new Polygon(points);\n    polygon.closePath = this.closePath;\n    return polygon;\n  }\n  /**\n   * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this polygon.\n   */\n  contains(x, y) {\n    let inside = false;\n    const length = this.points.length / 2;\n    for (let i = 0, j = length - 1; i < length; j = i++) {\n      const xi = this.points[i * 2];\n      const yi = this.points[i * 2 + 1];\n      const xj = this.points[j * 2];\n      const yj = this.points[j * 2 + 1];\n      const intersect = yi > y !== yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return inside;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this polygon including the stroke.\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @param alignment - The alignment of the stroke, 0.5 by default\n   * @returns Whether the x/y coordinates are within this polygon\n   */\n  strokeContains(x, y, strokeWidth, alignment = 0.5) {\n    const strokeWidthSquared = strokeWidth * strokeWidth;\n    const rightWidthSquared = strokeWidthSquared * (1 - alignment);\n    const leftWidthSquared = strokeWidthSquared - rightWidthSquared;\n    const { points } = this;\n    const iterationLength = points.length - (this.closePath ? 0 : 2);\n    for (let i = 0; i < iterationLength; i += 2) {\n      const x1 = points[i];\n      const y1 = points[i + 1];\n      const x2 = points[(i + 2) % points.length];\n      const y2 = points[(i + 3) % points.length];\n      const distanceSquared = squaredDistanceToLineSegment(x, y, x1, y1, x2, y2);\n      const sign = Math.sign((x2 - x1) * (y - y1) - (y2 - y1) * (x - x1));\n      if (distanceSquared <= (sign < 0 ? leftWidthSquared : rightWidthSquared)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Returns the framing rectangle of the polygon as a Rectangle object\n   * @param out - optional rectangle to store the result\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out || (out = new Rectangle());\n    const points = this.points;\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i];\n      const y = points[i + 1];\n      minX = x < minX ? x : minX;\n      maxX = x > maxX ? x : maxX;\n      minY = y < minY ? y : minY;\n      maxY = y > maxY ? y : maxY;\n    }\n    out.x = minX;\n    out.width = maxX - minX;\n    out.y = minY;\n    out.height = maxY - minY;\n    return out;\n  }\n  /**\n   * Copies another polygon to this one.\n   * @param polygon - The polygon to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(polygon) {\n    this.points = polygon.points.slice();\n    this.closePath = polygon.closePath;\n    return this;\n  }\n  /**\n   * Copies this polygon to another one.\n   * @param polygon - The polygon to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(polygon) {\n    polygon.copyFrom(this);\n    return polygon;\n  }\n  toString() {\n    return `[pixi.js/math:PolygoncloseStroke=${this.closePath}points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, \"\")}]`;\n  }\n  /**\n   * Get the last X coordinate of the polygon\n   * @readonly\n   */\n  get lastX() {\n    return this.points[this.points.length - 2];\n  }\n  /**\n   * Get the last Y coordinate of the polygon\n   * @readonly\n   */\n  get lastY() {\n    return this.points[this.points.length - 1];\n  }\n  /**\n   * Get the first X coordinate of the polygon\n   * @readonly\n   */\n  get x() {\n    return this.points[this.points.length - 2];\n  }\n  /**\n   * Get the first Y coordinate of the polygon\n   * @readonly\n   */\n  get y() {\n    return this.points[this.points.length - 1];\n  }\n}\n\nexport { Polygon };\n//# sourceMappingURL=Polygon.mjs.map\n","import { Rectangle } from './Rectangle.mjs';\n\n\"use strict\";\nconst isCornerWithinStroke = (pX, pY, cornerX, cornerY, radius, strokeWidthInner, strokeWidthOuter) => {\n  const dx = pX - cornerX;\n  const dy = pY - cornerY;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  return distance >= radius - strokeWidthInner && distance <= radius + strokeWidthOuter;\n};\nclass RoundedRectangle {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n   * @param width - The overall width of this rounded rectangle\n   * @param height - The overall height of this rounded rectangle\n   * @param radius - Controls the radius of the rounded corners\n   */\n  constructor(x = 0, y = 0, width = 0, height = 0, radius = 20) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'roundedRectangle'\n     */\n    this.type = \"roundedRectangle\";\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n  }\n  /**\n   * Returns the framing rectangle of the rounded rectangle as a Rectangle object\n   * @param out - optional rectangle to store the result\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out || (out = new Rectangle());\n    out.x = this.x;\n    out.y = this.y;\n    out.width = this.width;\n    out.height = this.height;\n    return out;\n  }\n  /**\n   * Creates a clone of this Rounded Rectangle.\n   * @returns - A copy of the rounded rectangle.\n   */\n  clone() {\n    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n  }\n  /**\n   * Copies another rectangle to this one.\n   * @param rectangle - The rectangle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  }\n  /**\n   * Copies this rectangle to another one.\n   * @param rectangle - The rectangle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(rectangle) {\n    rectangle.copyFrom(this);\n    return rectangle;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n   */\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x <= this.x + this.width) {\n      if (y >= this.y && y <= this.y + this.height) {\n        const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n        if (y >= this.y + radius && y <= this.y + this.height - radius || x >= this.x + radius && x <= this.x + this.width - radius) {\n          return true;\n        }\n        let dx = x - (this.x + radius);\n        let dy = y - (this.y + radius);\n        const radius2 = radius * radius;\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + this.width - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dy = y - (this.y + this.height - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this rectangle including the stroke.\n   * @param pX - The X coordinate of the point to test\n   * @param pY - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @param alignment - The alignment of the stroke, 0.5 by default\n   * @returns Whether the x/y coordinates are within this rectangle\n   */\n  strokeContains(pX, pY, strokeWidth, alignment = 0.5) {\n    const { x, y, width, height, radius } = this;\n    const strokeWidthOuter = strokeWidth * (1 - alignment);\n    const strokeWidthInner = strokeWidth - strokeWidthOuter;\n    const innerX = x + radius;\n    const innerY = y + radius;\n    const innerWidth = width - radius * 2;\n    const innerHeight = height - radius * 2;\n    const rightBound = x + width;\n    const bottomBound = y + height;\n    if ((pX >= x - strokeWidthOuter && pX <= x + strokeWidthInner || pX >= rightBound - strokeWidthInner && pX <= rightBound + strokeWidthOuter) && pY >= innerY && pY <= innerY + innerHeight) {\n      return true;\n    }\n    if ((pY >= y - strokeWidthOuter && pY <= y + strokeWidthInner || pY >= bottomBound - strokeWidthInner && pY <= bottomBound + strokeWidthOuter) && pX >= innerX && pX <= innerX + innerWidth) {\n      return true;\n    }\n    return (\n      // Top-left\n      pX < innerX && pY < innerY && isCornerWithinStroke(\n        pX,\n        pY,\n        innerX,\n        innerY,\n        radius,\n        strokeWidthInner,\n        strokeWidthOuter\n      ) || pX > rightBound - radius && pY < innerY && isCornerWithinStroke(\n        pX,\n        pY,\n        rightBound - radius,\n        innerY,\n        radius,\n        strokeWidthInner,\n        strokeWidthOuter\n      ) || pX > rightBound - radius && pY > bottomBound - radius && isCornerWithinStroke(\n        pX,\n        pY,\n        rightBound - radius,\n        bottomBound - radius,\n        radius,\n        strokeWidthInner,\n        strokeWidthOuter\n      ) || pX < innerX && pY > bottomBound - radius && isCornerWithinStroke(\n        pX,\n        pY,\n        innerX,\n        bottomBound - radius,\n        radius,\n        strokeWidthInner,\n        strokeWidthOuter\n      )\n    );\n  }\n  toString() {\n    return `[pixi.js/math:RoundedRectangle x=${this.x} y=${this.y}width=${this.width} height=${this.height} radius=${this.radius}]`;\n  }\n}\n\nexport { RoundedRectangle };\n//# sourceMappingURL=RoundedRectangle.mjs.map\n","\"use strict\";\nconst fragTemplate = [\n  \"precision mediump float;\",\n  \"void main(void){\",\n  \"float test = 0.1;\",\n  \"%forloop%\",\n  \"gl_FragColor = vec4(0.0);\",\n  \"}\"\n].join(\"\\n\");\nfunction generateIfTestSrc(maxIfs) {\n  let src = \"\";\n  for (let i = 0; i < maxIfs; ++i) {\n    if (i > 0) {\n      src += \"\\nelse \";\n    }\n    if (i < maxIfs - 1) {\n      src += `if(test == ${i}.0){}`;\n    }\n  }\n  return src;\n}\nfunction checkMaxIfStatementsInShader(maxIfs, gl) {\n  if (maxIfs === 0) {\n    throw new Error(\"Invalid value of `0` passed to `checkMaxIfStatementsInShader`\");\n  }\n  const shader = gl.createShader(gl.FRAGMENT_SHADER);\n  try {\n    while (true) {\n      const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n      gl.shaderSource(shader, fragmentSrc);\n      gl.compileShader(shader);\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        maxIfs = maxIfs / 2 | 0;\n      } else {\n        break;\n      }\n    }\n  } finally {\n    gl.deleteShader(shader);\n  }\n  return maxIfs;\n}\n\nexport { checkMaxIfStatementsInShader };\n//# sourceMappingURL=checkMaxIfStatementsInShader.mjs.map\n","import { getTestContext } from '../../../renderers/gl/shader/program/getTestContext.mjs';\nimport { checkMaxIfStatementsInShader } from './checkMaxIfStatementsInShader.mjs';\n\n\"use strict\";\nlet maxTexturesPerBatchCache = null;\nfunction getMaxTexturesPerBatch() {\n  if (maxTexturesPerBatchCache)\n    return maxTexturesPerBatchCache;\n  const gl = getTestContext();\n  maxTexturesPerBatchCache = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  maxTexturesPerBatchCache = checkMaxIfStatementsInShader(\n    maxTexturesPerBatchCache,\n    gl\n  );\n  gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n  return maxTexturesPerBatchCache;\n}\n\nexport { getMaxTexturesPerBatch };\n//# sourceMappingURL=maxRecommendedTextures.mjs.map\n","import { BindGroup } from '../../renderers/gpu/shader/BindGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { getMaxTexturesPerBatch } from '../gl/utils/maxRecommendedTextures.mjs';\n\n\"use strict\";\nconst cachedGroups = {};\nfunction getTextureBatchBindGroup(textures, size) {\n  let uid = 2166136261;\n  for (let i = 0; i < size; i++) {\n    uid ^= textures[i].uid;\n    uid = Math.imul(uid, 16777619);\n    uid >>>= 0;\n  }\n  return cachedGroups[uid] || generateTextureBatchBindGroup(textures, size, uid);\n}\nlet maxTextures = 0;\nfunction generateTextureBatchBindGroup(textures, size, key) {\n  const bindGroupResources = {};\n  let bindIndex = 0;\n  if (!maxTextures)\n    maxTextures = getMaxTexturesPerBatch();\n  for (let i = 0; i < maxTextures; i++) {\n    const texture = i < size ? textures[i] : Texture.EMPTY.source;\n    bindGroupResources[bindIndex++] = texture.source;\n    bindGroupResources[bindIndex++] = texture.style;\n  }\n  const bindGroup = new BindGroup(bindGroupResources);\n  cachedGroups[key] = bindGroup;\n  return bindGroup;\n}\n\nexport { getTextureBatchBindGroup };\n//# sourceMappingURL=getTextureBatchBindGroup.mjs.map\n","\"use strict\";\nclass ViewableBuffer {\n  constructor(sizeOrBuffer) {\n    if (typeof sizeOrBuffer === \"number\") {\n      this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n    } else if (sizeOrBuffer instanceof Uint8Array) {\n      this.rawBinaryData = sizeOrBuffer.buffer;\n    } else {\n      this.rawBinaryData = sizeOrBuffer;\n    }\n    this.uint32View = new Uint32Array(this.rawBinaryData);\n    this.float32View = new Float32Array(this.rawBinaryData);\n    this.size = this.rawBinaryData.byteLength;\n  }\n  /** View on the raw binary data as a `Int8Array`. */\n  get int8View() {\n    if (!this._int8View) {\n      this._int8View = new Int8Array(this.rawBinaryData);\n    }\n    return this._int8View;\n  }\n  /** View on the raw binary data as a `Uint8Array`. */\n  get uint8View() {\n    if (!this._uint8View) {\n      this._uint8View = new Uint8Array(this.rawBinaryData);\n    }\n    return this._uint8View;\n  }\n  /**  View on the raw binary data as a `Int16Array`. */\n  get int16View() {\n    if (!this._int16View) {\n      this._int16View = new Int16Array(this.rawBinaryData);\n    }\n    return this._int16View;\n  }\n  /** View on the raw binary data as a `Int32Array`. */\n  get int32View() {\n    if (!this._int32View) {\n      this._int32View = new Int32Array(this.rawBinaryData);\n    }\n    return this._int32View;\n  }\n  /** View on the raw binary data as a `Float64Array`. */\n  get float64View() {\n    if (!this._float64Array) {\n      this._float64Array = new Float64Array(this.rawBinaryData);\n    }\n    return this._float64Array;\n  }\n  /** View on the raw binary data as a `BigUint64Array`. */\n  get bigUint64View() {\n    if (!this._bigUint64Array) {\n      this._bigUint64Array = new BigUint64Array(this.rawBinaryData);\n    }\n    return this._bigUint64Array;\n  }\n  /**\n   * Returns the view of the given type.\n   * @param type - One of `int8`, `uint8`, `int16`,\n   *    `uint16`, `int32`, `uint32`, and `float32`.\n   * @returns - typed array of given type\n   */\n  view(type) {\n    return this[`${type}View`];\n  }\n  /** Destroys all buffer references. Do not use after calling this. */\n  destroy() {\n    this.rawBinaryData = null;\n    this._int8View = null;\n    this._uint8View = null;\n    this._int16View = null;\n    this.uint16View = null;\n    this._int32View = null;\n    this.uint32View = null;\n    this.float32View = null;\n  }\n  /**\n   * Returns the size of the given type in bytes.\n   * @param type - One of `int8`, `uint8`, `int16`,\n   *   `uint16`, `int32`, `uint32`, and `float32`.\n   * @returns - size of the type in bytes\n   */\n  static sizeOf(type) {\n    switch (type) {\n      case \"int8\":\n      case \"uint8\":\n        return 1;\n      case \"int16\":\n      case \"uint16\":\n        return 2;\n      case \"int32\":\n      case \"uint32\":\n      case \"float32\":\n        return 4;\n      default:\n        throw new Error(`${type} isn't a valid view type`);\n    }\n  }\n}\n\nexport { ViewableBuffer };\n//# sourceMappingURL=ViewableBuffer.mjs.map\n","\"use strict\";\nfunction fastCopy(sourceBuffer, destinationBuffer) {\n  const lengthDouble = sourceBuffer.byteLength / 8 | 0;\n  const sourceFloat64View = new Float64Array(sourceBuffer, 0, lengthDouble);\n  const destinationFloat64View = new Float64Array(destinationBuffer, 0, lengthDouble);\n  destinationFloat64View.set(sourceFloat64View);\n  const remainingBytes = sourceBuffer.byteLength - lengthDouble * 8;\n  if (remainingBytes > 0) {\n    const sourceUint8View = new Uint8Array(sourceBuffer, lengthDouble * 8, remainingBytes);\n    const destinationUint8View = new Uint8Array(destinationBuffer, lengthDouble * 8, remainingBytes);\n    destinationUint8View.set(sourceUint8View);\n  }\n}\n\nexport { fastCopy };\n//# sourceMappingURL=fastCopy.mjs.map\n","\"use strict\";\nconst BLEND_TO_NPM = {\n  normal: \"normal-npm\",\n  add: \"add-npm\",\n  screen: \"screen-npm\"\n};\nvar STENCIL_MODES = /* @__PURE__ */ ((STENCIL_MODES2) => {\n  STENCIL_MODES2[STENCIL_MODES2[\"DISABLED\"] = 0] = \"DISABLED\";\n  STENCIL_MODES2[STENCIL_MODES2[\"RENDERING_MASK_ADD\"] = 1] = \"RENDERING_MASK_ADD\";\n  STENCIL_MODES2[STENCIL_MODES2[\"MASK_ACTIVE\"] = 2] = \"MASK_ACTIVE\";\n  STENCIL_MODES2[STENCIL_MODES2[\"INVERSE_MASK_ACTIVE\"] = 3] = \"INVERSE_MASK_ACTIVE\";\n  STENCIL_MODES2[STENCIL_MODES2[\"RENDERING_MASK_REMOVE\"] = 4] = \"RENDERING_MASK_REMOVE\";\n  STENCIL_MODES2[STENCIL_MODES2[\"NONE\"] = 5] = \"NONE\";\n  return STENCIL_MODES2;\n})(STENCIL_MODES || {});\n\nexport { BLEND_TO_NPM, STENCIL_MODES };\n//# sourceMappingURL=const.mjs.map\n","import { BLEND_TO_NPM } from './const.mjs';\n\n\"use strict\";\nfunction getAdjustedBlendModeBlend(blendMode, textureSource) {\n  if (textureSource.alphaMode === \"no-premultiply-alpha\") {\n    return BLEND_TO_NPM[blendMode] || blendMode;\n  }\n  return blendMode;\n}\n\nexport { getAdjustedBlendModeBlend };\n//# sourceMappingURL=getAdjustedBlendModeBlend.mjs.map\n","\"use strict\";\nclass BatchTextureArray {\n  constructor() {\n    /** Respective locations for textures. */\n    this.ids = /* @__PURE__ */ Object.create(null);\n    this.textures = [];\n    this.count = 0;\n  }\n  /** Clear the textures and their locations. */\n  clear() {\n    for (let i = 0; i < this.count; i++) {\n      const t = this.textures[i];\n      this.textures[i] = null;\n      this.ids[t.uid] = null;\n    }\n    this.count = 0;\n  }\n}\n\nexport { BatchTextureArray };\n//# sourceMappingURL=BatchTextureArray.mjs.map\n","import { uid } from '../../../utils/data/uid.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { fastCopy } from '../../renderers/shared/buffer/utils/fastCopy.mjs';\nimport { getAdjustedBlendModeBlend } from '../../renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { getMaxTexturesPerBatch } from '../gl/utils/maxRecommendedTextures.mjs';\nimport { BatchTextureArray } from './BatchTextureArray.mjs';\n\n\"use strict\";\nclass Batch {\n  constructor() {\n    this.renderPipeId = \"batch\";\n    this.action = \"startBatch\";\n    // TODO - eventually this could be useful for flagging batches as dirty and then only rebuilding those ones\n    // public elementStart = 0;\n    // public elementSize = 0;\n    // for drawing..\n    this.start = 0;\n    this.size = 0;\n    this.textures = new BatchTextureArray();\n    this.blendMode = \"normal\";\n    this.topology = \"triangle-strip\";\n    this.canBundle = true;\n  }\n  destroy() {\n    this.textures = null;\n    this.gpuBindGroup = null;\n    this.bindGroup = null;\n    this.batcher = null;\n  }\n}\nconst batchPool = [];\nlet batchPoolIndex = 0;\nfunction getBatchFromPool() {\n  return batchPoolIndex > 0 ? batchPool[--batchPoolIndex] : new Batch();\n}\nfunction returnBatchToPool(batch) {\n  batchPool[batchPoolIndex++] = batch;\n}\nlet BATCH_TICK = 0;\nconst _Batcher = class _Batcher {\n  constructor(options = {}) {\n    /** unique id for this batcher */\n    this.uid = uid(\"batcher\");\n    /** Indicates whether the batch data has been modified and needs updating. */\n    this.dirty = true;\n    /** The current index of the batch being processed. */\n    this.batchIndex = 0;\n    /** An array of all batches created during the current rendering process. */\n    this.batches = [];\n    this._elements = [];\n    _Batcher.defaultOptions.maxTextures = _Batcher.defaultOptions.maxTextures ?? getMaxTexturesPerBatch();\n    options = { ..._Batcher.defaultOptions, ...options };\n    const { maxTextures, attributesInitialSize, indicesInitialSize } = options;\n    this.attributeBuffer = new ViewableBuffer(attributesInitialSize * 4);\n    this.indexBuffer = new Uint16Array(indicesInitialSize);\n    this.maxTextures = maxTextures;\n  }\n  begin() {\n    this.elementSize = 0;\n    this.elementStart = 0;\n    this.indexSize = 0;\n    this.attributeSize = 0;\n    for (let i = 0; i < this.batchIndex; i++) {\n      returnBatchToPool(this.batches[i]);\n    }\n    this.batchIndex = 0;\n    this._batchIndexStart = 0;\n    this._batchIndexSize = 0;\n    this.dirty = true;\n  }\n  add(batchableObject) {\n    this._elements[this.elementSize++] = batchableObject;\n    batchableObject._indexStart = this.indexSize;\n    batchableObject._attributeStart = this.attributeSize;\n    batchableObject._batcher = this;\n    this.indexSize += batchableObject.indexSize;\n    this.attributeSize += batchableObject.attributeSize * this.vertexSize;\n  }\n  checkAndUpdateTexture(batchableObject, texture) {\n    const textureId = batchableObject._batch.textures.ids[texture._source.uid];\n    if (!textureId && textureId !== 0)\n      return false;\n    batchableObject._textureId = textureId;\n    batchableObject.texture = texture;\n    return true;\n  }\n  updateElement(batchableObject) {\n    this.dirty = true;\n    const attributeBuffer = this.attributeBuffer;\n    if (batchableObject.packAsQuad) {\n      this.packQuadAttributes(\n        batchableObject,\n        attributeBuffer.float32View,\n        attributeBuffer.uint32View,\n        batchableObject._attributeStart,\n        batchableObject._textureId\n      );\n    } else {\n      this.packAttributes(\n        batchableObject,\n        attributeBuffer.float32View,\n        attributeBuffer.uint32View,\n        batchableObject._attributeStart,\n        batchableObject._textureId\n      );\n    }\n  }\n  /**\n   * breaks the batcher. This happens when a batch gets too big,\n   * or we need to switch to a different type of rendering (a filter for example)\n   * @param instructionSet\n   */\n  break(instructionSet) {\n    const elements = this._elements;\n    if (!elements[this.elementStart])\n      return;\n    let batch = getBatchFromPool();\n    let textureBatch = batch.textures;\n    textureBatch.clear();\n    const firstElement = elements[this.elementStart];\n    let blendMode = getAdjustedBlendModeBlend(firstElement.blendMode, firstElement.texture._source);\n    let topology = firstElement.topology;\n    if (this.attributeSize * 4 > this.attributeBuffer.size) {\n      this._resizeAttributeBuffer(this.attributeSize * 4);\n    }\n    if (this.indexSize > this.indexBuffer.length) {\n      this._resizeIndexBuffer(this.indexSize);\n    }\n    const f32 = this.attributeBuffer.float32View;\n    const u32 = this.attributeBuffer.uint32View;\n    const indexBuffer = this.indexBuffer;\n    let size = this._batchIndexSize;\n    let start = this._batchIndexStart;\n    let action = \"startBatch\";\n    const maxTextures = this.maxTextures;\n    for (let i = this.elementStart; i < this.elementSize; ++i) {\n      const element = elements[i];\n      elements[i] = null;\n      const texture = element.texture;\n      const source = texture._source;\n      const adjustedBlendMode = getAdjustedBlendModeBlend(element.blendMode, source);\n      const breakRequired = blendMode !== adjustedBlendMode || topology !== element.topology;\n      if (source._batchTick === BATCH_TICK && !breakRequired) {\n        element._textureId = source._textureBindLocation;\n        size += element.indexSize;\n        if (element.packAsQuad) {\n          this.packQuadAttributes(\n            element,\n            f32,\n            u32,\n            element._attributeStart,\n            element._textureId\n          );\n          this.packQuadIndex(\n            indexBuffer,\n            element._indexStart,\n            element._attributeStart / this.vertexSize\n          );\n        } else {\n          this.packAttributes(\n            element,\n            f32,\n            u32,\n            element._attributeStart,\n            element._textureId\n          );\n          this.packIndex(\n            element,\n            indexBuffer,\n            element._indexStart,\n            element._attributeStart / this.vertexSize\n          );\n        }\n        element._batch = batch;\n        continue;\n      }\n      source._batchTick = BATCH_TICK;\n      if (textureBatch.count >= maxTextures || breakRequired) {\n        this._finishBatch(\n          batch,\n          start,\n          size - start,\n          textureBatch,\n          blendMode,\n          topology,\n          instructionSet,\n          action\n        );\n        action = \"renderBatch\";\n        start = size;\n        blendMode = adjustedBlendMode;\n        topology = element.topology;\n        batch = getBatchFromPool();\n        textureBatch = batch.textures;\n        textureBatch.clear();\n        ++BATCH_TICK;\n      }\n      element._textureId = source._textureBindLocation = textureBatch.count;\n      textureBatch.ids[source.uid] = textureBatch.count;\n      textureBatch.textures[textureBatch.count++] = source;\n      element._batch = batch;\n      size += element.indexSize;\n      if (element.packAsQuad) {\n        this.packQuadAttributes(\n          element,\n          f32,\n          u32,\n          element._attributeStart,\n          element._textureId\n        );\n        this.packQuadIndex(\n          indexBuffer,\n          element._indexStart,\n          element._attributeStart / this.vertexSize\n        );\n      } else {\n        this.packAttributes(\n          element,\n          f32,\n          u32,\n          element._attributeStart,\n          element._textureId\n        );\n        this.packIndex(\n          element,\n          indexBuffer,\n          element._indexStart,\n          element._attributeStart / this.vertexSize\n        );\n      }\n    }\n    if (textureBatch.count > 0) {\n      this._finishBatch(\n        batch,\n        start,\n        size - start,\n        textureBatch,\n        blendMode,\n        topology,\n        instructionSet,\n        action\n      );\n      start = size;\n      ++BATCH_TICK;\n    }\n    this.elementStart = this.elementSize;\n    this._batchIndexStart = start;\n    this._batchIndexSize = size;\n  }\n  _finishBatch(batch, indexStart, indexSize, textureBatch, blendMode, topology, instructionSet, action) {\n    batch.gpuBindGroup = null;\n    batch.bindGroup = null;\n    batch.action = action;\n    batch.batcher = this;\n    batch.textures = textureBatch;\n    batch.blendMode = blendMode;\n    batch.topology = topology;\n    batch.start = indexStart;\n    batch.size = indexSize;\n    ++BATCH_TICK;\n    this.batches[this.batchIndex++] = batch;\n    instructionSet.add(batch);\n  }\n  finish(instructionSet) {\n    this.break(instructionSet);\n  }\n  /**\n   * Resizes the attribute buffer to the given size (1 = 1 float32)\n   * @param size - the size in vertices to ensure (not bytes!)\n   */\n  ensureAttributeBuffer(size) {\n    if (size * 4 <= this.attributeBuffer.size)\n      return;\n    this._resizeAttributeBuffer(size * 4);\n  }\n  /**\n   * Resizes the index buffer to the given size (1 = 1 float32)\n   * @param size - the size in vertices to ensure (not bytes!)\n   */\n  ensureIndexBuffer(size) {\n    if (size <= this.indexBuffer.length)\n      return;\n    this._resizeIndexBuffer(size);\n  }\n  _resizeAttributeBuffer(size) {\n    const newSize = Math.max(size, this.attributeBuffer.size * 2);\n    const newArrayBuffer = new ViewableBuffer(newSize);\n    fastCopy(this.attributeBuffer.rawBinaryData, newArrayBuffer.rawBinaryData);\n    this.attributeBuffer = newArrayBuffer;\n  }\n  _resizeIndexBuffer(size) {\n    const indexBuffer = this.indexBuffer;\n    let newSize = Math.max(size, indexBuffer.length * 1.5);\n    newSize += newSize % 2;\n    const newIndexBuffer = newSize > 65535 ? new Uint32Array(newSize) : new Uint16Array(newSize);\n    if (newIndexBuffer.BYTES_PER_ELEMENT !== indexBuffer.BYTES_PER_ELEMENT) {\n      for (let i = 0; i < indexBuffer.length; i++) {\n        newIndexBuffer[i] = indexBuffer[i];\n      }\n    } else {\n      fastCopy(indexBuffer.buffer, newIndexBuffer.buffer);\n    }\n    this.indexBuffer = newIndexBuffer;\n  }\n  packQuadIndex(indexBuffer, index, indicesOffset) {\n    indexBuffer[index] = indicesOffset + 0;\n    indexBuffer[index + 1] = indicesOffset + 1;\n    indexBuffer[index + 2] = indicesOffset + 2;\n    indexBuffer[index + 3] = indicesOffset + 0;\n    indexBuffer[index + 4] = indicesOffset + 2;\n    indexBuffer[index + 5] = indicesOffset + 3;\n  }\n  packIndex(element, indexBuffer, index, indicesOffset) {\n    const indices = element.indices;\n    const size = element.indexSize;\n    const indexOffset = element.indexOffset;\n    const attributeOffset = element.attributeOffset;\n    for (let i = 0; i < size; i++) {\n      indexBuffer[index++] = indicesOffset + indices[i + indexOffset] - attributeOffset;\n    }\n  }\n  destroy() {\n    for (let i = 0; i < this.batches.length; i++) {\n      returnBatchToPool(this.batches[i]);\n    }\n    this.batches = null;\n    for (let i = 0; i < this._elements.length; i++) {\n      this._elements[i]._batch = null;\n    }\n    this._elements = null;\n    this.indexBuffer = null;\n    this.attributeBuffer.destroy();\n    this.attributeBuffer = null;\n  }\n};\n_Batcher.defaultOptions = {\n  maxTextures: null,\n  attributesInitialSize: 4,\n  indicesInitialSize: 6\n};\nlet Batcher = _Batcher;\n\nexport { Batch, Batcher };\n//# sourceMappingURL=Batcher.mjs.map\n","\"use strict\";\nvar BufferUsage = /* @__PURE__ */ ((BufferUsage2) => {\n  BufferUsage2[BufferUsage2[\"MAP_READ\"] = 1] = \"MAP_READ\";\n  BufferUsage2[BufferUsage2[\"MAP_WRITE\"] = 2] = \"MAP_WRITE\";\n  BufferUsage2[BufferUsage2[\"COPY_SRC\"] = 4] = \"COPY_SRC\";\n  BufferUsage2[BufferUsage2[\"COPY_DST\"] = 8] = \"COPY_DST\";\n  BufferUsage2[BufferUsage2[\"INDEX\"] = 16] = \"INDEX\";\n  BufferUsage2[BufferUsage2[\"VERTEX\"] = 32] = \"VERTEX\";\n  BufferUsage2[BufferUsage2[\"UNIFORM\"] = 64] = \"UNIFORM\";\n  BufferUsage2[BufferUsage2[\"STORAGE\"] = 128] = \"STORAGE\";\n  BufferUsage2[BufferUsage2[\"INDIRECT\"] = 256] = \"INDIRECT\";\n  BufferUsage2[BufferUsage2[\"QUERY_RESOLVE\"] = 512] = \"QUERY_RESOLVE\";\n  BufferUsage2[BufferUsage2[\"STATIC\"] = 1024] = \"STATIC\";\n  return BufferUsage2;\n})(BufferUsage || {});\n\nexport { BufferUsage };\n//# sourceMappingURL=const.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { BufferUsage } from './const.mjs';\n\n\"use strict\";\nclass Buffer extends EventEmitter {\n  /**\n   * Creates a new Buffer with the given options\n   * @param options - the options for the buffer\n   */\n  constructor(options) {\n    let { data, size } = options;\n    const { usage, label, shrinkToFit } = options;\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /**\n     * emits when the underlying buffer data has been updated. letting the renderer know\n     * that it needs to update the buffer on the GPU\n     * @event update\n     */\n    /**\n     * emits when the buffer is destroyed. letting the renderer know that it needs to destroy the buffer on the GPU\n     * @event destroy\n     */\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    this._resourceType = \"buffer\";\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    this._touched = 0;\n    /**\n     * @internal\n     * @ignore\n     */\n    this._updateID = 1;\n    this._dataInt32 = null;\n    /**\n     * should the GPU buffer be shrunk when the data becomes smaller?\n     * changing this will cause the buffer to be destroyed and a new one created on the GPU\n     * this can be expensive, especially if the buffer is already big enough!\n     * setting this to false will prevent the buffer from being shrunk. This will yield better performance\n     * if you are constantly setting data that is changing size often.\n     * @default true\n     */\n    this.shrinkToFit = true;\n    /**\n     * Has the buffer been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    if (data instanceof Array) {\n      data = new Float32Array(data);\n    }\n    this._data = data;\n    size ?? (size = data?.byteLength);\n    const mappedAtCreation = !!data;\n    this.descriptor = {\n      size,\n      usage,\n      mappedAtCreation,\n      label\n    };\n    this.shrinkToFit = shrinkToFit ?? true;\n  }\n  /** the data in the buffer */\n  get data() {\n    return this._data;\n  }\n  set data(value) {\n    this.setDataWithSize(value, value.length, true);\n  }\n  get dataInt32() {\n    if (!this._dataInt32) {\n      this._dataInt32 = new Int32Array(this.data.buffer);\n    }\n    return this._dataInt32;\n  }\n  /** whether the buffer is static or not */\n  get static() {\n    return !!(this.descriptor.usage & BufferUsage.STATIC);\n  }\n  set static(value) {\n    if (value) {\n      this.descriptor.usage |= BufferUsage.STATIC;\n    } else {\n      this.descriptor.usage &= ~BufferUsage.STATIC;\n    }\n  }\n  /**\n   * Sets the data in the buffer to the given value. This will immediately update the buffer on the GPU.\n   * If you only want to update a subset of the buffer, you can pass in the size of the data.\n   * @param value - the data to set\n   * @param size - the size of the data in bytes\n   * @param syncGPU - should the buffer be updated on the GPU immediately?\n   */\n  setDataWithSize(value, size, syncGPU) {\n    this._updateID++;\n    this._updateSize = size * value.BYTES_PER_ELEMENT;\n    if (this._data === value) {\n      if (syncGPU)\n        this.emit(\"update\", this);\n      return;\n    }\n    const oldData = this._data;\n    this._data = value;\n    this._dataInt32 = null;\n    if (!oldData || oldData.length !== value.length) {\n      if (!this.shrinkToFit && oldData && value.byteLength < oldData.byteLength) {\n        if (syncGPU)\n          this.emit(\"update\", this);\n      } else {\n        this.descriptor.size = value.byteLength;\n        this._resourceId = uid(\"resource\");\n        this.emit(\"change\", this);\n      }\n      return;\n    }\n    if (syncGPU)\n      this.emit(\"update\", this);\n  }\n  /**\n   * updates the buffer on the GPU to reflect the data in the buffer.\n   * By default it will update the entire buffer. If you only want to update a subset of the buffer,\n   * you can pass in the size of the buffer to update.\n   * @param sizeInBytes - the new size of the buffer in bytes\n   */\n  update(sizeInBytes) {\n    this._updateSize = sizeInBytes ?? this._updateSize;\n    this._updateID++;\n    this.emit(\"update\", this);\n  }\n  /** Destroys the buffer */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.emit(\"change\", this);\n    this._data = null;\n    this.descriptor = null;\n    this.removeAllListeners();\n  }\n}\n\nexport { Buffer };\n//# sourceMappingURL=Buffer.mjs.map\n","import { Buffer } from '../../buffer/Buffer.mjs';\nimport { BufferUsage } from '../../buffer/const.mjs';\n\n\"use strict\";\nfunction ensureIsBuffer(buffer, index) {\n  if (!(buffer instanceof Buffer)) {\n    let usage = index ? BufferUsage.INDEX : BufferUsage.VERTEX;\n    if (buffer instanceof Array) {\n      if (index) {\n        buffer = new Uint32Array(buffer);\n        usage = BufferUsage.INDEX | BufferUsage.COPY_DST;\n      } else {\n        buffer = new Float32Array(buffer);\n        usage = BufferUsage.VERTEX | BufferUsage.COPY_DST;\n      }\n    }\n    buffer = new Buffer({\n      data: buffer,\n      label: index ? \"index-mesh-buffer\" : \"vertex-mesh-buffer\",\n      usage\n    });\n  }\n  return buffer;\n}\n\nexport { ensureIsBuffer };\n//# sourceMappingURL=ensureIsBuffer.mjs.map\n","\"use strict\";\nfunction getGeometryBounds(geometry, attributeId, bounds) {\n  const attribute = geometry.getAttribute(attributeId);\n  if (!attribute) {\n    bounds.minX = 0;\n    bounds.minY = 0;\n    bounds.maxX = 0;\n    bounds.maxY = 0;\n    return bounds;\n  }\n  const data = attribute.buffer.data;\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  const byteSize = data.BYTES_PER_ELEMENT;\n  const offset = (attribute.offset || 0) / byteSize;\n  const stride = (attribute.stride || 2 * 4) / byteSize;\n  for (let i = offset; i < data.length; i += stride) {\n    const x = data[i];\n    const y = data[i + 1];\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n  }\n  bounds.minX = minX;\n  bounds.minY = minY;\n  bounds.maxX = maxX;\n  bounds.maxY = maxY;\n  return bounds;\n}\n\nexport { getGeometryBounds };\n//# sourceMappingURL=getGeometryBounds.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { ensureIsBuffer } from './utils/ensureIsBuffer.mjs';\nimport { getGeometryBounds } from './utils/getGeometryBounds.mjs';\n\n\"use strict\";\nfunction ensureIsAttribute(attribute) {\n  if (attribute instanceof Buffer || Array.isArray(attribute) || attribute.BYTES_PER_ELEMENT) {\n    attribute = {\n      buffer: attribute\n    };\n  }\n  attribute.buffer = ensureIsBuffer(attribute.buffer, false);\n  return attribute;\n}\nclass Geometry extends EventEmitter {\n  /**\n   * Create a new instance of a geometry\n   * @param options - The options for the geometry.\n   */\n  constructor(options = {}) {\n    super();\n    /** The unique id of the geometry. */\n    this.uid = uid(\"geometry\");\n    /**\n     * the layout key will be generated by WebGPU all geometries that have the same structure\n     * will have the same layout key. This is used to cache the pipeline layout\n     * @internal\n     * @ignore\n     */\n    this._layoutKey = 0;\n    /** the instance count of the geometry to draw */\n    this.instanceCount = 1;\n    this._bounds = new Bounds();\n    this._boundsDirty = true;\n    const { attributes, indexBuffer, topology } = options;\n    this.buffers = [];\n    this.attributes = {};\n    if (attributes) {\n      for (const i in attributes) {\n        this.addAttribute(i, attributes[i]);\n      }\n    }\n    this.instanceCount = options.instanceCount ?? 1;\n    if (indexBuffer) {\n      this.addIndex(indexBuffer);\n    }\n    this.topology = topology || \"triangle-list\";\n  }\n  onBufferUpdate() {\n    this._boundsDirty = true;\n    this.emit(\"update\", this);\n  }\n  /**\n   * Returns the requested attribute.\n   * @param id - The name of the attribute required\n   * @returns - The attribute requested.\n   */\n  getAttribute(id) {\n    return this.attributes[id];\n  }\n  /**\n   * Returns the index buffer\n   * @returns - The index buffer.\n   */\n  getIndex() {\n    return this.indexBuffer;\n  }\n  /**\n   * Returns the requested buffer.\n   * @param id - The name of the buffer required.\n   * @returns - The buffer requested.\n   */\n  getBuffer(id) {\n    return this.getAttribute(id).buffer;\n  }\n  /**\n   * Used to figure out how many vertices there are in this geometry\n   * @returns the number of vertices in the geometry\n   */\n  getSize() {\n    for (const i in this.attributes) {\n      const attribute = this.attributes[i];\n      const buffer = attribute.buffer;\n      return buffer.data.length / (attribute.stride / 4 || attribute.size);\n    }\n    return 0;\n  }\n  /**\n   * Adds an attribute to the geometry.\n   * @param name - The name of the attribute to add.\n   * @param attributeOption - The attribute option to add.\n   */\n  addAttribute(name, attributeOption) {\n    const attribute = ensureIsAttribute(attributeOption);\n    const bufferIndex = this.buffers.indexOf(attribute.buffer);\n    if (bufferIndex === -1) {\n      this.buffers.push(attribute.buffer);\n      attribute.buffer.on(\"update\", this.onBufferUpdate, this);\n      attribute.buffer.on(\"change\", this.onBufferUpdate, this);\n    }\n    this.attributes[name] = attribute;\n  }\n  /**\n   * Adds an index buffer to the geometry.\n   * @param indexBuffer - The index buffer to add. Can be a Buffer, TypedArray, or an array of numbers.\n   */\n  addIndex(indexBuffer) {\n    this.indexBuffer = ensureIsBuffer(indexBuffer, true);\n    this.buffers.push(this.indexBuffer);\n  }\n  /** Returns the bounds of the geometry. */\n  get bounds() {\n    if (!this._boundsDirty)\n      return this._bounds;\n    this._boundsDirty = false;\n    return getGeometryBounds(this, \"aPosition\", this._bounds);\n  }\n  /**\n   * destroys the geometry.\n   * @param destroyBuffers - destroy the buffers associated with this geometry\n   */\n  destroy(destroyBuffers = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    if (destroyBuffers) {\n      this.buffers.forEach((buffer) => buffer.destroy());\n    }\n    this.attributes = null;\n    this.buffers = null;\n    this.indexBuffer = null;\n    this._bounds = null;\n  }\n}\n\nexport { Geometry };\n//# sourceMappingURL=Geometry.mjs.map\n","import { Buffer } from '../../renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../renderers/shared/geometry/Geometry.mjs';\n\n\"use strict\";\nconst placeHolderBufferData = new Float32Array(1);\nconst placeHolderIndexData = new Uint32Array(1);\nclass BatchGeometry extends Geometry {\n  constructor() {\n    const vertexSize = 6;\n    const attributeBuffer = new Buffer({\n      data: placeHolderBufferData,\n      label: \"attribute-batch-buffer\",\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n      shrinkToFit: false\n    });\n    const indexBuffer = new Buffer({\n      data: placeHolderIndexData,\n      label: \"index-batch-buffer\",\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n      // | BufferUsage.STATIC,\n      shrinkToFit: false\n    });\n    const stride = vertexSize * 4;\n    super({\n      attributes: {\n        aPosition: {\n          buffer: attributeBuffer,\n          format: \"float32x2\",\n          stride,\n          offset: 0\n        },\n        aUV: {\n          buffer: attributeBuffer,\n          format: \"float32x2\",\n          stride,\n          offset: 2 * 4\n        },\n        aColor: {\n          buffer: attributeBuffer,\n          format: \"unorm8x4\",\n          stride,\n          offset: 4 * 4\n        },\n        aTextureIdAndRound: {\n          buffer: attributeBuffer,\n          format: \"uint16x2\",\n          stride,\n          offset: 5 * 4\n        }\n      },\n      indexBuffer\n    });\n  }\n}\n\nexport { BatchGeometry };\n//# sourceMappingURL=BatchGeometry.mjs.map\n","import { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nfunction addBits(srcParts, parts, name) {\n  if (srcParts) {\n    for (const i in srcParts) {\n      const id = i.toLocaleLowerCase();\n      const part = parts[id];\n      if (part) {\n        let sanitisedPart = srcParts[i];\n        if (i === \"header\") {\n          sanitisedPart = sanitisedPart.replace(/@in\\s+[^;]+;\\s*/g, \"\").replace(/@out\\s+[^;]+;\\s*/g, \"\");\n        }\n        if (name) {\n          part.push(`//----${name}----//`);\n        }\n        part.push(sanitisedPart);\n      } else {\n        warn(`${i} placement hook does not exist in shader`);\n      }\n    }\n  }\n}\n\nexport { addBits };\n//# sourceMappingURL=addBits.mjs.map\n","\"use strict\";\nconst findHooksRx = /\\{\\{(.*?)\\}\\}/g;\nfunction compileHooks(programSrc) {\n  const parts = {};\n  const partMatches = programSrc.match(findHooksRx)?.map((hook) => hook.replace(/[{()}]/g, \"\")) ?? [];\n  partMatches.forEach((hook) => {\n    parts[hook] = [];\n  });\n  return parts;\n}\n\nexport { compileHooks, findHooksRx };\n//# sourceMappingURL=compileHooks.mjs.map\n","\"use strict\";\nfunction extractInputs(fragmentSource, out) {\n  let match;\n  const regex = /@in\\s+([^;]+);/g;\n  while ((match = regex.exec(fragmentSource)) !== null) {\n    out.push(match[1]);\n  }\n}\nfunction compileInputs(fragments, template, sort = false) {\n  const results = [];\n  extractInputs(template, results);\n  fragments.forEach((fragment) => {\n    if (fragment.header) {\n      extractInputs(fragment.header, results);\n    }\n  });\n  const mainInput = results;\n  if (sort) {\n    mainInput.sort();\n  }\n  const finalString = mainInput.map((inValue, i) => `       @location(${i}) ${inValue},`).join(\"\\n\");\n  let cleanedString = template.replace(/@in\\s+[^;]+;\\s*/g, \"\");\n  cleanedString = cleanedString.replace(\"{{in}}\", `\n${finalString}\n`);\n  return cleanedString;\n}\n\nexport { compileInputs };\n//# sourceMappingURL=compileInputs.mjs.map\n","\"use strict\";\nfunction extractOutputs(fragmentSource, out) {\n  let match;\n  const regex = /@out\\s+([^;]+);/g;\n  while ((match = regex.exec(fragmentSource)) !== null) {\n    out.push(match[1]);\n  }\n}\nfunction extractVariableName(value) {\n  const regex = /\\b(\\w+)\\s*:/g;\n  const match = regex.exec(value);\n  return match ? match[1] : \"\";\n}\nfunction stripVariable(value) {\n  const regex = /@.*?\\s+/g;\n  return value.replace(regex, \"\");\n}\nfunction compileOutputs(fragments, template) {\n  const results = [];\n  extractOutputs(template, results);\n  fragments.forEach((fragment) => {\n    if (fragment.header) {\n      extractOutputs(fragment.header, results);\n    }\n  });\n  let index = 0;\n  const mainStruct = results.sort().map((inValue) => {\n    if (inValue.indexOf(\"builtin\") > -1) {\n      return inValue;\n    }\n    return `@location(${index++}) ${inValue}`;\n  }).join(\",\\n\");\n  const mainStart = results.sort().map((inValue) => `       var ${stripVariable(inValue)};`).join(\"\\n\");\n  const mainEnd = `return VSOutput(\n            ${results.sort().map((inValue) => ` ${extractVariableName(inValue)}`).join(\",\\n\")});`;\n  let compiledCode = template.replace(/@out\\s+[^;]+;\\s*/g, \"\");\n  compiledCode = compiledCode.replace(\"{{struct}}\", `\n${mainStruct}\n`);\n  compiledCode = compiledCode.replace(\"{{start}}\", `\n${mainStart}\n`);\n  compiledCode = compiledCode.replace(\"{{return}}\", `\n${mainEnd}\n`);\n  return compiledCode;\n}\n\nexport { compileOutputs };\n//# sourceMappingURL=compileOutputs.mjs.map\n","\"use strict\";\nfunction injectBits(templateSrc, fragmentParts) {\n  let out = templateSrc;\n  for (const i in fragmentParts) {\n    const parts = fragmentParts[i];\n    const toInject = parts.join(\"\\n\");\n    if (toInject.length) {\n      out = out.replace(`{{${i}}}`, `//-----${i} START-----//\n${parts.join(\"\\n\")}\n//----${i} FINISH----//`);\n    } else {\n      out = out.replace(`{{${i}}}`, \"\");\n    }\n  }\n  return out;\n}\n\nexport { injectBits };\n//# sourceMappingURL=injectBits.mjs.map\n","import { addBits } from './utils/addBits.mjs';\nimport { compileHooks } from './utils/compileHooks.mjs';\nimport { compileInputs } from './utils/compileInputs.mjs';\nimport { compileOutputs } from './utils/compileOutputs.mjs';\nimport { injectBits } from './utils/injectBits.mjs';\n\n\"use strict\";\nconst cacheMap = /* @__PURE__ */ Object.create(null);\nconst bitCacheMap = /* @__PURE__ */ new Map();\nlet CACHE_UID = 0;\nfunction compileHighShader({\n  template,\n  bits\n}) {\n  const cacheId = generateCacheId(template, bits);\n  if (cacheMap[cacheId])\n    return cacheMap[cacheId];\n  const { vertex, fragment } = compileInputsAndOutputs(template, bits);\n  cacheMap[cacheId] = compileBits(vertex, fragment, bits);\n  return cacheMap[cacheId];\n}\nfunction compileHighShaderGl({\n  template,\n  bits\n}) {\n  const cacheId = generateCacheId(template, bits);\n  if (cacheMap[cacheId])\n    return cacheMap[cacheId];\n  cacheMap[cacheId] = compileBits(template.vertex, template.fragment, bits);\n  return cacheMap[cacheId];\n}\nfunction compileInputsAndOutputs(template, bits) {\n  const vertexFragments = bits.map((shaderBit) => shaderBit.vertex).filter((v) => !!v);\n  const fragmentFragments = bits.map((shaderBit) => shaderBit.fragment).filter((v) => !!v);\n  let compiledVertex = compileInputs(vertexFragments, template.vertex, true);\n  compiledVertex = compileOutputs(vertexFragments, compiledVertex);\n  const compiledFragment = compileInputs(fragmentFragments, template.fragment, true);\n  return {\n    vertex: compiledVertex,\n    fragment: compiledFragment\n  };\n}\nfunction generateCacheId(template, bits) {\n  return bits.map((highFragment) => {\n    if (!bitCacheMap.has(highFragment)) {\n      bitCacheMap.set(highFragment, CACHE_UID++);\n    }\n    return bitCacheMap.get(highFragment);\n  }).sort((a, b) => a - b).join(\"-\") + template.vertex + template.fragment;\n}\nfunction compileBits(vertex, fragment, bits) {\n  const vertexParts = compileHooks(vertex);\n  const fragmentParts = compileHooks(fragment);\n  bits.forEach((shaderBit) => {\n    addBits(shaderBit.vertex, vertexParts, shaderBit.name);\n    addBits(shaderBit.fragment, fragmentParts, shaderBit.name);\n  });\n  return {\n    vertex: injectBits(vertex, vertexParts),\n    fragment: injectBits(fragment, fragmentParts)\n  };\n}\n\nexport { compileHighShader, compileHighShaderGl };\n//# sourceMappingURL=compileHighShader.mjs.map\n","\"use strict\";\nconst vertexGPUTemplate = (\n  /* wgsl */\n  `\n    @in aPosition: vec2<f32>;\n    @in aUV: vec2<f32>;\n\n    @out @builtin(position) vPosition: vec4<f32>;\n    @out vUV : vec2<f32>;\n    @out vColor : vec4<f32>;\n\n    {{header}}\n\n    struct VSOutput {\n        {{struct}}\n    };\n\n    @vertex\n    fn main( {{in}} ) -> VSOutput {\n\n        var worldTransformMatrix = globalUniforms.uWorldTransformMatrix;\n        var modelMatrix = mat3x3<f32>(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        var position = aPosition;\n        var uv = aUV;\n\n        {{start}}\n        \n        vColor = vec4<f32>(1., 1., 1., 1.);\n\n        {{main}}\n\n        vUV = uv;\n\n        var modelViewProjectionMatrix = globalUniforms.uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        vPosition =  vec4<f32>((modelViewProjectionMatrix *  vec3<f32>(position, 1.0)).xy, 0.0, 1.0);\n       \n        vColor *= globalUniforms.uWorldColorAlpha;\n\n        {{end}}\n\n        {{return}}\n    };\n`\n);\nconst fragmentGPUTemplate = (\n  /* wgsl */\n  `\n    @in vUV : vec2<f32>;\n    @in vColor : vec4<f32>;\n   \n    {{header}}\n\n    @fragment\n    fn main(\n        {{in}}\n      ) -> @location(0) vec4<f32> {\n        \n        {{start}}\n\n        var outColor:vec4<f32>;\n      \n        {{main}}\n        \n        var finalColor:vec4<f32> = outColor * vColor;\n\n        {{end}}\n\n        return finalColor;\n      };\n`\n);\nconst vertexGlTemplate = (\n  /* glsl */\n  `\n    in vec2 aPosition;\n    in vec2 aUV;\n\n    out vec4 vColor;\n    out vec2 vUV;\n\n    {{header}}\n\n    void main(void){\n\n        mat3 worldTransformMatrix = uWorldTransformMatrix;\n        mat3 modelMatrix = mat3(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        vec2 position = aPosition;\n        vec2 uv = aUV;\n        \n        {{start}}\n        \n        vColor = vec4(1.);\n        \n        {{main}}\n        \n        vUV = uv;\n        \n        mat3 modelViewProjectionMatrix = uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        gl_Position = vec4((modelViewProjectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n\n        vColor *= uWorldColorAlpha;\n\n        {{end}}\n    }\n`\n);\nconst fragmentGlTemplate = (\n  /* glsl */\n  `\n   \n    in vec4 vColor;\n    in vec2 vUV;\n\n    out vec4 finalColor;\n\n    {{header}}\n\n    void main(void) {\n        \n        {{start}}\n\n        vec4 outColor;\n      \n        {{main}}\n        \n        finalColor = outColor * vColor;\n        \n        {{end}}\n    }\n`\n);\n\nexport { fragmentGPUTemplate, fragmentGlTemplate, vertexGPUTemplate, vertexGlTemplate };\n//# sourceMappingURL=defaultProgramTemplate.mjs.map\n","\"use strict\";\nconst globalUniformsBit = {\n  name: \"global-uniforms-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n        struct GlobalUniforms {\n            uProjectionMatrix:mat3x3<f32>,\n            uWorldTransformMatrix:mat3x3<f32>,\n            uWorldColorAlpha: vec4<f32>,\n            uResolution: vec2<f32>,\n        }\n\n        @group(0) @binding(0) var<uniform> globalUniforms : GlobalUniforms;\n        `\n    )\n  }\n};\nconst globalUniformsUBOBitGl = {\n  name: \"global-uniforms-ubo-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n          uniform globalUniforms {\n            mat3 uProjectionMatrix;\n            mat3 uWorldTransformMatrix;\n            vec4 uWorldColorAlpha;\n            vec2 uResolution;\n          };\n        `\n    )\n  }\n};\nconst globalUniformsBitGl = {\n  name: \"global-uniforms-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n          uniform mat3 uProjectionMatrix;\n          uniform mat3 uWorldTransformMatrix;\n          uniform vec4 uWorldColorAlpha;\n          uniform vec2 uResolution;\n        `\n    )\n  }\n};\n\nexport { globalUniformsBit, globalUniformsBitGl, globalUniformsUBOBitGl };\n//# sourceMappingURL=globalUniformsBit.mjs.map\n","import { GlProgram } from '../renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../renderers/gpu/shader/GpuProgram.mjs';\nimport { compileHighShader, compileHighShaderGl } from './compiler/compileHighShader.mjs';\nimport { fragmentGPUTemplate, vertexGPUTemplate, vertexGlTemplate, fragmentGlTemplate } from './defaultProgramTemplate.mjs';\nimport { globalUniformsBit, globalUniformsBitGl } from './shader-bits/globalUniformsBit.mjs';\n\n\"use strict\";\nfunction compileHighShaderGpuProgram({ bits, name }) {\n  const source = compileHighShader({\n    template: {\n      fragment: fragmentGPUTemplate,\n      vertex: vertexGPUTemplate\n    },\n    bits: [\n      globalUniformsBit,\n      ...bits\n    ]\n  });\n  return GpuProgram.from({\n    name,\n    vertex: {\n      source: source.vertex,\n      entryPoint: \"main\"\n    },\n    fragment: {\n      source: source.fragment,\n      entryPoint: \"main\"\n    }\n  });\n}\nfunction compileHighShaderGlProgram({ bits, name }) {\n  return new GlProgram({\n    name,\n    ...compileHighShaderGl({\n      template: {\n        vertex: vertexGlTemplate,\n        fragment: fragmentGlTemplate\n      },\n      bits: [\n        globalUniformsBitGl,\n        ...bits\n      ]\n    })\n  });\n}\n\nexport { compileHighShaderGlProgram, compileHighShaderGpuProgram };\n//# sourceMappingURL=compileHighShaderToProgram.mjs.map\n","\"use strict\";\nconst colorBit = {\n  name: \"color-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            @in aColor: vec4<f32>;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= vec4<f32>(aColor.rgb * aColor.a, aColor.a);\n        `\n    )\n  }\n};\nconst colorBitGl = {\n  name: \"color-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            in vec4 aColor;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= vec4(aColor.rgb * aColor.a, aColor.a);\n        `\n    )\n  }\n};\n\nexport { colorBit, colorBitGl };\n//# sourceMappingURL=colorBit.mjs.map\n","\"use strict\";\nconst textureBatchBitGpuCache = {};\nfunction generateBindingSrc(maxTextures) {\n  const src = [];\n  if (maxTextures === 1) {\n    src.push(\"@group(1) @binding(0) var textureSource1: texture_2d<f32>;\");\n    src.push(\"@group(1) @binding(1) var textureSampler1: sampler;\");\n  } else {\n    let bindingIndex = 0;\n    for (let i = 0; i < maxTextures; i++) {\n      src.push(`@group(1) @binding(${bindingIndex++}) var textureSource${i + 1}: texture_2d<f32>;`);\n      src.push(`@group(1) @binding(${bindingIndex++}) var textureSampler${i + 1}: sampler;`);\n    }\n  }\n  return src.join(\"\\n\");\n}\nfunction generateSampleSrc(maxTextures) {\n  const src = [];\n  if (maxTextures === 1) {\n    src.push(\"outColor = textureSampleGrad(textureSource1, textureSampler1, vUV, uvDx, uvDy);\");\n  } else {\n    src.push(\"switch vTextureId {\");\n    for (let i = 0; i < maxTextures; i++) {\n      if (i === maxTextures - 1) {\n        src.push(`  default:{`);\n      } else {\n        src.push(`  case ${i}:{`);\n      }\n      src.push(`      outColor = textureSampleGrad(textureSource${i + 1}, textureSampler${i + 1}, vUV, uvDx, uvDy);`);\n      src.push(`      break;}`);\n    }\n    src.push(`}`);\n  }\n  return src.join(\"\\n\");\n}\nfunction generateTextureBatchBit(maxTextures) {\n  if (!textureBatchBitGpuCache[maxTextures]) {\n    textureBatchBitGpuCache[maxTextures] = {\n      name: \"texture-batch-bit\",\n      vertex: {\n        header: `\n                @in aTextureIdAndRound: vec2<u32>;\n                @out @interpolate(flat) vTextureId : u32;\n            `,\n        main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n        end: `\n                if(aTextureIdAndRound.x == 1)\n                {\n                    vPosition = vec4<f32>(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n                }\n            `\n      },\n      fragment: {\n        header: `\n                @in @interpolate(flat) vTextureId: u32;\n\n                ${generateBindingSrc(maxTextures)}\n            `,\n        main: `\n                var uvDx = dpdx(vUV);\n                var uvDy = dpdy(vUV);\n\n                ${generateSampleSrc(maxTextures)}\n            `\n      }\n    };\n  }\n  return textureBatchBitGpuCache[maxTextures];\n}\nconst textureBatchBitGlCache = {};\nfunction generateSampleGlSrc(maxTextures) {\n  const src = [];\n  for (let i = 0; i < maxTextures; i++) {\n    if (i > 0) {\n      src.push(\"else\");\n    }\n    if (i < maxTextures - 1) {\n      src.push(`if(vTextureId < ${i}.5)`);\n    }\n    src.push(\"{\");\n    src.push(`\toutColor = texture(uTextures[${i}], vUV);`);\n    src.push(\"}\");\n  }\n  return src.join(\"\\n\");\n}\nfunction generateTextureBatchBitGl(maxTextures) {\n  if (!textureBatchBitGlCache[maxTextures]) {\n    textureBatchBitGlCache[maxTextures] = {\n      name: \"texture-batch-bit\",\n      vertex: {\n        header: `\n                in vec2 aTextureIdAndRound;\n                out float vTextureId;\n\n            `,\n        main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n        end: `\n                if(aTextureIdAndRound.x == 1.)\n                {\n                    gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n                }\n            `\n      },\n      fragment: {\n        header: `\n                in float vTextureId;\n\n                uniform sampler2D uTextures[${maxTextures}];\n\n            `,\n        main: `\n\n                ${generateSampleGlSrc(maxTextures)}\n            `\n      }\n    };\n  }\n  return textureBatchBitGlCache[maxTextures];\n}\n\nexport { generateTextureBatchBit, generateTextureBatchBitGl };\n//# sourceMappingURL=generateTextureBatchBit.mjs.map\n","\"use strict\";\nconst roundPixelsBit = {\n  name: \"round-pixels-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            fn roundPixels(position: vec2<f32>, targetSize: vec2<f32>) -> vec2<f32> \n            {\n                return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n            }\n        `\n    )\n  }\n};\nconst roundPixelsBitGl = {\n  name: \"round-pixels-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `   \n            vec2 roundPixels(vec2 position, vec2 targetSize)\n            {       \n                return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n            }\n        `\n    )\n  }\n};\n\nexport { roundPixelsBit, roundPixelsBitGl };\n//# sourceMappingURL=roundPixelsBit.mjs.map\n","import { UniformGroup } from '../../shared/shader/UniformGroup.mjs';\n\n\"use strict\";\nconst batchSamplersUniformGroupHash = {};\nfunction getBatchSamplersUniformGroup(maxTextures) {\n  let batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures];\n  if (batchSamplersUniformGroup)\n    return batchSamplersUniformGroup;\n  const sampleValues = new Int32Array(maxTextures);\n  for (let i = 0; i < maxTextures; i++) {\n    sampleValues[i] = i;\n  }\n  batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures] = new UniformGroup({\n    uTextures: { value: sampleValues, type: `i32`, size: maxTextures }\n  }, { isStatic: true });\n  return batchSamplersUniformGroup;\n}\n\nexport { getBatchSamplersUniformGroup };\n//# sourceMappingURL=getBatchSamplersUniformGroup.mjs.map\n","import { compileHighShaderGlProgram, compileHighShaderGpuProgram } from '../../high-shader/compileHighShaderToProgram.mjs';\nimport { colorBitGl, colorBit } from '../../high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBitGl, generateTextureBatchBit } from '../../high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBitGl, roundPixelsBit } from '../../high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../renderers/shared/shader/Shader.mjs';\n\n\"use strict\";\nclass DefaultShader extends Shader {\n  constructor(maxTextures) {\n    const glProgram = compileHighShaderGlProgram({\n      name: \"batch\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        roundPixelsBitGl\n      ]\n    });\n    const gpuProgram = compileHighShaderGpuProgram({\n      name: \"batch\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        roundPixelsBit\n      ]\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { DefaultShader };\n//# sourceMappingURL=DefaultShader.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Batcher } from './Batcher.mjs';\nimport { BatchGeometry } from './BatchGeometry.mjs';\nimport { DefaultShader } from './DefaultShader.mjs';\n\n\"use strict\";\nlet defaultShader = null;\nconst _DefaultBatcher = class _DefaultBatcher extends Batcher {\n  constructor() {\n    super(...arguments);\n    this.geometry = new BatchGeometry();\n    this.shader = defaultShader || (defaultShader = new DefaultShader(this.maxTextures));\n    this.name = _DefaultBatcher.extension.name;\n    /** The size of one attribute. 1 = 32 bit. x, y, u, v, color, textureIdAndRound -> total = 6 */\n    this.vertexSize = 6;\n  }\n  /**\n   * Packs the attributes of a DefaultBatchableMeshElement into the provided views.\n   * @param element - The DefaultBatchableMeshElement to pack.\n   * @param float32View - The Float32Array view to pack into.\n   * @param uint32View - The Uint32Array view to pack into.\n   * @param index - The starting index in the views.\n   * @param textureId - The texture ID to use.\n   */\n  packAttributes(element, float32View, uint32View, index, textureId) {\n    const textureIdAndRound = textureId << 16 | element.roundPixels & 65535;\n    const wt = element.transform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const { positions, uvs } = element;\n    const argb = element.color;\n    const offset = element.attributeOffset;\n    const end = offset + element.attributeSize;\n    for (let i = offset; i < end; i++) {\n      const i2 = i * 2;\n      const x = positions[i2];\n      const y = positions[i2 + 1];\n      float32View[index++] = a * x + c * y + tx;\n      float32View[index++] = d * y + b * x + ty;\n      float32View[index++] = uvs[i2];\n      float32View[index++] = uvs[i2 + 1];\n      uint32View[index++] = argb;\n      uint32View[index++] = textureIdAndRound;\n    }\n  }\n  /**\n   * Packs the attributes of a DefaultBatchableQuadElement into the provided views.\n   * @param element - The DefaultBatchableQuadElement to pack.\n   * @param float32View - The Float32Array view to pack into.\n   * @param uint32View - The Uint32Array view to pack into.\n   * @param index - The starting index in the views.\n   * @param textureId - The texture ID to use.\n   */\n  packQuadAttributes(element, float32View, uint32View, index, textureId) {\n    const texture = element.texture;\n    const wt = element.transform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const bounds = element.bounds;\n    const w0 = bounds.maxX;\n    const w1 = bounds.minX;\n    const h0 = bounds.maxY;\n    const h1 = bounds.minY;\n    const uvs = texture.uvs;\n    const argb = element.color;\n    const textureIdAndRound = textureId << 16 | element.roundPixels & 65535;\n    float32View[index + 0] = a * w1 + c * h1 + tx;\n    float32View[index + 1] = d * h1 + b * w1 + ty;\n    float32View[index + 2] = uvs.x0;\n    float32View[index + 3] = uvs.y0;\n    uint32View[index + 4] = argb;\n    uint32View[index + 5] = textureIdAndRound;\n    float32View[index + 6] = a * w0 + c * h1 + tx;\n    float32View[index + 7] = d * h1 + b * w0 + ty;\n    float32View[index + 8] = uvs.x1;\n    float32View[index + 9] = uvs.y1;\n    uint32View[index + 10] = argb;\n    uint32View[index + 11] = textureIdAndRound;\n    float32View[index + 12] = a * w0 + c * h0 + tx;\n    float32View[index + 13] = d * h0 + b * w0 + ty;\n    float32View[index + 14] = uvs.x2;\n    float32View[index + 15] = uvs.y2;\n    uint32View[index + 16] = argb;\n    uint32View[index + 17] = textureIdAndRound;\n    float32View[index + 18] = a * w1 + c * h0 + tx;\n    float32View[index + 19] = d * h0 + b * w1 + ty;\n    float32View[index + 20] = uvs.x3;\n    float32View[index + 21] = uvs.y3;\n    uint32View[index + 22] = argb;\n    uint32View[index + 23] = textureIdAndRound;\n  }\n};\n/** @ignore */\n_DefaultBatcher.extension = {\n  type: [\n    ExtensionType.Batcher\n  ],\n  name: \"default\"\n};\nlet DefaultBatcher = _DefaultBatcher;\n\nexport { DefaultBatcher };\n//# sourceMappingURL=DefaultBatcher.mjs.map\n","\"use strict\";\nfunction buildUvs(vertices, verticesStride, verticesOffset, uvs, uvsOffset, uvsStride, size, matrix = null) {\n  let index = 0;\n  verticesOffset *= verticesStride;\n  uvsOffset *= uvsStride;\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  while (index < size) {\n    const x = vertices[verticesOffset];\n    const y = vertices[verticesOffset + 1];\n    uvs[uvsOffset] = a * x + c * y + tx;\n    uvs[uvsOffset + 1] = b * x + d * y + ty;\n    uvsOffset += uvsStride;\n    verticesOffset += verticesStride;\n    index++;\n  }\n}\nfunction buildSimpleUvs(uvs, uvsOffset, uvsStride, size) {\n  let index = 0;\n  uvsOffset *= uvsStride;\n  while (index < size) {\n    uvs[uvsOffset] = 0;\n    uvs[uvsOffset + 1] = 0;\n    uvsOffset += uvsStride;\n    index++;\n  }\n}\n\nexport { buildSimpleUvs, buildUvs };\n//# sourceMappingURL=buildUvs.mjs.map\n","\"use strict\";\nfunction transformVertices(vertices, m, offset, stride, size) {\n  const a = m.a;\n  const b = m.b;\n  const c = m.c;\n  const d = m.d;\n  const tx = m.tx;\n  const ty = m.ty;\n  offset || (offset = 0);\n  stride || (stride = 2);\n  size || (size = vertices.length / stride - offset);\n  let index = offset * stride;\n  for (let i = 0; i < size; i++) {\n    const x = vertices[index];\n    const y = vertices[index + 1];\n    vertices[index] = a * x + c * y + tx;\n    vertices[index + 1] = b * x + d * y + ty;\n    index += stride;\n  }\n}\n\nexport { transformVertices };\n//# sourceMappingURL=transformVertices.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { multiplyHexColors } from '../../container/utils/multiplyHexColors.mjs';\n\n\"use strict\";\nconst identityMatrix = new Matrix();\nclass BatchableGraphics {\n  constructor() {\n    this.packAsQuad = false;\n    this.batcherName = \"default\";\n    this.topology = \"triangle-list\";\n    this.applyTransform = true;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n  }\n  get uvs() {\n    return this.geometryData.uvs;\n  }\n  get positions() {\n    return this.geometryData.vertices;\n  }\n  get indices() {\n    return this.geometryData.indices;\n  }\n  get blendMode() {\n    if (this.applyTransform) {\n      return this.renderable.groupBlendMode;\n    }\n    return \"normal\";\n  }\n  get color() {\n    const rgb = this.baseColor;\n    const bgr = rgb >> 16 | rgb & 65280 | (rgb & 255) << 16;\n    const renderable = this.renderable;\n    if (renderable) {\n      return multiplyHexColors(bgr, renderable.groupColor) + (this.alpha * renderable.groupAlpha * 255 << 24);\n    }\n    return bgr + (this.alpha * 255 << 24);\n  }\n  get transform() {\n    return this.renderable?.groupTransform || identityMatrix;\n  }\n  copyTo(gpuBuffer) {\n    gpuBuffer.indexOffset = this.indexOffset;\n    gpuBuffer.indexSize = this.indexSize;\n    gpuBuffer.attributeOffset = this.attributeOffset;\n    gpuBuffer.attributeSize = this.attributeSize;\n    gpuBuffer.baseColor = this.baseColor;\n    gpuBuffer.alpha = this.alpha;\n    gpuBuffer.texture = this.texture;\n    gpuBuffer.geometryData = this.geometryData;\n    gpuBuffer.topology = this.topology;\n  }\n  reset() {\n    this.applyTransform = true;\n    this.renderable = null;\n    this.topology = \"triangle-list\";\n  }\n}\n\nexport { BatchableGraphics };\n//# sourceMappingURL=BatchableGraphics.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst buildCircle = {\n  extension: {\n    type: ExtensionType.ShapeBuilder,\n    name: \"circle\"\n  },\n  build(shape, points) {\n    let x;\n    let y;\n    let dx;\n    let dy;\n    let rx;\n    let ry;\n    if (shape.type === \"circle\") {\n      const circle = shape;\n      x = circle.x;\n      y = circle.y;\n      rx = ry = circle.radius;\n      dx = dy = 0;\n    } else if (shape.type === \"ellipse\") {\n      const ellipse = shape;\n      x = ellipse.x;\n      y = ellipse.y;\n      rx = ellipse.halfWidth;\n      ry = ellipse.halfHeight;\n      dx = dy = 0;\n    } else {\n      const roundedRect = shape;\n      const halfWidth = roundedRect.width / 2;\n      const halfHeight = roundedRect.height / 2;\n      x = roundedRect.x + halfWidth;\n      y = roundedRect.y + halfHeight;\n      rx = ry = Math.max(0, Math.min(roundedRect.radius, Math.min(halfWidth, halfHeight)));\n      dx = halfWidth - rx;\n      dy = halfHeight - ry;\n    }\n    if (!(rx >= 0 && ry >= 0 && dx >= 0 && dy >= 0)) {\n      return points;\n    }\n    const n = Math.ceil(2.3 * Math.sqrt(rx + ry));\n    const m = n * 8 + (dx ? 4 : 0) + (dy ? 4 : 0);\n    if (m === 0) {\n      return points;\n    }\n    if (n === 0) {\n      points[0] = points[6] = x + dx;\n      points[1] = points[3] = y + dy;\n      points[2] = points[4] = x - dx;\n      points[5] = points[7] = y - dy;\n      return points;\n    }\n    let j1 = 0;\n    let j2 = n * 4 + (dx ? 2 : 0) + 2;\n    let j3 = j2;\n    let j4 = m;\n    let x0 = dx + rx;\n    let y0 = dy;\n    let x1 = x + x0;\n    let x2 = x - x0;\n    let y1 = y + y0;\n    points[j1++] = x1;\n    points[j1++] = y1;\n    points[--j2] = y1;\n    points[--j2] = x2;\n    if (dy) {\n      const y22 = y - y0;\n      points[j3++] = x2;\n      points[j3++] = y22;\n      points[--j4] = y22;\n      points[--j4] = x1;\n    }\n    for (let i = 1; i < n; i++) {\n      const a = Math.PI / 2 * (i / n);\n      const x02 = dx + Math.cos(a) * rx;\n      const y02 = dy + Math.sin(a) * ry;\n      const x12 = x + x02;\n      const x22 = x - x02;\n      const y12 = y + y02;\n      const y22 = y - y02;\n      points[j1++] = x12;\n      points[j1++] = y12;\n      points[--j2] = y12;\n      points[--j2] = x22;\n      points[j3++] = x22;\n      points[j3++] = y22;\n      points[--j4] = y22;\n      points[--j4] = x12;\n    }\n    x0 = dx;\n    y0 = dy + ry;\n    x1 = x + x0;\n    x2 = x - x0;\n    y1 = y + y0;\n    const y2 = y - y0;\n    points[j1++] = x1;\n    points[j1++] = y1;\n    points[--j4] = y2;\n    points[--j4] = x1;\n    if (dx) {\n      points[j1++] = x2;\n      points[j1++] = y1;\n      points[--j4] = y2;\n      points[--j4] = x2;\n    }\n    return points;\n  },\n  triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n    if (points.length === 0) {\n      return;\n    }\n    let centerX = 0;\n    let centerY = 0;\n    for (let i = 0; i < points.length; i += 2) {\n      centerX += points[i];\n      centerY += points[i + 1];\n    }\n    centerX /= points.length / 2;\n    centerY /= points.length / 2;\n    let count = verticesOffset;\n    vertices[count * verticesStride] = centerX;\n    vertices[count * verticesStride + 1] = centerY;\n    const centerIndex = count++;\n    for (let i = 0; i < points.length; i += 2) {\n      vertices[count * verticesStride] = points[i];\n      vertices[count * verticesStride + 1] = points[i + 1];\n      if (i > 0) {\n        indices[indicesOffset++] = count;\n        indices[indicesOffset++] = centerIndex;\n        indices[indicesOffset++] = count - 1;\n      }\n      count++;\n    }\n    indices[indicesOffset++] = centerIndex + 1;\n    indices[indicesOffset++] = centerIndex;\n    indices[indicesOffset++] = count - 1;\n  }\n};\nconst buildEllipse = { ...buildCircle, extension: { ...buildCircle.extension, name: \"ellipse\" } };\nconst buildRoundedRectangle = { ...buildCircle, extension: { ...buildCircle.extension, name: \"roundedRectangle\" } };\n\nexport { buildCircle, buildEllipse, buildRoundedRectangle };\n//# sourceMappingURL=buildCircle.mjs.map\n","\"use strict\";\nconst closePointEps = 1e-4;\nconst curveEps = 1e-4;\n\nexport { closePointEps, curveEps };\n//# sourceMappingURL=const.mjs.map\n","\"use strict\";\nfunction getOrientationOfPoints(points) {\n  const m = points.length;\n  if (m < 6) {\n    return 1;\n  }\n  let area = 0;\n  for (let i = 0, x1 = points[m - 2], y1 = points[m - 1]; i < m; i += 2) {\n    const x2 = points[i];\n    const y2 = points[i + 1];\n    area += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  if (area < 0) {\n    return -1;\n  }\n  return 1;\n}\n\nexport { getOrientationOfPoints };\n//# sourceMappingURL=getOrientationOfPoints.mjs.map\n","import { Point } from '../../../../maths/point/Point.mjs';\nimport { closePointEps, curveEps } from '../const.mjs';\nimport { getOrientationOfPoints } from '../utils/getOrientationOfPoints.mjs';\n\n\"use strict\";\nfunction square(x, y, nx, ny, innerWeight, outerWeight, clockwise, verts) {\n  const ix = x - nx * innerWeight;\n  const iy = y - ny * innerWeight;\n  const ox = x + nx * outerWeight;\n  const oy = y + ny * outerWeight;\n  let exx;\n  let eyy;\n  if (clockwise) {\n    exx = ny;\n    eyy = -nx;\n  } else {\n    exx = -ny;\n    eyy = nx;\n  }\n  const eix = ix + exx;\n  const eiy = iy + eyy;\n  const eox = ox + exx;\n  const eoy = oy + eyy;\n  verts.push(eix, eiy);\n  verts.push(eox, eoy);\n  return 2;\n}\nfunction round(cx, cy, sx, sy, ex, ey, verts, clockwise) {\n  const cx2p0x = sx - cx;\n  const cy2p0y = sy - cy;\n  let angle0 = Math.atan2(cx2p0x, cy2p0y);\n  let angle1 = Math.atan2(ex - cx, ey - cy);\n  if (clockwise && angle0 < angle1) {\n    angle0 += Math.PI * 2;\n  } else if (!clockwise && angle0 > angle1) {\n    angle1 += Math.PI * 2;\n  }\n  let startAngle = angle0;\n  const angleDiff = angle1 - angle0;\n  const absAngleDiff = Math.abs(angleDiff);\n  const radius = Math.sqrt(cx2p0x * cx2p0x + cy2p0y * cy2p0y);\n  const segCount = (15 * absAngleDiff * Math.sqrt(radius) / Math.PI >> 0) + 1;\n  const angleInc = angleDiff / segCount;\n  startAngle += angleInc;\n  if (clockwise) {\n    verts.push(cx, cy);\n    verts.push(sx, sy);\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n      verts.push(cx, cy);\n      verts.push(\n        cx + Math.sin(angle) * radius,\n        cy + Math.cos(angle) * radius\n      );\n    }\n    verts.push(cx, cy);\n    verts.push(ex, ey);\n  } else {\n    verts.push(sx, sy);\n    verts.push(cx, cy);\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n      verts.push(\n        cx + Math.sin(angle) * radius,\n        cy + Math.cos(angle) * radius\n      );\n      verts.push(cx, cy);\n    }\n    verts.push(ex, ey);\n    verts.push(cx, cy);\n  }\n  return segCount * 2;\n}\nfunction buildLine(points, lineStyle, flipAlignment, closed, vertices, indices) {\n  const eps = closePointEps;\n  if (points.length === 0) {\n    return;\n  }\n  const style = lineStyle;\n  let alignment = style.alignment;\n  if (lineStyle.alignment !== 0.5) {\n    let orientation = getOrientationOfPoints(points);\n    if (flipAlignment)\n      orientation *= -1;\n    alignment = (alignment - 0.5) * orientation + 0.5;\n  }\n  const firstPoint = new Point(points[0], points[1]);\n  const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n  const closedShape = closed;\n  const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps && Math.abs(firstPoint.y - lastPoint.y) < eps;\n  if (closedShape) {\n    points = points.slice();\n    if (closedPath) {\n      points.pop();\n      points.pop();\n      lastPoint.set(points[points.length - 2], points[points.length - 1]);\n    }\n    const midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n    const midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n    points.unshift(midPointX, midPointY);\n    points.push(midPointX, midPointY);\n  }\n  const verts = vertices;\n  const length = points.length / 2;\n  let indexCount = points.length;\n  const indexStart = verts.length / 2;\n  const width = style.width / 2;\n  const widthSquared = width * width;\n  const miterLimitSquared = style.miterLimit * style.miterLimit;\n  let x0 = points[0];\n  let y0 = points[1];\n  let x1 = points[2];\n  let y1 = points[3];\n  let x2 = 0;\n  let y2 = 0;\n  let perpX = -(y0 - y1);\n  let perpY = x0 - x1;\n  let perp1x = 0;\n  let perp1y = 0;\n  let dist = Math.sqrt(perpX * perpX + perpY * perpY);\n  perpX /= dist;\n  perpY /= dist;\n  perpX *= width;\n  perpY *= width;\n  const ratio = alignment;\n  const innerWeight = (1 - ratio) * 2;\n  const outerWeight = ratio * 2;\n  if (!closedShape) {\n    if (style.cap === \"round\") {\n      indexCount += round(\n        x0 - perpX * (innerWeight - outerWeight) * 0.5,\n        y0 - perpY * (innerWeight - outerWeight) * 0.5,\n        x0 - perpX * innerWeight,\n        y0 - perpY * innerWeight,\n        x0 + perpX * outerWeight,\n        y0 + perpY * outerWeight,\n        verts,\n        true\n      ) + 2;\n    } else if (style.cap === \"square\") {\n      indexCount += square(x0, y0, perpX, perpY, innerWeight, outerWeight, true, verts);\n    }\n  }\n  verts.push(\n    x0 - perpX * innerWeight,\n    y0 - perpY * innerWeight\n  );\n  verts.push(\n    x0 + perpX * outerWeight,\n    y0 + perpY * outerWeight\n  );\n  for (let i = 1; i < length - 1; ++i) {\n    x0 = points[(i - 1) * 2];\n    y0 = points[(i - 1) * 2 + 1];\n    x1 = points[i * 2];\n    y1 = points[i * 2 + 1];\n    x2 = points[(i + 1) * 2];\n    y2 = points[(i + 1) * 2 + 1];\n    perpX = -(y0 - y1);\n    perpY = x0 - x1;\n    dist = Math.sqrt(perpX * perpX + perpY * perpY);\n    perpX /= dist;\n    perpY /= dist;\n    perpX *= width;\n    perpY *= width;\n    perp1x = -(y1 - y2);\n    perp1y = x1 - x2;\n    dist = Math.sqrt(perp1x * perp1x + perp1y * perp1y);\n    perp1x /= dist;\n    perp1y /= dist;\n    perp1x *= width;\n    perp1y *= width;\n    const dx0 = x1 - x0;\n    const dy0 = y0 - y1;\n    const dx1 = x1 - x2;\n    const dy1 = y2 - y1;\n    const dot = dx0 * dx1 + dy0 * dy1;\n    const cross = dy0 * dx1 - dy1 * dx0;\n    const clockwise = cross < 0;\n    if (Math.abs(cross) < 1e-3 * Math.abs(dot)) {\n      verts.push(\n        x1 - perpX * innerWeight,\n        y1 - perpY * innerWeight\n      );\n      verts.push(\n        x1 + perpX * outerWeight,\n        y1 + perpY * outerWeight\n      );\n      if (dot >= 0) {\n        if (style.join === \"round\") {\n          indexCount += round(\n            x1,\n            y1,\n            x1 - perpX * innerWeight,\n            y1 - perpY * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            false\n          ) + 4;\n        } else {\n          indexCount += 2;\n        }\n        verts.push(\n          x1 - perp1x * outerWeight,\n          y1 - perp1y * outerWeight\n        );\n        verts.push(\n          x1 + perp1x * innerWeight,\n          y1 + perp1y * innerWeight\n        );\n      }\n      continue;\n    }\n    const c1 = (-perpX + x0) * (-perpY + y1) - (-perpX + x1) * (-perpY + y0);\n    const c2 = (-perp1x + x2) * (-perp1y + y1) - (-perp1x + x1) * (-perp1y + y2);\n    const px = (dx0 * c2 - dx1 * c1) / cross;\n    const py = (dy1 * c1 - dy0 * c2) / cross;\n    const pDist = (px - x1) * (px - x1) + (py - y1) * (py - y1);\n    const imx = x1 + (px - x1) * innerWeight;\n    const imy = y1 + (py - y1) * innerWeight;\n    const omx = x1 - (px - x1) * outerWeight;\n    const omy = y1 - (py - y1) * outerWeight;\n    const smallerInsideSegmentSq = Math.min(dx0 * dx0 + dy0 * dy0, dx1 * dx1 + dy1 * dy1);\n    const insideWeight = clockwise ? innerWeight : outerWeight;\n    const smallerInsideDiagonalSq = smallerInsideSegmentSq + insideWeight * insideWeight * widthSquared;\n    const insideMiterOk = pDist <= smallerInsideDiagonalSq;\n    if (insideMiterOk) {\n      if (style.join === \"bevel\" || pDist / widthSquared > miterLimitSquared) {\n        if (clockwise) {\n          verts.push(imx, imy);\n          verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n          verts.push(imx, imy);\n          verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n        } else {\n          verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n          verts.push(omx, omy);\n          verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n          verts.push(omx, omy);\n        }\n        indexCount += 2;\n      } else if (style.join === \"round\") {\n        if (clockwise) {\n          verts.push(imx, imy);\n          verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n          indexCount += round(\n            x1,\n            y1,\n            x1 + perpX * outerWeight,\n            y1 + perpY * outerWeight,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight,\n            verts,\n            true\n          ) + 4;\n          verts.push(imx, imy);\n          verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n        } else {\n          verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n          verts.push(omx, omy);\n          indexCount += round(\n            x1,\n            y1,\n            x1 - perpX * innerWeight,\n            y1 - perpY * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            false\n          ) + 4;\n          verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n          verts.push(omx, omy);\n        }\n      } else {\n        verts.push(imx, imy);\n        verts.push(omx, omy);\n      }\n    } else {\n      verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n      verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n      if (style.join === \"round\") {\n        if (clockwise) {\n          indexCount += round(\n            x1,\n            y1,\n            x1 + perpX * outerWeight,\n            y1 + perpY * outerWeight,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight,\n            verts,\n            true\n          ) + 2;\n        } else {\n          indexCount += round(\n            x1,\n            y1,\n            x1 - perpX * innerWeight,\n            y1 - perpY * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            false\n          ) + 2;\n        }\n      } else if (style.join === \"miter\" && pDist / widthSquared <= miterLimitSquared) {\n        if (clockwise) {\n          verts.push(omx, omy);\n          verts.push(omx, omy);\n        } else {\n          verts.push(imx, imy);\n          verts.push(imx, imy);\n        }\n        indexCount += 2;\n      }\n      verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n      verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n      indexCount += 2;\n    }\n  }\n  x0 = points[(length - 2) * 2];\n  y0 = points[(length - 2) * 2 + 1];\n  x1 = points[(length - 1) * 2];\n  y1 = points[(length - 1) * 2 + 1];\n  perpX = -(y0 - y1);\n  perpY = x0 - x1;\n  dist = Math.sqrt(perpX * perpX + perpY * perpY);\n  perpX /= dist;\n  perpY /= dist;\n  perpX *= width;\n  perpY *= width;\n  verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n  verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n  if (!closedShape) {\n    if (style.cap === \"round\") {\n      indexCount += round(\n        x1 - perpX * (innerWeight - outerWeight) * 0.5,\n        y1 - perpY * (innerWeight - outerWeight) * 0.5,\n        x1 - perpX * innerWeight,\n        y1 - perpY * innerWeight,\n        x1 + perpX * outerWeight,\n        y1 + perpY * outerWeight,\n        verts,\n        false\n      ) + 2;\n    } else if (style.cap === \"square\") {\n      indexCount += square(x1, y1, perpX, perpY, innerWeight, outerWeight, false, verts);\n    }\n  }\n  const eps2 = curveEps * curveEps;\n  for (let i = indexStart; i < indexCount + indexStart - 2; ++i) {\n    x0 = verts[i * 2];\n    y0 = verts[i * 2 + 1];\n    x1 = verts[(i + 1) * 2];\n    y1 = verts[(i + 1) * 2 + 1];\n    x2 = verts[(i + 2) * 2];\n    y2 = verts[(i + 2) * 2 + 1];\n    if (Math.abs(x0 * (y1 - y2) + x1 * (y2 - y0) + x2 * (y0 - y1)) < eps2) {\n      continue;\n    }\n    indices.push(i, i + 1, i + 2);\n  }\n}\n\nexport { buildLine };\n//# sourceMappingURL=buildLine.mjs.map\n","import { closePointEps } from '../const.mjs';\n\n\"use strict\";\nfunction buildPixelLine(points, closed, vertices, indices) {\n  const eps = closePointEps;\n  if (points.length === 0) {\n    return;\n  }\n  const fx = points[0];\n  const fy = points[1];\n  const lx = points[points.length - 2];\n  const ly = points[points.length - 1];\n  const closePath = closed || Math.abs(fx - lx) < eps && Math.abs(fy - ly) < eps;\n  const verts = vertices;\n  const length = points.length / 2;\n  const indexStart = verts.length / 2;\n  for (let i = 0; i < length; i++) {\n    verts.push(points[i * 2]);\n    verts.push(points[i * 2 + 1]);\n  }\n  for (let i = 0; i < length - 1; i++) {\n    indices.push(indexStart + i, indexStart + i + 1);\n  }\n  if (closePath) {\n    indices.push(indexStart + length - 1, indexStart);\n  }\n}\n\nexport { buildPixelLine };\n//# sourceMappingURL=buildPixelLine.mjs.map\n","import earcut from 'earcut';\n\n\"use strict\";\nfunction triangulateWithHoles(points, holes, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n  const triangles = earcut(points, holes, 2);\n  if (!triangles) {\n    return;\n  }\n  for (let i = 0; i < triangles.length; i += 3) {\n    indices[indicesOffset++] = triangles[i] + verticesOffset;\n    indices[indicesOffset++] = triangles[i + 1] + verticesOffset;\n    indices[indicesOffset++] = triangles[i + 2] + verticesOffset;\n  }\n  let index = verticesOffset * verticesStride;\n  for (let i = 0; i < points.length; i += 2) {\n    vertices[index] = points[i];\n    vertices[index + 1] = points[i + 1];\n    index += verticesStride;\n  }\n}\n\nexport { triangulateWithHoles };\n//# sourceMappingURL=triangulateWithHoles.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { triangulateWithHoles } from '../utils/triangulateWithHoles.mjs';\n\n\"use strict\";\nconst emptyArray = [];\nconst buildPolygon = {\n  extension: {\n    type: ExtensionType.ShapeBuilder,\n    name: \"polygon\"\n  },\n  build(shape, points) {\n    for (let i = 0; i < shape.points.length; i++) {\n      points[i] = shape.points[i];\n    }\n    return points;\n  },\n  triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n    triangulateWithHoles(points, emptyArray, vertices, verticesStride, verticesOffset, indices, indicesOffset);\n  }\n};\n\nexport { buildPolygon };\n//# sourceMappingURL=buildPolygon.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst buildRectangle = {\n  extension: {\n    type: ExtensionType.ShapeBuilder,\n    name: \"rectangle\"\n  },\n  build(shape, points) {\n    const rectData = shape;\n    const x = rectData.x;\n    const y = rectData.y;\n    const width = rectData.width;\n    const height = rectData.height;\n    if (!(width >= 0 && height >= 0)) {\n      return points;\n    }\n    points[0] = x;\n    points[1] = y;\n    points[2] = x + width;\n    points[3] = y;\n    points[4] = x + width;\n    points[5] = y + height;\n    points[6] = x;\n    points[7] = y + height;\n    return points;\n  },\n  triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n    let count = 0;\n    verticesOffset *= verticesStride;\n    vertices[verticesOffset + count] = points[0];\n    vertices[verticesOffset + count + 1] = points[1];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[2];\n    vertices[verticesOffset + count + 1] = points[3];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[6];\n    vertices[verticesOffset + count + 1] = points[7];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[4];\n    vertices[verticesOffset + count + 1] = points[5];\n    count += verticesStride;\n    const verticesIndex = verticesOffset / verticesStride;\n    indices[indicesOffset++] = verticesIndex;\n    indices[indicesOffset++] = verticesIndex + 1;\n    indices[indicesOffset++] = verticesIndex + 2;\n    indices[indicesOffset++] = verticesIndex + 1;\n    indices[indicesOffset++] = verticesIndex + 3;\n    indices[indicesOffset++] = verticesIndex + 2;\n  }\n};\n\nexport { buildRectangle };\n//# sourceMappingURL=buildRectangle.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst buildTriangle = {\n  extension: {\n    type: ExtensionType.ShapeBuilder,\n    name: \"triangle\"\n  },\n  build(shape, points) {\n    points[0] = shape.x;\n    points[1] = shape.y;\n    points[2] = shape.x2;\n    points[3] = shape.y2;\n    points[4] = shape.x3;\n    points[5] = shape.y3;\n    return points;\n  },\n  triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n    let count = 0;\n    verticesOffset *= verticesStride;\n    vertices[verticesOffset + count] = points[0];\n    vertices[verticesOffset + count + 1] = points[1];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[2];\n    vertices[verticesOffset + count + 1] = points[3];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[4];\n    vertices[verticesOffset + count + 1] = points[5];\n    const verticesIndex = verticesOffset / verticesStride;\n    indices[indicesOffset++] = verticesIndex;\n    indices[indicesOffset++] = verticesIndex + 1;\n    indices[indicesOffset++] = verticesIndex + 2;\n  }\n};\n\nexport { buildTriangle };\n//# sourceMappingURL=buildTriangle.mjs.map\n","import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { FillGradient } from '../fill/FillGradient.mjs';\n\n\"use strict\";\nconst tempTextureMatrix = new Matrix();\nconst tempRect = new Rectangle();\nfunction generateTextureMatrix(out, style, shape, matrix) {\n  const textureMatrix = style.matrix ? out.copyFrom(style.matrix).invert() : out.identity();\n  if (style.textureSpace === \"local\") {\n    const bounds = shape.getBounds(tempRect);\n    if (style.width) {\n      bounds.pad(style.width);\n    }\n    const { x: tx, y: ty } = bounds;\n    const sx = 1 / bounds.width;\n    const sy = 1 / bounds.height;\n    const mTx = -tx * sx;\n    const mTy = -ty * sy;\n    const a1 = textureMatrix.a;\n    const b1 = textureMatrix.b;\n    const c1 = textureMatrix.c;\n    const d1 = textureMatrix.d;\n    textureMatrix.a *= sx;\n    textureMatrix.b *= sx;\n    textureMatrix.c *= sy;\n    textureMatrix.d *= sy;\n    textureMatrix.tx = mTx * a1 + mTy * c1 + textureMatrix.tx;\n    textureMatrix.ty = mTx * b1 + mTy * d1 + textureMatrix.ty;\n  } else {\n    textureMatrix.translate(style.texture.frame.x, style.texture.frame.y);\n    textureMatrix.scale(1 / style.texture.source.width, 1 / style.texture.source.height);\n  }\n  const sourceStyle = style.texture.source.style;\n  if (!(style.fill instanceof FillGradient) && sourceStyle.addressMode === \"clamp-to-edge\") {\n    sourceStyle.addressMode = \"repeat\";\n    sourceStyle.update();\n  }\n  if (matrix) {\n    textureMatrix.append(tempTextureMatrix.copyFrom(matrix).invert());\n  }\n  return textureMatrix;\n}\n\nexport { generateTextureMatrix };\n//# sourceMappingURL=generateTextureFillMatrix.mjs.map\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { buildUvs, buildSimpleUvs } from '../../../../rendering/renderers/shared/geometry/utils/buildUvs.mjs';\nimport { transformVertices } from '../../../../rendering/renderers/shared/geometry/utils/transformVertices.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { BigPool } from '../../../../utils/pool/PoolGroup.mjs';\nimport { BatchableGraphics } from '../BatchableGraphics.mjs';\nimport { buildCircle, buildEllipse, buildRoundedRectangle } from '../buildCommands/buildCircle.mjs';\nimport { buildLine } from '../buildCommands/buildLine.mjs';\nimport { buildPixelLine } from '../buildCommands/buildPixelLine.mjs';\nimport { buildPolygon } from '../buildCommands/buildPolygon.mjs';\nimport { buildRectangle } from '../buildCommands/buildRectangle.mjs';\nimport { buildTriangle } from '../buildCommands/buildTriangle.mjs';\nimport { generateTextureMatrix } from './generateTextureFillMatrix.mjs';\nimport { triangulateWithHoles } from './triangulateWithHoles.mjs';\n\n\"use strict\";\nconst shapeBuilders = {};\nextensions.handleByMap(ExtensionType.ShapeBuilder, shapeBuilders);\nextensions.add(buildRectangle, buildPolygon, buildTriangle, buildCircle, buildEllipse, buildRoundedRectangle);\nconst tempRect = new Rectangle();\nconst tempTextureMatrix = new Matrix();\nfunction buildContextBatches(context, gpuContext) {\n  const { geometryData, batches } = gpuContext;\n  batches.length = 0;\n  geometryData.indices.length = 0;\n  geometryData.vertices.length = 0;\n  geometryData.uvs.length = 0;\n  for (let i = 0; i < context.instructions.length; i++) {\n    const instruction = context.instructions[i];\n    if (instruction.action === \"texture\") {\n      addTextureToGeometryData(instruction.data, batches, geometryData);\n    } else if (instruction.action === \"fill\" || instruction.action === \"stroke\") {\n      const isStroke = instruction.action === \"stroke\";\n      const shapePath = instruction.data.path.shapePath;\n      const style = instruction.data.style;\n      const hole = instruction.data.hole;\n      if (isStroke && hole) {\n        addShapePathToGeometryData(hole.shapePath, style, true, batches, geometryData);\n      }\n      if (hole) {\n        shapePath.shapePrimitives[shapePath.shapePrimitives.length - 1].holes = hole.shapePath.shapePrimitives;\n      }\n      addShapePathToGeometryData(shapePath, style, isStroke, batches, geometryData);\n    }\n  }\n}\nfunction addTextureToGeometryData(data, batches, geometryData) {\n  const { vertices, uvs, indices } = geometryData;\n  const indexOffset = indices.length;\n  const vertOffset = vertices.length / 2;\n  const points = [];\n  const build = shapeBuilders.rectangle;\n  const rect = tempRect;\n  const texture = data.image;\n  rect.x = data.dx;\n  rect.y = data.dy;\n  rect.width = data.dw;\n  rect.height = data.dh;\n  const matrix = data.transform;\n  build.build(rect, points);\n  if (matrix) {\n    transformVertices(points, matrix);\n  }\n  build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n  const textureUvs = texture.uvs;\n  uvs.push(\n    textureUvs.x0,\n    textureUvs.y0,\n    textureUvs.x1,\n    textureUvs.y1,\n    textureUvs.x3,\n    textureUvs.y3,\n    textureUvs.x2,\n    textureUvs.y2\n  );\n  const graphicsBatch = BigPool.get(BatchableGraphics);\n  graphicsBatch.indexOffset = indexOffset;\n  graphicsBatch.indexSize = indices.length - indexOffset;\n  graphicsBatch.attributeOffset = vertOffset;\n  graphicsBatch.attributeSize = vertices.length / 2 - vertOffset;\n  graphicsBatch.baseColor = data.style;\n  graphicsBatch.alpha = data.alpha;\n  graphicsBatch.texture = texture;\n  graphicsBatch.geometryData = geometryData;\n  batches.push(graphicsBatch);\n}\nfunction addShapePathToGeometryData(shapePath, style, isStroke, batches, geometryData) {\n  const { vertices, uvs, indices } = geometryData;\n  shapePath.shapePrimitives.forEach(({ shape, transform: matrix, holes }) => {\n    const indexOffset = indices.length;\n    const vertOffset = vertices.length / 2;\n    const points = [];\n    const build = shapeBuilders[shape.type];\n    let topology = \"triangle-list\";\n    build.build(shape, points);\n    if (matrix) {\n      transformVertices(points, matrix);\n    }\n    if (!isStroke) {\n      if (holes) {\n        const holeIndices = [];\n        const otherPoints = points.slice();\n        const holeArrays = getHoleArrays(holes);\n        holeArrays.forEach((holePoints) => {\n          holeIndices.push(otherPoints.length / 2);\n          otherPoints.push(...holePoints);\n        });\n        triangulateWithHoles(otherPoints, holeIndices, vertices, 2, vertOffset, indices, indexOffset);\n      } else {\n        build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n      }\n    } else {\n      const close = shape.closePath ?? true;\n      const lineStyle = style;\n      if (!lineStyle.pixelLine) {\n        buildLine(points, lineStyle, false, close, vertices, indices);\n      } else {\n        buildPixelLine(points, close, vertices, indices);\n        topology = \"line-list\";\n      }\n    }\n    const uvsOffset = uvs.length / 2;\n    const texture = style.texture;\n    if (texture !== Texture.WHITE) {\n      const textureMatrix = generateTextureMatrix(tempTextureMatrix, style, shape, matrix);\n      buildUvs(vertices, 2, vertOffset, uvs, uvsOffset, 2, vertices.length / 2 - vertOffset, textureMatrix);\n    } else {\n      buildSimpleUvs(uvs, uvsOffset, 2, vertices.length / 2 - vertOffset);\n    }\n    const graphicsBatch = BigPool.get(BatchableGraphics);\n    graphicsBatch.indexOffset = indexOffset;\n    graphicsBatch.indexSize = indices.length - indexOffset;\n    graphicsBatch.attributeOffset = vertOffset;\n    graphicsBatch.attributeSize = vertices.length / 2 - vertOffset;\n    graphicsBatch.baseColor = style.color;\n    graphicsBatch.alpha = style.alpha;\n    graphicsBatch.texture = texture;\n    graphicsBatch.geometryData = geometryData;\n    graphicsBatch.topology = topology;\n    batches.push(graphicsBatch);\n  });\n}\nfunction getHoleArrays(holePrimitives) {\n  const holeArrays = [];\n  for (let k = 0; k < holePrimitives.length; k++) {\n    const holePrimitive = holePrimitives[k].shape;\n    const holePoints = [];\n    const holeBuilder = shapeBuilders[holePrimitive.type];\n    holeBuilder.build(holePrimitive, holePoints);\n    holeArrays.push(holePoints);\n  }\n  return holeArrays;\n}\n\nexport { buildContextBatches, shapeBuilders };\n//# sourceMappingURL=buildContextBatches.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { getTextureBatchBindGroup } from '../../../rendering/batcher/gpu/getTextureBatchBindGroup.mjs';\nimport { DefaultBatcher } from '../../../rendering/batcher/shared/DefaultBatcher.mjs';\nimport { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet.mjs';\nimport { deprecation, v8_3_4 } from '../../../utils/logging/deprecation.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { buildContextBatches } from './utils/buildContextBatches.mjs';\n\n\"use strict\";\nclass GpuGraphicsContext {\n  constructor() {\n    this.batches = [];\n    this.geometryData = {\n      vertices: [],\n      uvs: [],\n      indices: []\n    };\n  }\n}\nclass GraphicsContextRenderData {\n  constructor() {\n    this.batcher = new DefaultBatcher();\n    this.instructions = new InstructionSet();\n  }\n  init() {\n    this.instructions.reset();\n  }\n  /**\n   * @deprecated since version 8.0.0\n   * Use `batcher.geometry` instead.\n   * @see {Batcher#geometry}\n   */\n  get geometry() {\n    deprecation(v8_3_4, \"GraphicsContextRenderData#geometry is deprecated, please use batcher.geometry instead.\");\n    return this.batcher.geometry;\n  }\n}\nconst _GraphicsContextSystem = class _GraphicsContextSystem {\n  constructor(renderer) {\n    // the root context batches, used to either make a batch or geometry\n    // all graphics use this as a base\n    this._gpuContextHash = {};\n    // used for non-batchable graphics\n    this._graphicsDataContextHash = /* @__PURE__ */ Object.create(null);\n    renderer.renderableGC.addManagedHash(this, \"_gpuContextHash\");\n    renderer.renderableGC.addManagedHash(this, \"_graphicsDataContextHash\");\n  }\n  /**\n   * Runner init called, update the default options\n   * @ignore\n   */\n  init(options) {\n    _GraphicsContextSystem.defaultOptions.bezierSmoothness = options?.bezierSmoothness ?? _GraphicsContextSystem.defaultOptions.bezierSmoothness;\n  }\n  getContextRenderData(context) {\n    return this._graphicsDataContextHash[context.uid] || this._initContextRenderData(context);\n  }\n  // Context management functions\n  updateGpuContext(context) {\n    let gpuContext = this._gpuContextHash[context.uid] || this._initContext(context);\n    if (context.dirty) {\n      if (gpuContext) {\n        this._cleanGraphicsContextData(context);\n      } else {\n        gpuContext = this._initContext(context);\n      }\n      buildContextBatches(context, gpuContext);\n      const batchMode = context.batchMode;\n      if (context.customShader || batchMode === \"no-batch\") {\n        gpuContext.isBatchable = false;\n      } else if (batchMode === \"auto\") {\n        gpuContext.isBatchable = gpuContext.geometryData.vertices.length < 400;\n      }\n      context.dirty = false;\n    }\n    return gpuContext;\n  }\n  getGpuContext(context) {\n    return this._gpuContextHash[context.uid] || this._initContext(context);\n  }\n  _initContextRenderData(context) {\n    const graphicsData = BigPool.get(GraphicsContextRenderData);\n    const { batches, geometryData } = this._gpuContextHash[context.uid];\n    const vertexSize = geometryData.vertices.length;\n    const indexSize = geometryData.indices.length;\n    for (let i = 0; i < batches.length; i++) {\n      batches[i].applyTransform = false;\n    }\n    const batcher = graphicsData.batcher;\n    batcher.ensureAttributeBuffer(vertexSize);\n    batcher.ensureIndexBuffer(indexSize);\n    batcher.begin();\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batcher.add(batch);\n    }\n    batcher.finish(graphicsData.instructions);\n    const geometry = batcher.geometry;\n    geometry.indexBuffer.setDataWithSize(batcher.indexBuffer, batcher.indexSize, true);\n    geometry.buffers[0].setDataWithSize(batcher.attributeBuffer.float32View, batcher.attributeSize, true);\n    const drawBatches = batcher.batches;\n    for (let i = 0; i < drawBatches.length; i++) {\n      const batch = drawBatches[i];\n      batch.bindGroup = getTextureBatchBindGroup(batch.textures.textures, batch.textures.count);\n    }\n    this._graphicsDataContextHash[context.uid] = graphicsData;\n    return graphicsData;\n  }\n  _initContext(context) {\n    const gpuContext = new GpuGraphicsContext();\n    gpuContext.context = context;\n    this._gpuContextHash[context.uid] = gpuContext;\n    context.on(\"destroy\", this.onGraphicsContextDestroy, this);\n    return this._gpuContextHash[context.uid];\n  }\n  onGraphicsContextDestroy(context) {\n    this._cleanGraphicsContextData(context);\n    context.off(\"destroy\", this.onGraphicsContextDestroy, this);\n    this._gpuContextHash[context.uid] = null;\n  }\n  _cleanGraphicsContextData(context) {\n    const gpuContext = this._gpuContextHash[context.uid];\n    if (!gpuContext.isBatchable) {\n      if (this._graphicsDataContextHash[context.uid]) {\n        BigPool.return(this.getContextRenderData(context));\n        this._graphicsDataContextHash[context.uid] = null;\n      }\n    }\n    if (gpuContext.batches) {\n      gpuContext.batches.forEach((batch) => {\n        BigPool.return(batch);\n      });\n    }\n  }\n  destroy() {\n    for (const i in this._gpuContextHash) {\n      if (this._gpuContextHash[i]) {\n        this.onGraphicsContextDestroy(this._gpuContextHash[i].context);\n      }\n    }\n  }\n};\n/** @ignore */\n_GraphicsContextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"graphicsContext\"\n};\n/** The default options for the GraphicsContextSystem. */\n_GraphicsContextSystem.defaultOptions = {\n  /**\n   * A value from 0 to 1 that controls the smoothness of bezier curves (the higher the smoother)\n   * @default 0.5\n   */\n  bezierSmoothness: 0.5\n};\nlet GraphicsContextSystem = _GraphicsContextSystem;\n\nexport { GpuGraphicsContext, GraphicsContextRenderData, GraphicsContextSystem };\n//# sourceMappingURL=GraphicsContextSystem.mjs.map\n","import { GraphicsContextSystem } from '../GraphicsContextSystem.mjs';\n\n\"use strict\";\nconst RECURSION_LIMIT = 8;\nconst FLT_EPSILON = 11920929e-14;\nconst PATH_DISTANCE_EPSILON = 1;\nconst curveAngleToleranceEpsilon = 0.01;\nconst mAngleTolerance = 0;\nconst mCuspLimit = 0;\nfunction buildAdaptiveBezier(points, sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, smoothness) {\n  const scale = 1;\n  const smoothing = Math.min(\n    0.99,\n    // a value of 1.0 actually inverts smoothing, so we cap it at 0.99\n    Math.max(0, smoothness ?? GraphicsContextSystem.defaultOptions.bezierSmoothness)\n  );\n  let distanceTolerance = (PATH_DISTANCE_EPSILON - smoothing) / scale;\n  distanceTolerance *= distanceTolerance;\n  begin(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance);\n  return points;\n}\nfunction begin(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance) {\n  recursive(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance, 0);\n  points.push(eX, eY);\n}\nfunction recursive(x1, y1, x2, y2, x3, y3, x4, y4, points, distanceTolerance, level) {\n  if (level > RECURSION_LIMIT) {\n    return;\n  }\n  const pi = Math.PI;\n  const x12 = (x1 + x2) / 2;\n  const y12 = (y1 + y2) / 2;\n  const x23 = (x2 + x3) / 2;\n  const y23 = (y2 + y3) / 2;\n  const x34 = (x3 + x4) / 2;\n  const y34 = (y3 + y4) / 2;\n  const x123 = (x12 + x23) / 2;\n  const y123 = (y12 + y23) / 2;\n  const x234 = (x23 + x34) / 2;\n  const y234 = (y23 + y34) / 2;\n  const x1234 = (x123 + x234) / 2;\n  const y1234 = (y123 + y234) / 2;\n  if (level > 0) {\n    let dx = x4 - x1;\n    let dy = y4 - y1;\n    const d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx);\n    const d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx);\n    let da1;\n    let da2;\n    if (d2 > FLT_EPSILON && d3 > FLT_EPSILON) {\n      if ((d2 + d3) * (d2 + d3) <= distanceTolerance * (dx * dx + dy * dy)) {\n        if (mAngleTolerance < curveAngleToleranceEpsilon) {\n          points.push(x1234, y1234);\n          return;\n        }\n        const a23 = Math.atan2(y3 - y2, x3 - x2);\n        da1 = Math.abs(a23 - Math.atan2(y2 - y1, x2 - x1));\n        da2 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - a23);\n        if (da1 >= pi)\n          da1 = 2 * pi - da1;\n        if (da2 >= pi)\n          da2 = 2 * pi - da2;\n        if (da1 + da2 < mAngleTolerance) {\n          points.push(x1234, y1234);\n          return;\n        }\n        if (mCuspLimit !== 0) {\n          if (da1 > mCuspLimit) {\n            points.push(x2, y2);\n            return;\n          }\n          if (da2 > mCuspLimit) {\n            points.push(x3, y3);\n            return;\n          }\n        }\n      }\n    } else if (d2 > FLT_EPSILON) {\n      if (d2 * d2 <= distanceTolerance * (dx * dx + dy * dy)) {\n        if (mAngleTolerance < curveAngleToleranceEpsilon) {\n          points.push(x1234, y1234);\n          return;\n        }\n        da1 = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));\n        if (da1 >= pi)\n          da1 = 2 * pi - da1;\n        if (da1 < mAngleTolerance) {\n          points.push(x2, y2);\n          points.push(x3, y3);\n          return;\n        }\n        if (mCuspLimit !== 0) {\n          if (da1 > mCuspLimit) {\n            points.push(x2, y2);\n            return;\n          }\n        }\n      }\n    } else if (d3 > FLT_EPSILON) {\n      if (d3 * d3 <= distanceTolerance * (dx * dx + dy * dy)) {\n        if (mAngleTolerance < curveAngleToleranceEpsilon) {\n          points.push(x1234, y1234);\n          return;\n        }\n        da1 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y3 - y2, x3 - x2));\n        if (da1 >= pi)\n          da1 = 2 * pi - da1;\n        if (da1 < mAngleTolerance) {\n          points.push(x2, y2);\n          points.push(x3, y3);\n          return;\n        }\n        if (mCuspLimit !== 0) {\n          if (da1 > mCuspLimit) {\n            points.push(x3, y3);\n            return;\n          }\n        }\n      }\n    } else {\n      dx = x1234 - (x1 + x4) / 2;\n      dy = y1234 - (y1 + y4) / 2;\n      if (dx * dx + dy * dy <= distanceTolerance) {\n        points.push(x1234, y1234);\n        return;\n      }\n    }\n  }\n  recursive(x1, y1, x12, y12, x123, y123, x1234, y1234, points, distanceTolerance, level + 1);\n  recursive(x1234, y1234, x234, y234, x34, y34, x4, y4, points, distanceTolerance, level + 1);\n}\n\nexport { buildAdaptiveBezier };\n//# sourceMappingURL=buildAdaptiveBezier.mjs.map\n","import { GraphicsContextSystem } from '../GraphicsContextSystem.mjs';\n\n\"use strict\";\nconst RECURSION_LIMIT = 8;\nconst FLT_EPSILON = 11920929e-14;\nconst PATH_DISTANCE_EPSILON = 1;\nconst curveAngleToleranceEpsilon = 0.01;\nconst mAngleTolerance = 0;\nfunction buildAdaptiveQuadratic(points, sX, sY, cp1x, cp1y, eX, eY, smoothness) {\n  const scale = 1;\n  const smoothing = Math.min(\n    0.99,\n    // a value of 1.0 actually inverts smoothing, so we cap it at 0.99\n    Math.max(0, smoothness ?? GraphicsContextSystem.defaultOptions.bezierSmoothness)\n  );\n  let distanceTolerance = (PATH_DISTANCE_EPSILON - smoothing) / scale;\n  distanceTolerance *= distanceTolerance;\n  begin(sX, sY, cp1x, cp1y, eX, eY, points, distanceTolerance);\n  return points;\n}\nfunction begin(sX, sY, cp1x, cp1y, eX, eY, points, distanceTolerance) {\n  recursive(points, sX, sY, cp1x, cp1y, eX, eY, distanceTolerance, 0);\n  points.push(eX, eY);\n}\nfunction recursive(points, x1, y1, x2, y2, x3, y3, distanceTolerance, level) {\n  if (level > RECURSION_LIMIT) {\n    return;\n  }\n  const pi = Math.PI;\n  const x12 = (x1 + x2) / 2;\n  const y12 = (y1 + y2) / 2;\n  const x23 = (x2 + x3) / 2;\n  const y23 = (y2 + y3) / 2;\n  const x123 = (x12 + x23) / 2;\n  const y123 = (y12 + y23) / 2;\n  let dx = x3 - x1;\n  let dy = y3 - y1;\n  const d = Math.abs((x2 - x3) * dy - (y2 - y3) * dx);\n  if (d > FLT_EPSILON) {\n    if (d * d <= distanceTolerance * (dx * dx + dy * dy)) {\n      if (mAngleTolerance < curveAngleToleranceEpsilon) {\n        points.push(x123, y123);\n        return;\n      }\n      let da = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));\n      if (da >= pi)\n        da = 2 * pi - da;\n      if (da < mAngleTolerance) {\n        points.push(x123, y123);\n        return;\n      }\n    }\n  } else {\n    dx = x123 - (x1 + x3) / 2;\n    dy = y123 - (y1 + y3) / 2;\n    if (dx * dx + dy * dy <= distanceTolerance) {\n      points.push(x123, y123);\n      return;\n    }\n  }\n  recursive(points, x1, y1, x12, y12, x123, y123, distanceTolerance, level + 1);\n  recursive(points, x123, y123, x23, y23, x3, y3, distanceTolerance, level + 1);\n}\n\nexport { buildAdaptiveQuadratic };\n//# sourceMappingURL=buildAdaptiveQuadratic.mjs.map\n","\"use strict\";\nfunction buildArc(points, x, y, radius, start, end, clockwise, steps) {\n  let dist = Math.abs(start - end);\n  if (!clockwise && start > end) {\n    dist = 2 * Math.PI - dist;\n  } else if (clockwise && end > start) {\n    dist = 2 * Math.PI - dist;\n  }\n  steps || (steps = Math.max(6, Math.floor(6 * Math.pow(radius, 1 / 3) * (dist / Math.PI))));\n  steps = Math.max(steps, 3);\n  let f = dist / steps;\n  let t = start;\n  f *= clockwise ? -1 : 1;\n  for (let i = 0; i < steps + 1; i++) {\n    const cs = Math.cos(t);\n    const sn = Math.sin(t);\n    const nx = x + cs * radius;\n    const ny = y + sn * radius;\n    points.push(nx, ny);\n    t += f;\n  }\n}\n\nexport { buildArc };\n//# sourceMappingURL=buildArc.mjs.map\n","import { buildArc } from './buildArc.mjs';\n\n\"use strict\";\nfunction buildArcTo(points, x1, y1, x2, y2, radius) {\n  const fromX = points[points.length - 2];\n  const fromY = points[points.length - 1];\n  const a1 = fromY - y1;\n  const b1 = fromX - x1;\n  const a2 = y2 - y1;\n  const b2 = x2 - x1;\n  const mm = Math.abs(a1 * b2 - b1 * a2);\n  if (mm < 1e-8 || radius === 0) {\n    if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) {\n      points.push(x1, y1);\n    }\n    return;\n  }\n  const dd = a1 * a1 + b1 * b1;\n  const cc = a2 * a2 + b2 * b2;\n  const tt = a1 * a2 + b1 * b2;\n  const k1 = radius * Math.sqrt(dd) / mm;\n  const k2 = radius * Math.sqrt(cc) / mm;\n  const j1 = k1 * tt / dd;\n  const j2 = k2 * tt / cc;\n  const cx = k1 * b2 + k2 * b1;\n  const cy = k1 * a2 + k2 * a1;\n  const px = b1 * (k2 + j1);\n  const py = a1 * (k2 + j1);\n  const qx = b2 * (k1 + j2);\n  const qy = a2 * (k1 + j2);\n  const startAngle = Math.atan2(py - cy, px - cx);\n  const endAngle = Math.atan2(qy - cy, qx - cx);\n  buildArc(\n    points,\n    cx + x1,\n    cy + y1,\n    radius,\n    startAngle,\n    endAngle,\n    b1 * a2 > b2 * a1\n  );\n}\n\nexport { buildArcTo };\n//# sourceMappingURL=buildArcTo.mjs.map\n","import { buildAdaptiveBezier } from './buildAdaptiveBezier.mjs';\n\n\"use strict\";\nconst TAU = Math.PI * 2;\nconst out = {\n  centerX: 0,\n  centerY: 0,\n  ang1: 0,\n  ang2: 0\n};\nconst mapToEllipse = ({ x, y }, rx, ry, cosPhi, sinPhi, centerX, centerY, out2) => {\n  x *= rx;\n  y *= ry;\n  const xp = cosPhi * x - sinPhi * y;\n  const yp = sinPhi * x + cosPhi * y;\n  out2.x = xp + centerX;\n  out2.y = yp + centerY;\n  return out2;\n};\nfunction approxUnitArc(ang1, ang2) {\n  const a1 = ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n  const a = ang2 === 1.5707963267948966 ? 0.551915024494 : a1;\n  const x1 = Math.cos(ang1);\n  const y1 = Math.sin(ang1);\n  const x2 = Math.cos(ang1 + ang2);\n  const y2 = Math.sin(ang1 + ang2);\n  return [\n    {\n      x: x1 - y1 * a,\n      y: y1 + x1 * a\n    },\n    {\n      x: x2 + y2 * a,\n      y: y2 - x2 * a\n    },\n    {\n      x: x2,\n      y: y2\n    }\n  ];\n}\nconst vectorAngle = (ux, uy, vx, vy) => {\n  const sign = ux * vy - uy * vx < 0 ? -1 : 1;\n  let dot = ux * vx + uy * vy;\n  if (dot > 1) {\n    dot = 1;\n  }\n  if (dot < -1) {\n    dot = -1;\n  }\n  return sign * Math.acos(dot);\n};\nconst getArcCenter = (px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinPhi, cosPhi, pxp, pyp, out2) => {\n  const rxSq = Math.pow(rx, 2);\n  const rySq = Math.pow(ry, 2);\n  const pxpSq = Math.pow(pxp, 2);\n  const pypSq = Math.pow(pyp, 2);\n  let radicant = rxSq * rySq - rxSq * pypSq - rySq * pxpSq;\n  if (radicant < 0) {\n    radicant = 0;\n  }\n  radicant /= rxSq * pypSq + rySq * pxpSq;\n  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n  const centerXp = radicant * rx / ry * pyp;\n  const centerYp = radicant * -ry / rx * pxp;\n  const centerX = cosPhi * centerXp - sinPhi * centerYp + (px + cx) / 2;\n  const centerY = sinPhi * centerXp + cosPhi * centerYp + (py + cy) / 2;\n  const vx1 = (pxp - centerXp) / rx;\n  const vy1 = (pyp - centerYp) / ry;\n  const vx2 = (-pxp - centerXp) / rx;\n  const vy2 = (-pyp - centerYp) / ry;\n  const ang1 = vectorAngle(1, 0, vx1, vy1);\n  let ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n  if (sweepFlag === 0 && ang2 > 0) {\n    ang2 -= TAU;\n  }\n  if (sweepFlag === 1 && ang2 < 0) {\n    ang2 += TAU;\n  }\n  out2.centerX = centerX;\n  out2.centerY = centerY;\n  out2.ang1 = ang1;\n  out2.ang2 = ang2;\n};\nfunction buildArcToSvg(points, px, py, cx, cy, rx, ry, xAxisRotation = 0, largeArcFlag = 0, sweepFlag = 0) {\n  if (rx === 0 || ry === 0) {\n    return;\n  }\n  const sinPhi = Math.sin(xAxisRotation * TAU / 360);\n  const cosPhi = Math.cos(xAxisRotation * TAU / 360);\n  const pxp = cosPhi * (px - cx) / 2 + sinPhi * (py - cy) / 2;\n  const pyp = -sinPhi * (px - cx) / 2 + cosPhi * (py - cy) / 2;\n  if (pxp === 0 && pyp === 0) {\n    return;\n  }\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n  const lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n  getArcCenter(\n    px,\n    py,\n    cx,\n    cy,\n    rx,\n    ry,\n    largeArcFlag,\n    sweepFlag,\n    sinPhi,\n    cosPhi,\n    pxp,\n    pyp,\n    out\n  );\n  let { ang1, ang2 } = out;\n  const { centerX, centerY } = out;\n  let ratio = Math.abs(ang2) / (TAU / 4);\n  if (Math.abs(1 - ratio) < 1e-7) {\n    ratio = 1;\n  }\n  const segments = Math.max(Math.ceil(ratio), 1);\n  ang2 /= segments;\n  let lastX = points[points.length - 2];\n  let lastY = points[points.length - 1];\n  const outCurvePoint = { x: 0, y: 0 };\n  for (let i = 0; i < segments; i++) {\n    const curve = approxUnitArc(ang1, ang2);\n    const { x: x1, y: y1 } = mapToEllipse(curve[0], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    const { x: x2, y: y2 } = mapToEllipse(curve[1], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    const { x, y } = mapToEllipse(curve[2], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    buildAdaptiveBezier(\n      points,\n      lastX,\n      lastY,\n      x1,\n      y1,\n      x2,\n      y2,\n      x,\n      y\n    );\n    lastX = x;\n    lastY = y;\n    ang1 += ang2;\n  }\n}\n\nexport { buildArcToSvg };\n//# sourceMappingURL=buildArcToSvg.mjs.map\n","\"use strict\";\nfunction roundedShapeArc(g, points, radius) {\n  const vecFrom = (p, pp) => {\n    const x = pp.x - p.x;\n    const y = pp.y - p.y;\n    const len = Math.sqrt(x * x + y * y);\n    const nx = x / len;\n    const ny = y / len;\n    return { len, nx, ny };\n  };\n  const sharpCorner = (i, p) => {\n    if (i === 0) {\n      g.moveTo(p.x, p.y);\n    } else {\n      g.lineTo(p.x, p.y);\n    }\n  };\n  let p1 = points[points.length - 1];\n  for (let i = 0; i < points.length; i++) {\n    const p2 = points[i % points.length];\n    const pRadius = p2.radius ?? radius;\n    if (pRadius <= 0) {\n      sharpCorner(i, p2);\n      p1 = p2;\n      continue;\n    }\n    const p3 = points[(i + 1) % points.length];\n    const v1 = vecFrom(p2, p1);\n    const v2 = vecFrom(p2, p3);\n    if (v1.len < 1e-4 || v2.len < 1e-4) {\n      sharpCorner(i, p2);\n      p1 = p2;\n      continue;\n    }\n    let angle = Math.asin(v1.nx * v2.ny - v1.ny * v2.nx);\n    let radDirection = 1;\n    let drawDirection = false;\n    if (v1.nx * v2.nx - v1.ny * -v2.ny < 0) {\n      if (angle < 0) {\n        angle = Math.PI + angle;\n      } else {\n        angle = Math.PI - angle;\n        radDirection = -1;\n        drawDirection = true;\n      }\n    } else if (angle > 0) {\n      radDirection = -1;\n      drawDirection = true;\n    }\n    const halfAngle = angle / 2;\n    let cRadius;\n    let lenOut = Math.abs(\n      Math.cos(halfAngle) * pRadius / Math.sin(halfAngle)\n    );\n    if (lenOut > Math.min(v1.len / 2, v2.len / 2)) {\n      lenOut = Math.min(v1.len / 2, v2.len / 2);\n      cRadius = Math.abs(lenOut * Math.sin(halfAngle) / Math.cos(halfAngle));\n    } else {\n      cRadius = pRadius;\n    }\n    const cX = p2.x + v2.nx * lenOut + -v2.ny * cRadius * radDirection;\n    const cY = p2.y + v2.ny * lenOut + v2.nx * cRadius * radDirection;\n    const startAngle = Math.atan2(v1.ny, v1.nx) + Math.PI / 2 * radDirection;\n    const endAngle = Math.atan2(v2.ny, v2.nx) - Math.PI / 2 * radDirection;\n    if (i === 0) {\n      g.moveTo(\n        cX + Math.cos(startAngle) * cRadius,\n        cY + Math.sin(startAngle) * cRadius\n      );\n    }\n    g.arc(cX, cY, cRadius, startAngle, endAngle, drawDirection);\n    p1 = p2;\n  }\n}\nfunction roundedShapeQuadraticCurve(g, points, radius, smoothness) {\n  const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\n  const pointLerp = (p1, p2, t) => ({\n    x: p1.x + (p2.x - p1.x) * t,\n    y: p1.y + (p2.y - p1.y) * t\n  });\n  const numPoints = points.length;\n  for (let i = 0; i < numPoints; i++) {\n    const thisPoint = points[(i + 1) % numPoints];\n    const pRadius = thisPoint.radius ?? radius;\n    if (pRadius <= 0) {\n      if (i === 0) {\n        g.moveTo(thisPoint.x, thisPoint.y);\n      } else {\n        g.lineTo(thisPoint.x, thisPoint.y);\n      }\n      continue;\n    }\n    const lastPoint = points[i];\n    const nextPoint = points[(i + 2) % numPoints];\n    const lastEdgeLength = distance(lastPoint, thisPoint);\n    let start;\n    if (lastEdgeLength < 1e-4) {\n      start = thisPoint;\n    } else {\n      const lastOffsetDistance = Math.min(lastEdgeLength / 2, pRadius);\n      start = pointLerp(\n        thisPoint,\n        lastPoint,\n        lastOffsetDistance / lastEdgeLength\n      );\n    }\n    const nextEdgeLength = distance(nextPoint, thisPoint);\n    let end;\n    if (nextEdgeLength < 1e-4) {\n      end = thisPoint;\n    } else {\n      const nextOffsetDistance = Math.min(nextEdgeLength / 2, pRadius);\n      end = pointLerp(\n        thisPoint,\n        nextPoint,\n        nextOffsetDistance / nextEdgeLength\n      );\n    }\n    if (i === 0) {\n      g.moveTo(start.x, start.y);\n    } else {\n      g.lineTo(start.x, start.y);\n    }\n    g.quadraticCurveTo(thisPoint.x, thisPoint.y, end.x, end.y, smoothness);\n  }\n}\n\nexport { roundedShapeArc, roundedShapeQuadraticCurve };\n//# sourceMappingURL=roundShape.mjs.map\n","import { Circle } from '../../../../maths/shapes/Circle.mjs';\nimport { Ellipse } from '../../../../maths/shapes/Ellipse.mjs';\nimport { Polygon } from '../../../../maths/shapes/Polygon.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { RoundedRectangle } from '../../../../maths/shapes/RoundedRectangle.mjs';\nimport { Bounds } from '../../../container/bounds/Bounds.mjs';\nimport { buildAdaptiveBezier } from '../buildCommands/buildAdaptiveBezier.mjs';\nimport { buildAdaptiveQuadratic } from '../buildCommands/buildAdaptiveQuadratic.mjs';\nimport { buildArc } from '../buildCommands/buildArc.mjs';\nimport { buildArcTo } from '../buildCommands/buildArcTo.mjs';\nimport { buildArcToSvg } from '../buildCommands/buildArcToSvg.mjs';\nimport { roundedShapeQuadraticCurve, roundedShapeArc } from './roundShape.mjs';\n\n\"use strict\";\nconst tempRectangle = new Rectangle();\nclass ShapePath {\n  constructor(graphicsPath2D) {\n    /** The list of shape primitives that make up the path. */\n    this.shapePrimitives = [];\n    this._currentPoly = null;\n    this._bounds = new Bounds();\n    this._graphicsPath2D = graphicsPath2D;\n    this.signed = graphicsPath2D.checkForHoles;\n  }\n  /**\n   * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n   * @param x - The x-coordinate for the starting point.\n   * @param y - The y-coordinate for the starting point.\n   * @returns The instance of the current object for chaining.\n   */\n  moveTo(x, y) {\n    this.startPoly(x, y);\n    return this;\n  }\n  /**\n   * Connects the current point to a new point with a straight line. This method updates the current path.\n   * @param x - The x-coordinate of the new point to connect to.\n   * @param y - The y-coordinate of the new point to connect to.\n   * @returns The instance of the current object for chaining.\n   */\n  lineTo(x, y) {\n    this._ensurePoly();\n    const points = this._currentPoly.points;\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n    if (fromX !== x || fromY !== y) {\n      points.push(x, y);\n    }\n    return this;\n  }\n  /**\n   * Adds an arc to the path. The arc is centered at (x, y)\n   *  position with radius `radius` starting at `startAngle` and ending at `endAngle`.\n   * @param x - The x-coordinate of the arc's center.\n   * @param y - The y-coordinate of the arc's center.\n   * @param radius - The radius of the arc.\n   * @param startAngle - The starting angle of the arc, in radians.\n   * @param endAngle - The ending angle of the arc, in radians.\n   * @param counterclockwise - Specifies whether the arc should be drawn in the anticlockwise direction. False by default.\n   * @returns The instance of the current object for chaining.\n   */\n  arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n    this._ensurePoly(false);\n    const points = this._currentPoly.points;\n    buildArc(points, x, y, radius, startAngle, endAngle, counterclockwise);\n    return this;\n  }\n  /**\n   * Adds an arc to the path with the arc tangent to the line joining two specified points.\n   * The arc radius is specified by `radius`.\n   * @param x1 - The x-coordinate of the first point.\n   * @param y1 - The y-coordinate of the first point.\n   * @param x2 - The x-coordinate of the second point.\n   * @param y2 - The y-coordinate of the second point.\n   * @param radius - The radius of the arc.\n   * @returns The instance of the current object for chaining.\n   */\n  arcTo(x1, y1, x2, y2, radius) {\n    this._ensurePoly();\n    const points = this._currentPoly.points;\n    buildArcTo(points, x1, y1, x2, y2, radius);\n    return this;\n  }\n  /**\n   * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n   * @param rx - The x-radius of the ellipse.\n   * @param ry - The y-radius of the ellipse.\n   * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n   * to the x-axis of the coordinate system, in degrees.\n   * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n   * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n   * @param x - The x-coordinate of the arc's end point.\n   * @param y - The y-coordinate of the arc's end point.\n   * @returns The instance of the current object for chaining.\n   */\n  arcToSvg(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y) {\n    const points = this._currentPoly.points;\n    buildArcToSvg(\n      points,\n      this._currentPoly.lastX,\n      this._currentPoly.lastY,\n      x,\n      y,\n      rx,\n      ry,\n      xAxisRotation,\n      largeArcFlag,\n      sweepFlag\n    );\n    return this;\n  }\n  /**\n   * Adds a cubic Bezier curve to the path.\n   * It requires three points: the first two are control points and the third one is the end point.\n   * The starting point is the last point in the current path.\n   * @param cp1x - The x-coordinate of the first control point.\n   * @param cp1y - The y-coordinate of the first control point.\n   * @param cp2x - The x-coordinate of the second control point.\n   * @param cp2y - The y-coordinate of the second control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y, smoothness) {\n    this._ensurePoly();\n    const currentPoly = this._currentPoly;\n    buildAdaptiveBezier(\n      this._currentPoly.points,\n      currentPoly.lastX,\n      currentPoly.lastY,\n      cp1x,\n      cp1y,\n      cp2x,\n      cp2y,\n      x,\n      y,\n      smoothness\n    );\n    return this;\n  }\n  /**\n   * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n   * The starting point is the last point in the current path.\n   * @param cp1x - The x-coordinate of the control point.\n   * @param cp1y - The y-coordinate of the control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothing - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  quadraticCurveTo(cp1x, cp1y, x, y, smoothing) {\n    this._ensurePoly();\n    const currentPoly = this._currentPoly;\n    buildAdaptiveQuadratic(\n      this._currentPoly.points,\n      currentPoly.lastX,\n      currentPoly.lastY,\n      cp1x,\n      cp1y,\n      x,\n      y,\n      smoothing\n    );\n    return this;\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    this.endPoly(true);\n    return this;\n  }\n  /**\n   * Adds another path to the current path. This method allows for the combination of multiple paths into one.\n   * @param path - The `GraphicsPath` object representing the path to add.\n   * @param transform - An optional `Matrix` object to apply a transformation to the path before adding it.\n   * @returns The instance of the current object for chaining.\n   */\n  addPath(path, transform) {\n    this.endPoly();\n    if (transform && !transform.isIdentity()) {\n      path = path.clone(true);\n      path.transform(transform);\n    }\n    const shapePrimitives = this.shapePrimitives;\n    const start = shapePrimitives.length;\n    for (let i = 0; i < path.instructions.length; i++) {\n      const instruction = path.instructions[i];\n      this[instruction.action](...instruction.data);\n    }\n    if (path.checkForHoles && shapePrimitives.length - start > 1) {\n      let mainShape = null;\n      for (let i = start; i < shapePrimitives.length; i++) {\n        const shapePrimitive = shapePrimitives[i];\n        if (shapePrimitive.shape.type === \"polygon\") {\n          const polygon = shapePrimitive.shape;\n          const mainPolygon = mainShape?.shape;\n          if (mainPolygon && mainPolygon.containsPolygon(polygon)) {\n            mainShape.holes || (mainShape.holes = []);\n            mainShape.holes.push(shapePrimitive);\n            shapePrimitives.copyWithin(i, i + 1);\n            shapePrimitives.length--;\n            i--;\n          } else {\n            mainShape = shapePrimitive;\n          }\n        }\n      }\n    }\n    return this;\n  }\n  /**\n   * Finalizes the drawing of the current path. Optionally, it can close the path.\n   * @param closePath - A boolean indicating whether to close the path after finishing. False by default.\n   */\n  finish(closePath = false) {\n    this.endPoly(closePath);\n  }\n  /**\n   * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  rect(x, y, w, h, transform) {\n    this.drawShape(new Rectangle(x, y, w, h), transform);\n    return this;\n  }\n  /**\n   * Draws a circle shape. This method adds a new circle path to the current drawing.\n   * @param x - The x-coordinate of the center of the circle.\n   * @param y - The y-coordinate of the center of the circle.\n   * @param radius - The radius of the circle.\n   * @param transform - An optional `Matrix` object to apply a transformation to the circle.\n   * @returns The instance of the current object for chaining.\n   */\n  circle(x, y, radius, transform) {\n    this.drawShape(new Circle(x, y, radius), transform);\n    return this;\n  }\n  /**\n   * Draws a polygon shape. This method allows for the creation of complex polygons by specifying a sequence of points.\n   * @param points - An array of numbers, or or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n   * representing the x and y coordinates of the polygon's vertices, in sequence.\n   * @param close - A boolean indicating whether to close the polygon path. True by default.\n   * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  poly(points, close, transform) {\n    const polygon = new Polygon(points);\n    polygon.closePath = close;\n    this.drawShape(polygon, transform);\n    return this;\n  }\n  /**\n   * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  regularPoly(x, y, radius, sides, rotation = 0, transform) {\n    sides = Math.max(sides | 0, 3);\n    const startAngle = -1 * Math.PI / 2 + rotation;\n    const delta = Math.PI * 2 / sides;\n    const polygon = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = startAngle - i * delta;\n      polygon.push(\n        x + radius * Math.cos(angle),\n        y + radius * Math.sin(angle)\n      );\n    }\n    this.poly(polygon, true, transform);\n    return this;\n  }\n  /**\n   * Draws a polygon with rounded corners.\n   * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param corner - The radius of the rounding of the corners.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @param smoothness - Optional parameter to adjust the smoothness of the rounding.\n   * @returns The instance of the current object for chaining.\n   */\n  roundPoly(x, y, radius, sides, corner, rotation = 0, smoothness) {\n    sides = Math.max(sides | 0, 3);\n    if (corner <= 0) {\n      return this.regularPoly(x, y, radius, sides, rotation);\n    }\n    const sideLength = radius * Math.sin(Math.PI / sides) - 1e-3;\n    corner = Math.min(corner, sideLength);\n    const startAngle = -1 * Math.PI / 2 + rotation;\n    const delta = Math.PI * 2 / sides;\n    const internalAngle = (sides - 2) * Math.PI / sides / 2;\n    for (let i = 0; i < sides; i++) {\n      const angle = i * delta + startAngle;\n      const x0 = x + radius * Math.cos(angle);\n      const y0 = y + radius * Math.sin(angle);\n      const a1 = angle + Math.PI + internalAngle;\n      const a2 = angle - Math.PI - internalAngle;\n      const x1 = x0 + corner * Math.cos(a1);\n      const y1 = y0 + corner * Math.sin(a1);\n      const x3 = x0 + corner * Math.cos(a2);\n      const y3 = y0 + corner * Math.sin(a2);\n      if (i === 0) {\n        this.moveTo(x1, y1);\n      } else {\n        this.lineTo(x1, y1);\n      }\n      this.quadraticCurveTo(x0, y0, x3, y3, smoothness);\n    }\n    return this.closePath();\n  }\n  /**\n   * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n   * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n   * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n   * A minimum of 3 points is required.\n   * @param radius - The default radius for the corners.\n   * This radius is applied to all corners unless overridden in `points`.\n   * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n   *  method instead of an arc method. Defaults to false.\n   * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n   * Higher values make the curve smoother.\n   * @returns The instance of the current object for chaining.\n   */\n  roundShape(points, radius, useQuadratic = false, smoothness) {\n    if (points.length < 3) {\n      return this;\n    }\n    if (useQuadratic) {\n      roundedShapeQuadraticCurve(this, points, radius, smoothness);\n    } else {\n      roundedShapeArc(this, points, radius);\n    }\n    return this.closePath();\n  }\n  /**\n   * Draw Rectangle with fillet corners. This is much like rounded rectangle\n   * however it support negative numbers as well for the corner radius.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param fillet - accept negative or positive values\n   */\n  filletRect(x, y, width, height, fillet) {\n    if (fillet === 0) {\n      return this.rect(x, y, width, height);\n    }\n    const maxFillet = Math.min(width, height) / 2;\n    const inset = Math.min(maxFillet, Math.max(-maxFillet, fillet));\n    const right = x + width;\n    const bottom = y + height;\n    const dir = inset < 0 ? -inset : 0;\n    const size = Math.abs(inset);\n    return this.moveTo(x, y + size).arcTo(x + dir, y + dir, x + size, y, size).lineTo(right - size, y).arcTo(right - dir, y + dir, right, y + size, size).lineTo(right, bottom - size).arcTo(right - dir, bottom - dir, x + width - size, bottom, size).lineTo(x + size, bottom).arcTo(x + dir, bottom - dir, x, bottom - size, size).closePath();\n  }\n  /**\n   * Draw Rectangle with chamfer corners. These are angled corners.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param chamfer - non-zero real number, size of corner cutout\n   * @param transform\n   */\n  chamferRect(x, y, width, height, chamfer, transform) {\n    if (chamfer <= 0) {\n      return this.rect(x, y, width, height);\n    }\n    const inset = Math.min(chamfer, Math.min(width, height) / 2);\n    const right = x + width;\n    const bottom = y + height;\n    const points = [\n      x + inset,\n      y,\n      right - inset,\n      y,\n      right,\n      y + inset,\n      right,\n      bottom - inset,\n      right - inset,\n      bottom,\n      x + inset,\n      bottom,\n      x,\n      bottom - inset,\n      x,\n      y + inset\n    ];\n    for (let i = points.length - 1; i >= 2; i -= 2) {\n      if (points[i] === points[i - 2] && points[i - 1] === points[i - 3]) {\n        points.splice(i - 1, 2);\n      }\n    }\n    return this.poly(points, true, transform);\n  }\n  /**\n   * Draws an ellipse at the specified location and with the given x and y radii.\n   * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n   * @param x - The x-coordinate of the center of the ellipse.\n   * @param y - The y-coordinate of the center of the ellipse.\n   * @param radiusX - The horizontal radius of the ellipse.\n   * @param radiusY - The vertical radius of the ellipse.\n   * @param transform - An optional `Matrix` object to apply a transformation to the ellipse. This can include rotations.\n   * @returns The instance of the current object for chaining.\n   */\n  ellipse(x, y, radiusX, radiusY, transform) {\n    this.drawShape(new Ellipse(x, y, radiusX, radiusY), transform);\n    return this;\n  }\n  /**\n   * Draws a rectangle with rounded corners.\n   * The corner radius can be specified to determine how rounded the corners should be.\n   * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n   * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  roundRect(x, y, w, h, radius, transform) {\n    this.drawShape(new RoundedRectangle(x, y, w, h, radius), transform);\n    return this;\n  }\n  /**\n   * Draws a given shape on the canvas.\n   * This is a generic method that can draw any type of shape specified by the `ShapePrimitive` parameter.\n   * An optional transformation matrix can be applied to the shape, allowing for complex transformations.\n   * @param shape - The shape to draw, defined as a `ShapePrimitive` object.\n   * @param matrix - An optional `Matrix` for transforming the shape. This can include rotations,\n   * scaling, and translations.\n   * @returns The instance of the current object for chaining.\n   */\n  drawShape(shape, matrix) {\n    this.endPoly();\n    this.shapePrimitives.push({ shape, transform: matrix });\n    return this;\n  }\n  /**\n   * Starts a new polygon path from the specified starting point.\n   * This method initializes a new polygon or ends the current one if it exists.\n   * @param x - The x-coordinate of the starting point of the new polygon.\n   * @param y - The y-coordinate of the starting point of the new polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  startPoly(x, y) {\n    let currentPoly = this._currentPoly;\n    if (currentPoly) {\n      this.endPoly();\n    }\n    currentPoly = new Polygon();\n    currentPoly.points.push(x, y);\n    this._currentPoly = currentPoly;\n    return this;\n  }\n  /**\n   * Ends the current polygon path. If `closePath` is set to true,\n   * the path is closed by connecting the last point to the first one.\n   * This method finalizes the current polygon and prepares it for drawing or adding to the shape primitives.\n   * @param closePath - A boolean indicating whether to close the polygon by connecting the last point\n   *  back to the starting point. False by default.\n   * @returns The instance of the current object for chaining.\n   */\n  endPoly(closePath = false) {\n    const shape = this._currentPoly;\n    if (shape && shape.points.length > 2) {\n      shape.closePath = closePath;\n      this.shapePrimitives.push({ shape });\n    }\n    this._currentPoly = null;\n    return this;\n  }\n  _ensurePoly(start = true) {\n    if (this._currentPoly)\n      return;\n    this._currentPoly = new Polygon();\n    if (start) {\n      const lastShape = this.shapePrimitives[this.shapePrimitives.length - 1];\n      if (lastShape) {\n        let lx = lastShape.shape.x;\n        let ly = lastShape.shape.y;\n        if (lastShape.transform && !lastShape.transform.isIdentity()) {\n          const t = lastShape.transform;\n          const tempX = lx;\n          lx = t.a * lx + t.c * ly + t.tx;\n          ly = t.b * tempX + t.d * ly + t.ty;\n        }\n        this._currentPoly.points.push(lx, ly);\n      } else {\n        this._currentPoly.points.push(0, 0);\n      }\n    }\n  }\n  /** Builds the path. */\n  buildPath() {\n    const path = this._graphicsPath2D;\n    this.shapePrimitives.length = 0;\n    this._currentPoly = null;\n    for (let i = 0; i < path.instructions.length; i++) {\n      const instruction = path.instructions[i];\n      this[instruction.action](...instruction.data);\n    }\n    this.finish();\n  }\n  /** Gets the bounds of the path. */\n  get bounds() {\n    const bounds = this._bounds;\n    bounds.clear();\n    const shapePrimitives = this.shapePrimitives;\n    for (let i = 0; i < shapePrimitives.length; i++) {\n      const shapePrimitive = shapePrimitives[i];\n      const boundsRect = shapePrimitive.shape.getBounds(tempRectangle);\n      if (shapePrimitive.transform) {\n        bounds.addRect(boundsRect, shapePrimitive.transform);\n      } else {\n        bounds.addRect(boundsRect);\n      }\n    }\n    return bounds;\n  }\n}\n\nexport { ShapePath };\n//# sourceMappingURL=ShapePath.mjs.map\n","import { Point } from '../../../../maths/point/Point.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { parseSVGPath } from '../svg/parseSVGPath.mjs';\nimport { ShapePath } from './ShapePath.mjs';\n\n\"use strict\";\nclass GraphicsPath {\n  /**\n   * Creates a `GraphicsPath` instance optionally from an SVG path string or an array of `PathInstruction`.\n   * @param instructions - An SVG path string or an array of `PathInstruction` objects.\n   * @param signed\n   */\n  constructor(instructions, signed = false) {\n    this.instructions = [];\n    /** unique id for this graphics path */\n    this.uid = uid(\"graphicsPath\");\n    this._dirty = true;\n    this.checkForHoles = signed;\n    if (typeof instructions === \"string\") {\n      parseSVGPath(instructions, this);\n    } else {\n      this.instructions = instructions?.slice() ?? [];\n    }\n  }\n  /**\n   * Provides access to the internal shape path, ensuring it is up-to-date with the current instructions.\n   * @returns The `ShapePath` instance associated with this `GraphicsPath`.\n   */\n  get shapePath() {\n    if (!this._shapePath) {\n      this._shapePath = new ShapePath(this);\n    }\n    if (this._dirty) {\n      this._dirty = false;\n      this._shapePath.buildPath();\n    }\n    return this._shapePath;\n  }\n  /**\n   * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n   * @param path - The `GraphicsPath` to add.\n   * @param transform - An optional transformation to apply to the added path.\n   * @returns The instance of the current object for chaining.\n   */\n  addPath(path, transform) {\n    path = path.clone();\n    this.instructions.push({ action: \"addPath\", data: [path, transform] });\n    this._dirty = true;\n    return this;\n  }\n  arc(...args) {\n    this.instructions.push({ action: \"arc\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  arcTo(...args) {\n    this.instructions.push({ action: \"arcTo\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  arcToSvg(...args) {\n    this.instructions.push({ action: \"arcToSvg\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  bezierCurveTo(...args) {\n    this.instructions.push({ action: \"bezierCurveTo\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Adds a cubic Bezier curve to the path.\n   * It requires two points: the second control point and the end point. The first control point is assumed to be\n   * The starting point is the last point in the current path.\n   * @param cp2x - The x-coordinate of the second control point.\n   * @param cp2y - The y-coordinate of the second control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  bezierCurveToShort(cp2x, cp2y, x, y, smoothness) {\n    const last = this.instructions[this.instructions.length - 1];\n    const lastPoint = this.getLastPoint(Point.shared);\n    let cp1x = 0;\n    let cp1y = 0;\n    if (!last || last.action !== \"bezierCurveTo\") {\n      cp1x = lastPoint.x;\n      cp1y = lastPoint.y;\n    } else {\n      cp1x = last.data[2];\n      cp1y = last.data[3];\n      const currentX = lastPoint.x;\n      const currentY = lastPoint.y;\n      cp1x = currentX + (currentX - cp1x);\n      cp1y = currentY + (currentY - cp1y);\n    }\n    this.instructions.push({ action: \"bezierCurveTo\", data: [cp1x, cp1y, cp2x, cp2y, x, y, smoothness] });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    this.instructions.push({ action: \"closePath\", data: [] });\n    this._dirty = true;\n    return this;\n  }\n  ellipse(...args) {\n    this.instructions.push({ action: \"ellipse\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  lineTo(...args) {\n    this.instructions.push({ action: \"lineTo\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  moveTo(...args) {\n    this.instructions.push({ action: \"moveTo\", data: args });\n    return this;\n  }\n  quadraticCurveTo(...args) {\n    this.instructions.push({ action: \"quadraticCurveTo\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Adds a quadratic curve to the path. It uses the previous point as the control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  quadraticCurveToShort(x, y, smoothness) {\n    const last = this.instructions[this.instructions.length - 1];\n    const lastPoint = this.getLastPoint(Point.shared);\n    let cpx1 = 0;\n    let cpy1 = 0;\n    if (!last || last.action !== \"quadraticCurveTo\") {\n      cpx1 = lastPoint.x;\n      cpy1 = lastPoint.y;\n    } else {\n      cpx1 = last.data[0];\n      cpy1 = last.data[1];\n      const currentX = lastPoint.x;\n      const currentY = lastPoint.y;\n      cpx1 = currentX + (currentX - cpx1);\n      cpy1 = currentY + (currentY - cpy1);\n    }\n    this.instructions.push({ action: \"quadraticCurveTo\", data: [cpx1, cpy1, x, y, smoothness] });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  rect(x, y, w, h, transform) {\n    this.instructions.push({ action: \"rect\", data: [x, y, w, h, transform] });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Draws a circle shape. This method adds a new circle path to the current drawing.\n   * @param x - The x-coordinate of the center of the circle.\n   * @param y - The y-coordinate of the center of the circle.\n   * @param radius - The radius of the circle.\n   * @param transform - An optional `Matrix` object to apply a transformation to the circle.\n   * @returns The instance of the current object for chaining.\n   */\n  circle(x, y, radius, transform) {\n    this.instructions.push({ action: \"circle\", data: [x, y, radius, transform] });\n    this._dirty = true;\n    return this;\n  }\n  roundRect(...args) {\n    this.instructions.push({ action: \"roundRect\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  poly(...args) {\n    this.instructions.push({ action: \"poly\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  regularPoly(...args) {\n    this.instructions.push({ action: \"regularPoly\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  roundPoly(...args) {\n    this.instructions.push({ action: \"roundPoly\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  roundShape(...args) {\n    this.instructions.push({ action: \"roundShape\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  filletRect(...args) {\n    this.instructions.push({ action: \"filletRect\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  chamferRect(...args) {\n    this.instructions.push({ action: \"chamferRect\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Draws a star shape centered at a specified location. This method allows for the creation\n   *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n   * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n   * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n   * @param x - The x-coordinate of the center of the star.\n   * @param y - The y-coordinate of the center of the star.\n   * @param points - The number of points of the star.\n   * @param radius - The outer radius of the star (distance from the center to the outer points).\n   * @param innerRadius - Optional. The inner radius of the star\n   * (distance from the center to the inner points between the outer points).\n   * If not provided, defaults to half of the `radius`.\n   * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n   * Defaults to 0, meaning one point is directly upward.\n   * @param transform - An optional `Matrix` object to apply a transformation to the star.\n   * This can include rotations, scaling, and translations.\n   * @returns The instance of the current object for chaining further drawing commands.\n   */\n  // eslint-disable-next-line max-len\n  star(x, y, points, radius, innerRadius, rotation, transform) {\n    innerRadius || (innerRadius = radius / 2);\n    const startAngle = -1 * Math.PI / 2 + rotation;\n    const len = points * 2;\n    const delta = Math.PI * 2 / len;\n    const polygon = [];\n    for (let i = 0; i < len; i++) {\n      const r = i % 2 ? innerRadius : radius;\n      const angle = i * delta + startAngle;\n      polygon.push(\n        x + r * Math.cos(angle),\n        y + r * Math.sin(angle)\n      );\n    }\n    this.poly(polygon, true, transform);\n    return this;\n  }\n  /**\n   * Creates a copy of the current `GraphicsPath` instance. This method supports both shallow and deep cloning.\n   * A shallow clone copies the reference of the instructions array, while a deep clone creates a new array and\n   * copies each instruction individually, ensuring that modifications to the instructions of the cloned `GraphicsPath`\n   * do not affect the original `GraphicsPath` and vice versa.\n   * @param deep - A boolean flag indicating whether the clone should be deep.\n   * @returns A new `GraphicsPath` instance that is a clone of the current instance.\n   */\n  clone(deep = false) {\n    const newGraphicsPath2D = new GraphicsPath();\n    newGraphicsPath2D.checkForHoles = this.checkForHoles;\n    if (!deep) {\n      newGraphicsPath2D.instructions = this.instructions.slice();\n    } else {\n      for (let i = 0; i < this.instructions.length; i++) {\n        const instruction = this.instructions[i];\n        newGraphicsPath2D.instructions.push({ action: instruction.action, data: instruction.data.slice() });\n      }\n    }\n    return newGraphicsPath2D;\n  }\n  clear() {\n    this.instructions.length = 0;\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Applies a transformation matrix to all drawing instructions within the `GraphicsPath`.\n   * This method enables the modification of the path's geometry according to the provided\n   * transformation matrix, which can include translations, rotations, scaling, and skewing.\n   *\n   * Each drawing instruction in the path is updated to reflect the transformation,\n   * ensuring the visual representation of the path is consistent with the applied matrix.\n   *\n   * Note: The transformation is applied directly to the coordinates and control points of the drawing instructions,\n   * not to the path as a whole. This means the transformation's effects are baked into the individual instructions,\n   * allowing for fine-grained control over the path's appearance.\n   * @param matrix - A `Matrix` object representing the transformation to apply.\n   * @returns The instance of the current object for chaining further operations.\n   */\n  transform(matrix) {\n    if (matrix.isIdentity())\n      return this;\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    let x = 0;\n    let y = 0;\n    let cpx1 = 0;\n    let cpy1 = 0;\n    let cpx2 = 0;\n    let cpy2 = 0;\n    let rx = 0;\n    let ry = 0;\n    for (let i = 0; i < this.instructions.length; i++) {\n      const instruction = this.instructions[i];\n      const data = instruction.data;\n      switch (instruction.action) {\n        case \"moveTo\":\n        case \"lineTo\":\n          x = data[0];\n          y = data[1];\n          data[0] = a * x + c * y + tx;\n          data[1] = b * x + d * y + ty;\n          break;\n        case \"bezierCurveTo\":\n          cpx1 = data[0];\n          cpy1 = data[1];\n          cpx2 = data[2];\n          cpy2 = data[3];\n          x = data[4];\n          y = data[5];\n          data[0] = a * cpx1 + c * cpy1 + tx;\n          data[1] = b * cpx1 + d * cpy1 + ty;\n          data[2] = a * cpx2 + c * cpy2 + tx;\n          data[3] = b * cpx2 + d * cpy2 + ty;\n          data[4] = a * x + c * y + tx;\n          data[5] = b * x + d * y + ty;\n          break;\n        case \"quadraticCurveTo\":\n          cpx1 = data[0];\n          cpy1 = data[1];\n          x = data[2];\n          y = data[3];\n          data[0] = a * cpx1 + c * cpy1 + tx;\n          data[1] = b * cpx1 + d * cpy1 + ty;\n          data[2] = a * x + c * y + tx;\n          data[3] = b * x + d * y + ty;\n          break;\n        case \"arcToSvg\":\n          x = data[5];\n          y = data[6];\n          rx = data[0];\n          ry = data[1];\n          data[0] = a * rx + c * ry;\n          data[1] = b * rx + d * ry;\n          data[5] = a * x + c * y + tx;\n          data[6] = b * x + d * y + ty;\n          break;\n        case \"circle\":\n          data[4] = adjustTransform(data[3], matrix);\n          break;\n        case \"rect\":\n          data[4] = adjustTransform(data[4], matrix);\n          break;\n        case \"ellipse\":\n          data[8] = adjustTransform(data[8], matrix);\n          break;\n        case \"roundRect\":\n          data[5] = adjustTransform(data[5], matrix);\n          break;\n        case \"addPath\":\n          data[0].transform(matrix);\n          break;\n        case \"poly\":\n          data[2] = adjustTransform(data[2], matrix);\n          break;\n        default:\n          warn(\"unknown transform action\", instruction.action);\n          break;\n      }\n    }\n    this._dirty = true;\n    return this;\n  }\n  get bounds() {\n    return this.shapePath.bounds;\n  }\n  /**\n   * Retrieves the last point from the current drawing instructions in the `GraphicsPath`.\n   * This method is useful for operations that depend on the path's current endpoint,\n   * such as connecting subsequent shapes or paths. It supports various drawing instructions,\n   * ensuring the last point's position is accurately determined regardless of the path's complexity.\n   *\n   * If the last instruction is a `closePath`, the method iterates backward through the instructions\n   *  until it finds an actionable instruction that defines a point (e.g., `moveTo`, `lineTo`,\n   * `quadraticCurveTo`, etc.). For compound paths added via `addPath`, it recursively retrieves\n   * the last point from the nested path.\n   * @param out - A `Point` object where the last point's coordinates will be stored.\n   * This object is modified directly to contain the result.\n   * @returns The `Point` object containing the last point's coordinates.\n   */\n  getLastPoint(out) {\n    let index = this.instructions.length - 1;\n    let lastInstruction = this.instructions[index];\n    if (!lastInstruction) {\n      out.x = 0;\n      out.y = 0;\n      return out;\n    }\n    while (lastInstruction.action === \"closePath\") {\n      index--;\n      if (index < 0) {\n        out.x = 0;\n        out.y = 0;\n        return out;\n      }\n      lastInstruction = this.instructions[index];\n    }\n    switch (lastInstruction.action) {\n      case \"moveTo\":\n      case \"lineTo\":\n        out.x = lastInstruction.data[0];\n        out.y = lastInstruction.data[1];\n        break;\n      case \"quadraticCurveTo\":\n        out.x = lastInstruction.data[2];\n        out.y = lastInstruction.data[3];\n        break;\n      case \"bezierCurveTo\":\n        out.x = lastInstruction.data[4];\n        out.y = lastInstruction.data[5];\n        break;\n      case \"arc\":\n      case \"arcToSvg\":\n        out.x = lastInstruction.data[5];\n        out.y = lastInstruction.data[6];\n        break;\n      case \"addPath\":\n        lastInstruction.data[0].getLastPoint(out);\n        break;\n    }\n    return out;\n  }\n}\nfunction adjustTransform(currentMatrix, transform) {\n  if (currentMatrix) {\n    return currentMatrix.prepend(transform);\n  }\n  return transform.clone();\n}\n\nexport { GraphicsPath };\n//# sourceMappingURL=GraphicsPath.mjs.map\n","\"use strict\";\nfunction parseSVGFloatAttribute(svg, id, defaultValue) {\n  const value = svg.getAttribute(id);\n  return value ? Number(value) : defaultValue;\n}\n\nexport { parseSVGFloatAttribute };\n//# sourceMappingURL=parseSVGFloatAttribute.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { FillGradient } from '../fill/FillGradient.mjs';\nimport { parseSVGFloatAttribute } from './parseSVGFloatAttribute.mjs';\n\n\"use strict\";\nfunction parseSVGDefinitions(svg, session) {\n  const definitions = svg.querySelectorAll(\"defs\");\n  for (let i = 0; i < definitions.length; i++) {\n    const definition = definitions[i];\n    for (let j = 0; j < definition.children.length; j++) {\n      const child = definition.children[j];\n      switch (child.nodeName.toLowerCase()) {\n        case \"lineargradient\":\n          session.defs[child.id] = parseLinearGradient(child);\n          break;\n        case \"radialgradient\":\n          session.defs[child.id] = parseRadialGradient(child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n}\nfunction parseLinearGradient(child) {\n  const x0 = parseSVGFloatAttribute(child, \"x1\", 0);\n  const y0 = parseSVGFloatAttribute(child, \"y1\", 0);\n  const x1 = parseSVGFloatAttribute(child, \"x2\", 1);\n  const y1 = parseSVGFloatAttribute(child, \"y2\", 0);\n  const gradientUnit = child.getAttribute(\"gradientUnits\") || \"objectBoundingBox\";\n  const gradient = new FillGradient(\n    x0,\n    y0,\n    x1,\n    y1,\n    gradientUnit === \"objectBoundingBox\" ? \"local\" : \"global\"\n  );\n  for (let k = 0; k < child.children.length; k++) {\n    const stop = child.children[k];\n    const offset = parseSVGFloatAttribute(stop, \"offset\", 0);\n    const color = Color.shared.setValue(stop.getAttribute(\"stop-color\")).toNumber();\n    gradient.addColorStop(offset, color);\n  }\n  return gradient;\n}\nfunction parseRadialGradient(_child) {\n  warn(\"[SVG Parser] Radial gradients are not yet supported\");\n  return new FillGradient(0, 0, 1, 0);\n}\n\nexport { parseSVGDefinitions };\n//# sourceMappingURL=parseSVGDefinitions.mjs.map\n","\"use strict\";\nfunction extractSvgUrlId(url) {\n  const match = url.match(/url\\s*\\(\\s*['\"]?\\s*#([^'\"\\s)]+)\\s*['\"]?\\s*\\)/i);\n  return match ? match[1] : \"\";\n}\n\nexport { extractSvgUrlId };\n//# sourceMappingURL=extractSvgUrlId.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { extractSvgUrlId } from './utils/extractSvgUrlId.mjs';\n\n\"use strict\";\nconst styleAttributes = {\n  // Fill properties\n  fill: { type: \"paint\", default: 0 },\n  // Fill color/gradient\n  \"fill-opacity\": { type: \"number\", default: 1 },\n  // Fill transparency\n  // Stroke properties\n  stroke: { type: \"paint\", default: 0 },\n  // Stroke color/gradient\n  \"stroke-width\": { type: \"number\", default: 1 },\n  // Width of stroke\n  \"stroke-opacity\": { type: \"number\", default: 1 },\n  // Stroke transparency\n  \"stroke-linecap\": { type: \"string\", default: \"butt\" },\n  // End cap style: butt, round, square\n  \"stroke-linejoin\": { type: \"string\", default: \"miter\" },\n  // Join style: miter, round, bevel\n  \"stroke-miterlimit\": { type: \"number\", default: 10 },\n  // Limit on miter join sharpness\n  \"stroke-dasharray\": { type: \"string\", default: \"none\" },\n  // Dash pattern\n  \"stroke-dashoffset\": { type: \"number\", default: 0 },\n  // Offset for dash pattern\n  // Global properties\n  opacity: { type: \"number\", default: 1 }\n  // Overall opacity\n};\nfunction parseSVGStyle(svg, session) {\n  const style = svg.getAttribute(\"style\");\n  const strokeStyle = {};\n  const fillStyle = {};\n  const result = {\n    strokeStyle,\n    fillStyle,\n    useFill: false,\n    useStroke: false\n  };\n  for (const key in styleAttributes) {\n    const attribute = svg.getAttribute(key);\n    if (attribute) {\n      parseAttribute(session, result, key, attribute.trim());\n    }\n  }\n  if (style) {\n    const styleParts = style.split(\";\");\n    for (let i = 0; i < styleParts.length; i++) {\n      const stylePart = styleParts[i].trim();\n      const [key, value] = stylePart.split(\":\");\n      if (styleAttributes[key]) {\n        parseAttribute(session, result, key, value.trim());\n      }\n    }\n  }\n  return {\n    strokeStyle: result.useStroke ? strokeStyle : null,\n    fillStyle: result.useFill ? fillStyle : null,\n    useFill: result.useFill,\n    useStroke: result.useStroke\n  };\n}\nfunction parseAttribute(session, result, id, value) {\n  switch (id) {\n    case \"stroke\":\n      if (value !== \"none\") {\n        if (value.startsWith(\"url(\")) {\n          const id2 = extractSvgUrlId(value);\n          result.strokeStyle.fill = session.defs[id2];\n        } else {\n          result.strokeStyle.color = Color.shared.setValue(value).toNumber();\n        }\n        result.useStroke = true;\n      }\n      break;\n    case \"stroke-width\":\n      result.strokeStyle.width = Number(value);\n      break;\n    case \"fill\":\n      if (value !== \"none\") {\n        if (value.startsWith(\"url(\")) {\n          const id2 = extractSvgUrlId(value);\n          result.fillStyle.fill = session.defs[id2];\n        } else {\n          result.fillStyle.color = Color.shared.setValue(value).toNumber();\n        }\n        result.useFill = true;\n      }\n      break;\n    case \"fill-opacity\":\n      result.fillStyle.alpha = Number(value);\n      break;\n    case \"stroke-opacity\":\n      result.strokeStyle.alpha = Number(value);\n      break;\n    case \"opacity\":\n      result.fillStyle.alpha = Number(value);\n      result.strokeStyle.alpha = Number(value);\n      break;\n  }\n}\n\nexport { parseAttribute, parseSVGStyle, styleAttributes };\n//# sourceMappingURL=parseSVGStyle.mjs.map\n","import { warn } from '../../../../utils/logging/warn.mjs';\nimport { GraphicsPath } from '../path/GraphicsPath.mjs';\nimport { parseSVGDefinitions } from './parseSVGDefinitions.mjs';\nimport { parseSVGFloatAttribute } from './parseSVGFloatAttribute.mjs';\nimport { parseSVGStyle } from './parseSVGStyle.mjs';\n\n\"use strict\";\nfunction SVGParser(svg, graphicsContext) {\n  if (typeof svg === \"string\") {\n    const div = document.createElement(\"div\");\n    div.innerHTML = svg.trim();\n    svg = div.querySelector(\"svg\");\n  }\n  const session = {\n    context: graphicsContext,\n    defs: {},\n    path: new GraphicsPath()\n  };\n  parseSVGDefinitions(svg, session);\n  const children = svg.children;\n  const { fillStyle, strokeStyle } = parseSVGStyle(svg, session);\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    if (child.nodeName.toLowerCase() === \"defs\")\n      continue;\n    renderChildren(child, session, fillStyle, strokeStyle);\n  }\n  return graphicsContext;\n}\nfunction renderChildren(svg, session, fillStyle, strokeStyle) {\n  const children = svg.children;\n  const { fillStyle: f1, strokeStyle: s1 } = parseSVGStyle(svg, session);\n  if (f1 && fillStyle) {\n    fillStyle = { ...fillStyle, ...f1 };\n  } else if (f1) {\n    fillStyle = f1;\n  }\n  if (s1 && strokeStyle) {\n    strokeStyle = { ...strokeStyle, ...s1 };\n  } else if (s1) {\n    strokeStyle = s1;\n  }\n  const noStyle = !fillStyle && !strokeStyle;\n  if (noStyle) {\n    fillStyle = { color: 0 };\n  }\n  let x;\n  let y;\n  let x1;\n  let y1;\n  let x2;\n  let y2;\n  let cx;\n  let cy;\n  let r;\n  let rx;\n  let ry;\n  let points;\n  let pointsString;\n  let d;\n  let graphicsPath;\n  let width;\n  let height;\n  switch (svg.nodeName.toLowerCase()) {\n    case \"path\":\n      d = svg.getAttribute(\"d\");\n      if (svg.getAttribute(\"fill-rule\") === \"evenodd\") {\n        warn(\"SVG Evenodd fill rule not supported, your svg may render incorrectly\");\n      }\n      graphicsPath = new GraphicsPath(d, true);\n      session.context.path(graphicsPath);\n      if (fillStyle)\n        session.context.fill(fillStyle);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"circle\":\n      cx = parseSVGFloatAttribute(svg, \"cx\", 0);\n      cy = parseSVGFloatAttribute(svg, \"cy\", 0);\n      r = parseSVGFloatAttribute(svg, \"r\", 0);\n      session.context.ellipse(cx, cy, r, r);\n      if (fillStyle)\n        session.context.fill(fillStyle);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"rect\":\n      x = parseSVGFloatAttribute(svg, \"x\", 0);\n      y = parseSVGFloatAttribute(svg, \"y\", 0);\n      width = parseSVGFloatAttribute(svg, \"width\", 0);\n      height = parseSVGFloatAttribute(svg, \"height\", 0);\n      rx = parseSVGFloatAttribute(svg, \"rx\", 0);\n      ry = parseSVGFloatAttribute(svg, \"ry\", 0);\n      if (rx || ry) {\n        session.context.roundRect(x, y, width, height, rx || ry);\n      } else {\n        session.context.rect(x, y, width, height);\n      }\n      if (fillStyle)\n        session.context.fill(fillStyle);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"ellipse\":\n      cx = parseSVGFloatAttribute(svg, \"cx\", 0);\n      cy = parseSVGFloatAttribute(svg, \"cy\", 0);\n      rx = parseSVGFloatAttribute(svg, \"rx\", 0);\n      ry = parseSVGFloatAttribute(svg, \"ry\", 0);\n      session.context.beginPath();\n      session.context.ellipse(cx, cy, rx, ry);\n      if (fillStyle)\n        session.context.fill(fillStyle);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"line\":\n      x1 = parseSVGFloatAttribute(svg, \"x1\", 0);\n      y1 = parseSVGFloatAttribute(svg, \"y1\", 0);\n      x2 = parseSVGFloatAttribute(svg, \"x2\", 0);\n      y2 = parseSVGFloatAttribute(svg, \"y2\", 0);\n      session.context.beginPath();\n      session.context.moveTo(x1, y1);\n      session.context.lineTo(x2, y2);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"polygon\":\n      pointsString = svg.getAttribute(\"points\");\n      points = pointsString.match(/\\d+/g).map((n) => parseInt(n, 10));\n      session.context.poly(points, true);\n      if (fillStyle)\n        session.context.fill(fillStyle);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"polyline\":\n      pointsString = svg.getAttribute(\"points\");\n      points = pointsString.match(/\\d+/g).map((n) => parseInt(n, 10));\n      session.context.poly(points, false);\n      if (strokeStyle)\n        session.context.stroke(strokeStyle);\n      break;\n    case \"g\":\n    case \"svg\":\n      break;\n    default: {\n      warn(`[SVG parser] <${svg.nodeName}> elements unsupported`);\n      break;\n    }\n  }\n  if (noStyle) {\n    fillStyle = null;\n  }\n  for (let i = 0; i < children.length; i++) {\n    renderChildren(children[i], session, fillStyle, strokeStyle);\n  }\n}\n\nexport { SVGParser };\n//# sourceMappingURL=SVGParser.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { FillGradient } from '../fill/FillGradient.mjs';\nimport { FillPattern } from '../fill/FillPattern.mjs';\n\n\"use strict\";\nfunction isColorLike(value) {\n  return Color.isColorLike(value);\n}\nfunction isFillPattern(value) {\n  return value instanceof FillPattern;\n}\nfunction isFillGradient(value) {\n  return value instanceof FillGradient;\n}\nfunction isTexture(value) {\n  return value instanceof Texture;\n}\nfunction handleColorLike(fill, value, defaultStyle) {\n  const temp = Color.shared.setValue(value ?? 0);\n  fill.color = temp.toNumber();\n  fill.alpha = temp.alpha === 1 ? defaultStyle.alpha : temp.alpha;\n  fill.texture = Texture.WHITE;\n  return { ...defaultStyle, ...fill };\n}\nfunction handleTexture(fill, value, defaultStyle) {\n  fill.texture = value;\n  return { ...defaultStyle, ...fill };\n}\nfunction handleFillPattern(fill, value, defaultStyle) {\n  fill.fill = value;\n  fill.color = 16777215;\n  fill.texture = value.texture;\n  fill.matrix = value.transform;\n  return { ...defaultStyle, ...fill };\n}\nfunction handleFillGradient(fill, value, defaultStyle) {\n  value.buildGradient();\n  fill.fill = value;\n  fill.color = 16777215;\n  fill.texture = value.texture;\n  fill.matrix = value.transform;\n  fill.textureSpace = value.textureSpace;\n  return { ...defaultStyle, ...fill };\n}\nfunction handleFillObject(value, defaultStyle) {\n  const style = { ...defaultStyle, ...value };\n  const color = Color.shared.setValue(style.color);\n  style.alpha *= color.alpha;\n  style.color = color.toNumber();\n  return style;\n}\nfunction toFillStyle(value, defaultStyle) {\n  if (value === void 0 || value === null) {\n    return null;\n  }\n  const fill = {};\n  const objectStyle = value;\n  if (isColorLike(value)) {\n    return handleColorLike(fill, value, defaultStyle);\n  } else if (isTexture(value)) {\n    return handleTexture(fill, value, defaultStyle);\n  } else if (isFillPattern(value)) {\n    return handleFillPattern(fill, value, defaultStyle);\n  } else if (isFillGradient(value)) {\n    return handleFillGradient(fill, value, defaultStyle);\n  } else if (objectStyle.fill && isFillPattern(objectStyle.fill)) {\n    return handleFillPattern(objectStyle, objectStyle.fill, defaultStyle);\n  } else if (objectStyle.fill && isFillGradient(objectStyle.fill)) {\n    return handleFillGradient(objectStyle, objectStyle.fill, defaultStyle);\n  }\n  return handleFillObject(objectStyle, defaultStyle);\n}\nfunction toStrokeStyle(value, defaultStyle) {\n  const { width, alignment, miterLimit, cap, join, pixelLine, ...rest } = defaultStyle;\n  const fill = toFillStyle(value, rest);\n  if (!fill) {\n    return null;\n  }\n  return {\n    width,\n    alignment,\n    miterLimit,\n    cap,\n    join,\n    pixelLine,\n    ...fill\n  };\n}\n\nexport { toFillStyle, toStrokeStyle };\n//# sourceMappingURL=convertFillInputToFillStyle.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { Color } from '../../../color/Color.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../maths/point/Point.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { uid } from '../../../utils/data/uid.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\nimport { GraphicsPath } from './path/GraphicsPath.mjs';\nimport { SVGParser } from './svg/SVGParser.mjs';\nimport { toFillStyle, toStrokeStyle } from './utils/convertFillInputToFillStyle.mjs';\n\n\"use strict\";\nconst tmpPoint = new Point();\nconst tempMatrix = new Matrix();\nconst _GraphicsContext = class _GraphicsContext extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** unique id for this graphics context */\n    this.uid = uid(\"graphicsContext\");\n    this.dirty = true;\n    this.batchMode = \"auto\";\n    this.instructions = [];\n    this._activePath = new GraphicsPath();\n    this._transform = new Matrix();\n    this._fillStyle = { ..._GraphicsContext.defaultFillStyle };\n    this._strokeStyle = { ..._GraphicsContext.defaultStrokeStyle };\n    this._stateStack = [];\n    this._tick = 0;\n    this._bounds = new Bounds();\n    this._boundsDirty = true;\n  }\n  /**\n   * Creates a new GraphicsContext object that is a clone of this instance, copying all properties,\n   * including the current drawing state, transformations, styles, and instructions.\n   * @returns A new GraphicsContext instance with the same properties and state as this one.\n   */\n  clone() {\n    const clone = new _GraphicsContext();\n    clone.batchMode = this.batchMode;\n    clone.instructions = this.instructions.slice();\n    clone._activePath = this._activePath.clone();\n    clone._transform = this._transform.clone();\n    clone._fillStyle = { ...this._fillStyle };\n    clone._strokeStyle = { ...this._strokeStyle };\n    clone._stateStack = this._stateStack.slice();\n    clone._bounds = this._bounds.clone();\n    clone._boundsDirty = true;\n    return clone;\n  }\n  /**\n   * The current fill style of the graphics context. This can be a color, gradient, pattern, or a more complex style defined by a FillStyle object.\n   */\n  get fillStyle() {\n    return this._fillStyle;\n  }\n  set fillStyle(value) {\n    this._fillStyle = toFillStyle(value, _GraphicsContext.defaultFillStyle);\n  }\n  /**\n   * The current stroke style of the graphics context. Similar to fill styles, stroke styles can encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n   */\n  get strokeStyle() {\n    return this._strokeStyle;\n  }\n  set strokeStyle(value) {\n    this._strokeStyle = toStrokeStyle(value, _GraphicsContext.defaultStrokeStyle);\n  }\n  /**\n   * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n   * pattern, or a more complex style defined by a FillStyle object.\n   * @param style - The fill style to apply. This can be a simple color, a gradient or pattern object,\n   *                or a FillStyle or ConvertedFillStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setFillStyle(style) {\n    this._fillStyle = toFillStyle(style, _GraphicsContext.defaultFillStyle);\n    return this;\n  }\n  /**\n   * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n   * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n   * @param style - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n   *                or a StrokeStyle or ConvertedStrokeStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setStrokeStyle(style) {\n    this._strokeStyle = toFillStyle(style, _GraphicsContext.defaultStrokeStyle);\n    return this;\n  }\n  texture(texture, tint, dx, dy, dw, dh) {\n    this.instructions.push({\n      action: \"texture\",\n      data: {\n        image: texture,\n        dx: dx || 0,\n        dy: dy || 0,\n        dw: dw || texture.frame.width,\n        dh: dh || texture.frame.height,\n        transform: this._transform.clone(),\n        alpha: this._fillStyle.alpha,\n        style: tint ? Color.shared.setValue(tint).toNumber() : 16777215\n      }\n    });\n    this.onUpdate();\n    return this;\n  }\n  /**\n   * Resets the current path. Any previous path and its commands are discarded and a new path is\n   * started. This is typically called before beginning a new shape or series of drawing commands.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  beginPath() {\n    this._activePath = new GraphicsPath();\n    return this;\n  }\n  fill(style, alpha) {\n    let path;\n    const lastInstruction = this.instructions[this.instructions.length - 1];\n    if (this._tick === 0 && lastInstruction && lastInstruction.action === \"stroke\") {\n      path = lastInstruction.data.path;\n    } else {\n      path = this._activePath.clone();\n    }\n    if (!path)\n      return this;\n    if (style != null) {\n      if (alpha !== void 0 && typeof style === \"number\") {\n        deprecation(v8_0_0, \"GraphicsContext.fill(color, alpha) is deprecated, use GraphicsContext.fill({ color, alpha }) instead\");\n        style = { color: style, alpha };\n      }\n      this._fillStyle = toFillStyle(style, _GraphicsContext.defaultFillStyle);\n    }\n    this.instructions.push({\n      action: \"fill\",\n      // TODO copy fill style!\n      data: { style: this.fillStyle, path }\n    });\n    this.onUpdate();\n    this._initNextPathLocation();\n    this._tick = 0;\n    return this;\n  }\n  _initNextPathLocation() {\n    const { x, y } = this._activePath.getLastPoint(Point.shared);\n    this._activePath.clear();\n    this._activePath.moveTo(x, y);\n  }\n  /**\n   * Strokes the current path with the current stroke style. This method can take an optional\n   * FillInput parameter to define the stroke's appearance, including its color, width, and other properties.\n   * @param style - (Optional) The stroke style to apply. Can be defined as a simple color or a more complex style object. If omitted, uses the current stroke style.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  stroke(style) {\n    let path;\n    const lastInstruction = this.instructions[this.instructions.length - 1];\n    if (this._tick === 0 && lastInstruction && lastInstruction.action === \"fill\") {\n      path = lastInstruction.data.path;\n    } else {\n      path = this._activePath.clone();\n    }\n    if (!path)\n      return this;\n    if (style != null) {\n      this._strokeStyle = toStrokeStyle(style, _GraphicsContext.defaultStrokeStyle);\n    }\n    this.instructions.push({\n      action: \"stroke\",\n      // TODO copy fill style!\n      data: { style: this.strokeStyle, path }\n    });\n    this.onUpdate();\n    this._initNextPathLocation();\n    this._tick = 0;\n    return this;\n  }\n  /**\n   * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n   * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n   * fail to cut correctly!\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  cut() {\n    for (let i = 0; i < 2; i++) {\n      const lastInstruction = this.instructions[this.instructions.length - 1 - i];\n      const holePath = this._activePath.clone();\n      if (lastInstruction) {\n        if (lastInstruction.action === \"stroke\" || lastInstruction.action === \"fill\") {\n          if (lastInstruction.data.hole) {\n            lastInstruction.data.hole.addPath(holePath);\n          } else {\n            lastInstruction.data.hole = holePath;\n            break;\n          }\n        }\n      }\n    }\n    this._initNextPathLocation();\n    return this;\n  }\n  /**\n   * Adds an arc to the current path, which is centered at (x, y) with the specified radius,\n   * starting and ending angles, and direction.\n   * @param x - The x-coordinate of the arc's center.\n   * @param y - The y-coordinate of the arc's center.\n   * @param radius - The arc's radius.\n   * @param startAngle - The starting angle, in radians.\n   * @param endAngle - The ending angle, in radians.\n   * @param counterclockwise - (Optional) Specifies whether the arc is drawn counterclockwise (true) or clockwise (false). Defaults to false.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.arc(\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty,\n      radius,\n      startAngle,\n      endAngle,\n      counterclockwise\n    );\n    return this;\n  }\n  /**\n   * Adds an arc to the current path with the given control points and radius, connected to the previous point\n   * by a straight line if necessary.\n   * @param x1 - The x-coordinate of the first control point.\n   * @param y1 - The y-coordinate of the first control point.\n   * @param x2 - The x-coordinate of the second control point.\n   * @param y2 - The y-coordinate of the second control point.\n   * @param radius - The arc's radius.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  arcTo(x1, y1, x2, y2, radius) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.arcTo(\n      t.a * x1 + t.c * y1 + t.tx,\n      t.b * x1 + t.d * y1 + t.ty,\n      t.a * x2 + t.c * y2 + t.tx,\n      t.b * x2 + t.d * y2 + t.ty,\n      radius\n    );\n    return this;\n  }\n  /**\n   * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n   * @param rx - The x-radius of the ellipse.\n   * @param ry - The y-radius of the ellipse.\n   * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n   * to the x-axis of the coordinate system, in degrees.\n   * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n   * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n   * @param x - The x-coordinate of the arc's end point.\n   * @param y - The y-coordinate of the arc's end point.\n   * @returns The instance of the current object for chaining.\n   */\n  arcToSvg(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.arcToSvg(\n      rx,\n      ry,\n      xAxisRotation,\n      // should we rotate this with transform??\n      largeArcFlag,\n      sweepFlag,\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty\n    );\n    return this;\n  }\n  /**\n   * Adds a cubic Bezier curve to the path.\n   * It requires three points: the first two are control points and the third one is the end point.\n   * The starting point is the last point in the current path.\n   * @param cp1x - The x-coordinate of the first control point.\n   * @param cp1y - The y-coordinate of the first control point.\n   * @param cp2x - The x-coordinate of the second control point.\n   * @param cp2y - The y-coordinate of the second control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y, smoothness) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.bezierCurveTo(\n      t.a * cp1x + t.c * cp1y + t.tx,\n      t.b * cp1x + t.d * cp1y + t.ty,\n      t.a * cp2x + t.c * cp2y + t.tx,\n      t.b * cp2x + t.d * cp2y + t.ty,\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty,\n      smoothness\n    );\n    return this;\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    this._tick++;\n    this._activePath?.closePath();\n    return this;\n  }\n  /**\n   * Draws an ellipse at the specified location and with the given x and y radii.\n   * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n   * @param x - The x-coordinate of the center of the ellipse.\n   * @param y - The y-coordinate of the center of the ellipse.\n   * @param radiusX - The horizontal radius of the ellipse.\n   * @param radiusY - The vertical radius of the ellipse.\n   * @returns The instance of the current object for chaining.\n   */\n  ellipse(x, y, radiusX, radiusY) {\n    this._tick++;\n    this._activePath.ellipse(x, y, radiusX, radiusY, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a circle shape. This method adds a new circle path to the current drawing.\n   * @param x - The x-coordinate of the center of the circle.\n   * @param y - The y-coordinate of the center of the circle.\n   * @param radius - The radius of the circle.\n   * @returns The instance of the current object for chaining.\n   */\n  circle(x, y, radius) {\n    this._tick++;\n    this._activePath.circle(x, y, radius, this._transform.clone());\n    return this;\n  }\n  /**\n   * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n   * @param path - The `GraphicsPath` to add.\n   * @returns The instance of the current object for chaining.\n   */\n  path(path) {\n    this._tick++;\n    this._activePath.addPath(path, this._transform.clone());\n    return this;\n  }\n  /**\n   * Connects the current point to a new point with a straight line. This method updates the current path.\n   * @param x - The x-coordinate of the new point to connect to.\n   * @param y - The y-coordinate of the new point to connect to.\n   * @returns The instance of the current object for chaining.\n   */\n  lineTo(x, y) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.lineTo(\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty\n    );\n    return this;\n  }\n  /**\n   * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n   * @param x - The x-coordinate for the starting point.\n   * @param y - The y-coordinate for the starting point.\n   * @returns The instance of the current object for chaining.\n   */\n  moveTo(x, y) {\n    this._tick++;\n    const t = this._transform;\n    const instructions = this._activePath.instructions;\n    const transformedX = t.a * x + t.c * y + t.tx;\n    const transformedY = t.b * x + t.d * y + t.ty;\n    if (instructions.length === 1 && instructions[0].action === \"moveTo\") {\n      instructions[0].data[0] = transformedX;\n      instructions[0].data[1] = transformedY;\n      return this;\n    }\n    this._activePath.moveTo(\n      transformedX,\n      transformedY\n    );\n    return this;\n  }\n  /**\n   * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n   * The starting point is the last point in the current path.\n   * @param cpx - The x-coordinate of the control point.\n   * @param cpy - The y-coordinate of the control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  quadraticCurveTo(cpx, cpy, x, y, smoothness) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.quadraticCurveTo(\n      t.a * cpx + t.c * cpy + t.tx,\n      t.b * cpx + t.d * cpy + t.ty,\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty,\n      smoothness\n    );\n    return this;\n  }\n  /**\n   * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  rect(x, y, w, h) {\n    this._tick++;\n    this._activePath.rect(x, y, w, h, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a rectangle with rounded corners.\n   * The corner radius can be specified to determine how rounded the corners should be.\n   * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n   * @returns The instance of the current object for chaining.\n   */\n  roundRect(x, y, w, h, radius) {\n    this._tick++;\n    this._activePath.roundRect(x, y, w, h, radius, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n   * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n   * rotated, or translated as needed.\n   * @param points - An array of numbers, or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n   * representing the x and y coordinates, of the polygon's vertices, in sequence.\n   * @param close - A boolean indicating whether to close the polygon path. True by default.\n   */\n  poly(points, close) {\n    this._tick++;\n    this._activePath.poly(points, close, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  regularPoly(x, y, radius, sides, rotation = 0, transform) {\n    this._tick++;\n    this._activePath.regularPoly(x, y, radius, sides, rotation, transform);\n    return this;\n  }\n  /**\n   * Draws a polygon with rounded corners.\n   * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param corner - The radius of the rounding of the corners.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @returns The instance of the current object for chaining.\n   */\n  roundPoly(x, y, radius, sides, corner, rotation) {\n    this._tick++;\n    this._activePath.roundPoly(x, y, radius, sides, corner, rotation);\n    return this;\n  }\n  /**\n   * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n   * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n   * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n   * A minimum of 3 points is required.\n   * @param radius - The default radius for the corners.\n   * This radius is applied to all corners unless overridden in `points`.\n   * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n   *  method instead of an arc method. Defaults to false.\n   * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n   * Higher values make the curve smoother.\n   * @returns The instance of the current object for chaining.\n   */\n  roundShape(points, radius, useQuadratic, smoothness) {\n    this._tick++;\n    this._activePath.roundShape(points, radius, useQuadratic, smoothness);\n    return this;\n  }\n  /**\n   * Draw Rectangle with fillet corners. This is much like rounded rectangle\n   * however it support negative numbers as well for the corner radius.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param fillet - accept negative or positive values\n   */\n  filletRect(x, y, width, height, fillet) {\n    this._tick++;\n    this._activePath.filletRect(x, y, width, height, fillet);\n    return this;\n  }\n  /**\n   * Draw Rectangle with chamfer corners. These are angled corners.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param chamfer - non-zero real number, size of corner cutout\n   * @param transform\n   */\n  chamferRect(x, y, width, height, chamfer, transform) {\n    this._tick++;\n    this._activePath.chamferRect(x, y, width, height, chamfer, transform);\n    return this;\n  }\n  /**\n   * Draws a star shape centered at a specified location. This method allows for the creation\n   *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n   * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n   * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n   * @param x - The x-coordinate of the center of the star.\n   * @param y - The y-coordinate of the center of the star.\n   * @param points - The number of points of the star.\n   * @param radius - The outer radius of the star (distance from the center to the outer points).\n   * @param innerRadius - Optional. The inner radius of the star\n   * (distance from the center to the inner points between the outer points).\n   * If not provided, defaults to half of the `radius`.\n   * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n   * Defaults to 0, meaning one point is directly upward.\n   * @returns The instance of the current object for chaining further drawing commands.\n   */\n  star(x, y, points, radius, innerRadius = 0, rotation = 0) {\n    this._tick++;\n    this._activePath.star(x, y, points, radius, innerRadius, rotation, this._transform.clone());\n    return this;\n  }\n  /**\n   * Parses and renders an SVG string into the graphics context. This allows for complex shapes and paths\n   * defined in SVG format to be drawn within the graphics context.\n   * @param svg - The SVG string to be parsed and rendered.\n   */\n  svg(svg) {\n    this._tick++;\n    SVGParser(svg, this);\n    return this;\n  }\n  /**\n   * Restores the most recently saved graphics state by popping the top of the graphics state stack.\n   * This includes transformations, fill styles, and stroke styles.\n   */\n  restore() {\n    const state = this._stateStack.pop();\n    if (state) {\n      this._transform = state.transform;\n      this._fillStyle = state.fillStyle;\n      this._strokeStyle = state.strokeStyle;\n    }\n    return this;\n  }\n  /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n  save() {\n    this._stateStack.push({\n      transform: this._transform.clone(),\n      fillStyle: { ...this._fillStyle },\n      strokeStyle: { ...this._strokeStyle }\n    });\n    return this;\n  }\n  /**\n   * Returns the current transformation matrix of the graphics context.\n   * @returns The current transformation matrix.\n   */\n  getTransform() {\n    return this._transform;\n  }\n  /**\n   * Resets the current transformation matrix to the identity matrix, effectively removing any transformations (rotation, scaling, translation) previously applied.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  resetTransform() {\n    this._transform.identity();\n    return this;\n  }\n  /**\n   * Applies a rotation transformation to the graphics context around the current origin.\n   * @param angle - The angle of rotation in radians.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  rotate(angle) {\n    this._transform.rotate(angle);\n    return this;\n  }\n  /**\n   * Applies a scaling transformation to the graphics context, scaling drawings by x horizontally and by y vertically.\n   * @param x - The scale factor in the horizontal direction.\n   * @param y - (Optional) The scale factor in the vertical direction. If not specified, the x value is used for both directions.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  scale(x, y = x) {\n    this._transform.scale(x, y);\n    return this;\n  }\n  setTransform(a, b, c, d, dx, dy) {\n    if (a instanceof Matrix) {\n      this._transform.set(a.a, a.b, a.c, a.d, a.tx, a.ty);\n      return this;\n    }\n    this._transform.set(a, b, c, d, dx, dy);\n    return this;\n  }\n  transform(a, b, c, d, dx, dy) {\n    if (a instanceof Matrix) {\n      this._transform.append(a);\n      return this;\n    }\n    tempMatrix.set(a, b, c, d, dx, dy);\n    this._transform.append(tempMatrix);\n    return this;\n  }\n  /**\n   * Applies a translation transformation to the graphics context, moving the origin by the specified amounts.\n   * @param x - The amount to translate in the horizontal direction.\n   * @param y - (Optional) The amount to translate in the vertical direction. If not specified, the x value is used for both directions.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  translate(x, y = x) {\n    this._transform.translate(x, y);\n    return this;\n  }\n  /**\n   * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n   * and optionally resetting transformations to the identity matrix.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  clear() {\n    this._activePath.clear();\n    this.instructions.length = 0;\n    this.resetTransform();\n    this.onUpdate();\n    return this;\n  }\n  onUpdate() {\n    if (this.dirty)\n      return;\n    this.emit(\"update\", this, 16);\n    this.dirty = true;\n    this._boundsDirty = true;\n  }\n  /** The bounds of the graphic shape. */\n  get bounds() {\n    if (!this._boundsDirty)\n      return this._bounds;\n    const bounds = this._bounds;\n    bounds.clear();\n    for (let i = 0; i < this.instructions.length; i++) {\n      const instruction = this.instructions[i];\n      const action = instruction.action;\n      if (action === \"fill\") {\n        const data = instruction.data;\n        bounds.addBounds(data.path.bounds);\n      } else if (action === \"texture\") {\n        const data = instruction.data;\n        bounds.addFrame(data.dx, data.dy, data.dx + data.dw, data.dy + data.dh, data.transform);\n      }\n      if (action === \"stroke\") {\n        const data = instruction.data;\n        const alignment = data.style.alignment;\n        const outerPadding = data.style.width * (1 - alignment);\n        const _bounds = data.path.bounds;\n        bounds.addFrame(\n          _bounds.minX - outerPadding,\n          _bounds.minY - outerPadding,\n          _bounds.maxX + outerPadding,\n          _bounds.maxY + outerPadding\n        );\n      }\n    }\n    return bounds;\n  }\n  /**\n   * Check to see if a point is contained within this geometry.\n   * @param point - Point to check if it's contained.\n   * @returns {boolean} `true` if the point is contained within geometry.\n   */\n  containsPoint(point) {\n    if (!this.bounds.containsPoint(point.x, point.y))\n      return false;\n    const instructions = this.instructions;\n    let hasHit = false;\n    for (let k = 0; k < instructions.length; k++) {\n      const instruction = instructions[k];\n      const data = instruction.data;\n      const path = data.path;\n      if (!instruction.action || !path)\n        continue;\n      const style = data.style;\n      const shapes = path.shapePath.shapePrimitives;\n      for (let i = 0; i < shapes.length; i++) {\n        const shape = shapes[i].shape;\n        if (!style || !shape)\n          continue;\n        const transform = shapes[i].transform;\n        const transformedPoint = transform ? transform.applyInverse(point, tmpPoint) : point;\n        if (instruction.action === \"fill\") {\n          hasHit = shape.contains(transformedPoint.x, transformedPoint.y);\n        } else {\n          const strokeStyle = style;\n          hasHit = shape.strokeContains(transformedPoint.x, transformedPoint.y, strokeStyle.width, strokeStyle.alignment);\n        }\n        const holes = data.hole;\n        if (holes) {\n          const holeShapes = holes.shapePath?.shapePrimitives;\n          if (holeShapes) {\n            for (let j = 0; j < holeShapes.length; j++) {\n              if (holeShapes[j].shape.contains(transformedPoint.x, transformedPoint.y)) {\n                hasHit = false;\n              }\n            }\n          }\n        }\n        if (hasHit) {\n          return true;\n        }\n      }\n    }\n    return hasHit;\n  }\n  /**\n   * Destroys the GraphicsData object.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the fill/stroke style?\n   * @param {boolean} [options.textureSource=false] - Should it destroy the texture source of the fill/stroke style?\n   */\n  destroy(options = false) {\n    this._stateStack.length = 0;\n    this._transform = null;\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      if (this._fillStyle.texture) {\n        this._fillStyle.texture.destroy(destroyTextureSource);\n      }\n      if (this._strokeStyle.texture) {\n        this._strokeStyle.texture.destroy(destroyTextureSource);\n      }\n    }\n    this._fillStyle = null;\n    this._strokeStyle = null;\n    this.instructions = null;\n    this._activePath = null;\n    this._bounds = null;\n    this._stateStack = null;\n    this.customShader = null;\n    this._transform = null;\n  }\n};\n/** The default fill style to use when none is provided. */\n_GraphicsContext.defaultFillStyle = {\n  /** The color to use for the fill. */\n  color: 16777215,\n  /** The alpha value to use for the fill. */\n  alpha: 1,\n  /** The texture to use for the fill. */\n  texture: Texture.WHITE,\n  /** The matrix to apply. */\n  matrix: null,\n  /** The fill pattern to use. */\n  fill: null,\n  /** Whether coordinates are 'global' or 'local' */\n  textureSpace: \"local\"\n};\n/** The default stroke style to use when none is provided. */\n_GraphicsContext.defaultStrokeStyle = {\n  /** The width of the stroke. */\n  width: 1,\n  /** The color to use for the stroke. */\n  color: 16777215,\n  /** The alpha value to use for the stroke. */\n  alpha: 1,\n  /** The alignment of the stroke. */\n  alignment: 0.5,\n  /** The miter limit to use. */\n  miterLimit: 10,\n  /** The line cap style to use. */\n  cap: \"butt\",\n  /** The line join style to use. */\n  join: \"miter\",\n  /** The texture to use for the fill. */\n  texture: Texture.WHITE,\n  /** The matrix to apply. */\n  matrix: null,\n  /** The fill pattern to use. */\n  fill: null,\n  /** Whether coordinates are 'global' or 'local' */\n  textureSpace: \"local\",\n  /** If the stroke is a pixel line. */\n  pixelLine: false\n};\nlet GraphicsContext = _GraphicsContext;\n\nexport { GraphicsContext };\n//# sourceMappingURL=GraphicsContext.mjs.map\n"],"names":["programCache","_GlProgram","_UniformGroup","_FillGradient","context","parse","out","tempRect","uid","_Batcher","maxTextures","_DefaultBatcher","tempTextureMatrix","_GraphicsContextSystem","RECURSION_LIMIT","FLT_EPSILON","PATH_DISTANCE_EPSILON","begin","recursive","_GraphicsContext"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91]}