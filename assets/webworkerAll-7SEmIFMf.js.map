{"version":3,"file":"webworkerAll-7SEmIFMf.js","sources":["../../../node_modules/pixi.js/lib/app/ResizePlugin.mjs","../../../node_modules/pixi.js/lib/app/TickerPlugin.mjs","../../../node_modules/pixi.js/lib/filters/FilterPipe.mjs","../../../node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","../../../node_modules/pixi.js/lib/filters/FilterSystem.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs","../../../node_modules/pixi.js/lib/scene/text-html/HTMLTextStyle.mjs","../../../node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","../../../node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","../../../node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","../../../node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/gl/GlParticleContainerAdaptor.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/gpu/GpuParticleContainerAdaptor.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/shared/utils/createIndicesForQuads.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/shared/utils/generateParticleUpdateFunction.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/shared/ParticleBuffer.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.frag.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.vert.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.wgsl.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/ParticleShader.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/shared/ParticleContainerPipe.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/shared/GlParticleContainerPipe.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/shared/GpuParticleContainerPipe.mjs","../../../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","../../../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","../../../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","../../../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","../../../node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","../../../node_modules/pixi.js/lib/scene/text/utils/updateTextBounds.mjs","../../../node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","../../../node_modules/pixi.js/lib/utils/browser/isSafari.mjs","../../../node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","../../../node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","../../../node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","../../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","../../../node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","../../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","../../../node_modules/pixi.js/lib/app/init.mjs","../../../node_modules/pixi.js/lib/scene/graphics/init.mjs","../../../node_modules/pixi.js/lib/scene/mesh/init.mjs","../../../node_modules/pixi.js/lib/scene/particle-container/init.mjs","../../../node_modules/pixi.js/lib/scene/text/init.mjs","../../../node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","../../../node_modules/pixi.js/lib/scene/text-html/init.mjs","../../../node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","../../../node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","../../../node_modules/pixi.js/lib/filters/init.mjs"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      /**\n       * The HTML element or window to automatically resize the\n       * renderer's view element to match width and height.\n       * @member {Window|HTMLElement}\n       * @name resizeTo\n       * @memberof app.Application#\n       */\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @static\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    bounds.addBounds(renderable.bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { Point } from '../maths/point/Point.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    if (!this._filterStack[this._filterStackIndex]) {\n      this._filterStack[this._filterStackIndex] = this._getFilterData();\n    }\n    const filterData = this._filterStack[this._filterStackIndex];\n    this._filterStackIndex++;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      instruction.container.getFastGlobalBounds(true, bounds);\n    }\n    if (instruction.container) {\n      const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n      const filterFrameTransform = renderGroup.cacheToLocalTransform;\n      if (filterFrameTransform) {\n        bounds.applyMatrix(filterFrameTransform);\n      }\n    }\n    const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n    let resolution = Infinity;\n    let padding = 0;\n    let antialias = true;\n    let blendRequired = false;\n    let enabled = false;\n    let clipToViewport = true;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution === \"inherit\" ? colorTextureSource._resolution : filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias === \"off\") {\n        antialias = false;\n      } else if (filter.antialias === \"inherit\") {\n        antialias && (antialias = colorTextureSource.antialias);\n      }\n      if (!filter.clipToViewport) {\n        clipToViewport = false;\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired || (blendRequired = filter.blendRequired);\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    if (clipToViewport) {\n      const viewPort = renderer.renderTarget.rootViewPort;\n      const rootResolution = renderer.renderTarget.renderTarget.resolution;\n      bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n    }\n    bounds.scale(resolution).ceil().scale(1 / resolution).pad(padding | 0);\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.skip = false;\n    filterData.bounds = bounds;\n    filterData.blendRequired = blendRequired;\n    filterData.container = instruction.container;\n    filterData.filterEffect = instruction.filterEffect;\n    filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      resolution,\n      antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  pop() {\n    const renderer = this.renderer;\n    this._filterStackIndex--;\n    const filterData = this._filterStack[this._filterStackIndex];\n    if (filterData.skip) {\n      return;\n    }\n    this._activeFilterData = filterData;\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    let backTexture = Texture.EMPTY;\n    renderer.renderTarget.finishRenderPass();\n    if (filterData.blendRequired) {\n      const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n      backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n    }\n    filterData.backTexture = backTexture;\n    const filters = filterData.filterEffect.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(backTexture.source, 3);\n    renderer.globalUniforms.pop();\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(inputTexture);\n    } else {\n      let flip = filterData.inputTexture;\n      let flop = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(flip);\n      TexturePool.returnTexture(flop);\n    }\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(backTexture);\n    }\n  }\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._filterStack[this._filterStackIndex];\n    const bounds = filterData.bounds;\n    const offset = Point.shared;\n    const previousRenderSurface = filterData.previousRenderSurface;\n    const isFinalTarget = previousRenderSurface === output;\n    let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    if (currentIndex > 0) {\n      resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n    }\n    const filterUniforms = this._filterGlobalUniforms;\n    const uniforms = filterUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      let lastIndex = this._filterStackIndex;\n      while (lastIndex > 0) {\n        lastIndex--;\n        const filterData2 = this._filterStack[this._filterStackIndex - 1];\n        if (!filterData2.skip) {\n          offset.x = filterData2.bounds.minX;\n          offset.y = filterData2.bounds.minY;\n          break;\n        }\n      }\n      outputFrame[0] = bounds.minX - offset.x;\n      outputFrame[1] = bounds.minY - offset.y;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offset.x * resolution;\n    globalFrame[1] = offset.y * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    filterUniforms.update();\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(filterUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(filterUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  _getFilterData() {\n    return {\n      skip: false,\n      inputTexture: null,\n      bounds: new Bounds(),\n      container: null,\n      filterEffect: null,\n      blendRequired: false,\n      previousRenderSurface: null\n    };\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n    if (renderGroup && renderGroup.cacheToLocalTransform) {\n      worldTransform.prepend(renderGroup.cacheToLocalTransform);\n    }\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\n    `color: ${Color.shared.setValue(fill.color).toHex()}`,\n    `font-size: ${style.fontSize}px`,\n    `font-family: ${style.fontFamily}`,\n    `font-weight: ${style.fontWeight}`,\n    `font-style: ${style.fontStyle}`,\n    `font-variant: ${style.fontVariant}`,\n    `letter-spacing: ${style.letterSpacing}px`,\n    `text-align: ${style.align}`,\n    `padding: ${style.padding}px`,\n    `white-space: ${style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace}`,\n    ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n    ...style.wordWrap ? [\n      `word-wrap: ${style.breakWords ? \"break-all\" : \"break-word\"}`,\n      `max-width: ${style.wordWrapWidth}px`\n    ] : [],\n    ...stroke ? [strokeToCSS(stroke)] : [],\n    ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n    ...style.cssOverrides\n  ].join(\";\");\n  const cssStyles = [`div { ${cssStyleString} }`];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = `${x}px ${y}px`;\n  if (dropShadowStyle.blur > 0) {\n    return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n  }\n  return `text-shadow: ${position} ${color}`;\n}\nfunction strokeToCSS(stroke) {\n  return [\n    `-webkit-text-stroke-width: ${stroke.width}px`,\n    `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    `text-stroke-width: ${stroke.width}px`,\n    `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    \"paint-order: stroke\"\n  ].join(\";\");\n}\nconst templates = {\n  fontSize: `font-size: {{VALUE}}px`,\n  fontFamily: `font-family: {{VALUE}}`,\n  fontWeight: `font-weight: {{VALUE}}`,\n  fontStyle: `font-style: {{VALUE}}`,\n  fontVariant: `font-variant: {{VALUE}}`,\n  letterSpacing: `letter-spacing: {{VALUE}}px`,\n  align: `text-align: {{VALUE}}`,\n  padding: `padding: {{VALUE}}px`,\n  whiteSpace: `white-space: {{VALUE}}`,\n  lineHeight: `line-height: {{VALUE}}px`,\n  wordWrapWidth: `max-width: {{VALUE}}px`\n};\nconst transform = {\n  fill: (value) => `color: ${Color.shared.setValue(value).toHex()}`,\n  breakWords: (value) => `word-wrap: ${value ? \"break-all\" : \"break-word\"}`,\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(`${i} { ${cssTagStyle.join(\";\")} }`);\n  }\n}\n\nexport { textStyleToCSS };\n//# sourceMappingURL=textStyleToCSS.mjs.map\n","import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n//# sourceMappingURL=HTMLTextStyle.mjs.map\n","\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    this.image = new Image();\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n  }\n}\n\nexport { HTMLTextRenderData, nssvg, nsxhtml };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData || (htmlTextRenderData = tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData()));\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const doublePadding = style.padding * 2;\n  return {\n    width: contentBounds.width - doublePadding,\n    height: contentBounds.height - doublePadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    this.renderer.renderableGC.addManagedHash(this, \"_graphicsBatchesHash\");\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics.didViewUpdate) {\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch._batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    graphics.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    if (this._graphicsBatchesHash[graphics.uid] === void 0) {\n      graphics.on(\"destroyed\", this._destroyRenderableBound);\n    }\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcherName = \"default\";\n    this.packAsQuad = false;\n    this.indexOffset = 0;\n    this.attributeOffset = 0;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n    this._textureMatrixUpdateId = -1;\n    this._uvUpdateId = -1;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get topology() {\n    return this._topology || this.geometry.topology;\n  }\n  set topology(value) {\n    this._topology = value;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.geometry = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  /**\n   * Sets the texture for the batchable mesh.\n   * As it does so, it resets the texture matrix update ID.\n   * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n   * @param value - The texture to set.\n   */\n  setTexture(value) {\n    if (this.texture === value)\n      return;\n    this.texture = value;\n    this._textureMatrixUpdateId = -1;\n  }\n  get uvs() {\n    const geometry = this.geometry;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    return transformedUvs;\n  }\n  get positions() {\n    return this.geometry.positions;\n  }\n  get indices() {\n    return this.geometry.indices;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  get groupTransform() {\n    return this.renderable.groupTransform;\n  }\n  get attributeSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    renderer.renderableGC.addManagedHash(this, \"_gpuBatchableMeshHash\");\n    renderer.renderableGC.addManagedHash(this, \"_meshDataHash\");\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      if (batchableMesh.texture.uid !== mesh._texture.uid) {\n        batchableMesh._textureMatrixUpdateId = -1;\n      }\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        mesh._texture\n      );\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n    mesh.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", this._destroyRenderableBound);\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = BigPool.get(BatchableMesh);\n    gpuMesh.renderable = mesh;\n    gpuMesh.setTexture(mesh._texture);\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","\"use strict\";\nclass GlParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const state = particleContainerPipe.state;\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.resources.uTexture = container.texture._source;\n    shader.resources.uniforms = particleContainerPipe.localUniforms;\n    const gl = renderer.gl;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.shader.bind(shader);\n    renderer.state.set(state);\n    renderer.geometry.bind(buffer.geometry, shader.glProgram);\n    const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n    const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n    gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n  }\n}\n\nexport { GlParticleContainerAdaptor };\n//# sourceMappingURL=GlParticleContainerAdaptor.mjs.map\n","\"use strict\";\nclass GpuParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n    shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n    const state = particleContainerPipe.state;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.encoder.draw({\n      geometry: buffer.geometry,\n      shader: container.shader || particleContainerPipe.defaultShader,\n      state,\n      size: container.particleChildren.length * 6\n    });\n  }\n}\n\nexport { GpuParticleContainerAdaptor };\n//# sourceMappingURL=GpuParticleContainerAdaptor.mjs.map\n","\"use strict\";\nfunction createIndicesForQuads(size, outBuffer = null) {\n  const totalIndices = size * 6;\n  if (totalIndices > 65535) {\n    outBuffer || (outBuffer = new Uint32Array(totalIndices));\n  } else {\n    outBuffer || (outBuffer = new Uint16Array(totalIndices));\n  }\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\n\nexport { createIndicesForQuads };\n//# sourceMappingURL=createIndicesForQuads.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction generateParticleUpdateFunction(properties) {\n  return {\n    dynamicUpdate: generateUpdateFunction(properties, true),\n    staticUpdate: generateUpdateFunction(properties, false)\n  };\n}\nfunction generateUpdateFunction(properties, dynamic) {\n  const funcFragments = [];\n  funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n  let offset = 0;\n  for (const i in properties) {\n    const property = properties[i];\n    if (dynamic !== property.dynamic)\n      continue;\n    funcFragments.push(`offset = index + ${offset}`);\n    funcFragments.push(property.code);\n    const attributeInfo = getAttributeInfoFromFormat(property.format);\n    offset += attributeInfo.stride / 4;\n  }\n  funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n  funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n  const functionSource = funcFragments.join(\"\\n\");\n  return new Function(\"ps\", \"f32v\", \"u32v\", functionSource);\n}\n\nexport { generateParticleUpdateFunction };\n//# sourceMappingURL=generateParticleUpdateFunction.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads.mjs';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction.mjs';\n\n\"use strict\";\nclass ParticleBuffer {\n  constructor(options) {\n    this._size = 0;\n    this._generateParticleUpdateCache = {};\n    const size = this._size = options.size ?? 1e3;\n    const properties = options.properties;\n    let staticVertexSize = 0;\n    let dynamicVertexSize = 0;\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        dynamicVertexSize += attributeInfo.stride;\n      } else {\n        staticVertexSize += attributeInfo.stride;\n      }\n    }\n    this._dynamicStride = dynamicVertexSize / 4;\n    this._staticStride = staticVertexSize / 4;\n    this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n    this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n    this.indexBuffer = createIndicesForQuads(size);\n    const geometry = new Geometry();\n    let dynamicOffset = 0;\n    let staticOffset = 0;\n    this._staticBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"static-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    this._dynamicBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"dynamic-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._dynamicBuffer,\n          stride: this._dynamicStride * 4,\n          offset: dynamicOffset * 4,\n          format: property.format\n        });\n        dynamicOffset += attributeInfo.size;\n      } else {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._staticBuffer,\n          stride: this._staticStride * 4,\n          offset: staticOffset * 4,\n          format: property.format\n        });\n        staticOffset += attributeInfo.size;\n      }\n    }\n    geometry.addIndex(this.indexBuffer);\n    const uploadFunction = this.getParticleUpdate(properties);\n    this._dynamicUpload = uploadFunction.dynamicUpdate;\n    this._staticUpload = uploadFunction.staticUpdate;\n    this.geometry = geometry;\n  }\n  getParticleUpdate(properties) {\n    const key = getParticleSyncKey(properties);\n    if (this._generateParticleUpdateCache[key]) {\n      return this._generateParticleUpdateCache[key];\n    }\n    this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n    return this._generateParticleUpdateCache[key];\n  }\n  generateParticleUpdate(properties) {\n    return generateParticleUpdateFunction(properties);\n  }\n  update(particles, uploadStatic) {\n    if (particles.length > this._size) {\n      uploadStatic = true;\n      this._size = Math.max(particles.length, this._size * 1.5 | 0);\n      this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n      this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n      this.indexBuffer = createIndicesForQuads(this._size);\n      this.geometry.indexBuffer.setDataWithSize(\n        this.indexBuffer,\n        this.indexBuffer.byteLength,\n        true\n      );\n    }\n    const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n    this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n    this._dynamicBuffer.setDataWithSize(\n      this.dynamicAttributeBuffer.float32View,\n      particles.length * this._dynamicStride * 4,\n      true\n    );\n    if (uploadStatic) {\n      const staticAttributeBuffer = this.staticAttributeBuffer;\n      this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n      this._staticBuffer.setDataWithSize(\n        staticAttributeBuffer.float32View,\n        particles.length * this._staticStride * 4,\n        true\n      );\n    }\n  }\n  destroy() {\n    this._staticBuffer.destroy();\n    this._dynamicBuffer.destroy();\n    this.geometry.destroy();\n  }\n}\nfunction getParticleSyncKey(properties) {\n  const keyGen = [];\n  for (const key in properties) {\n    const property = properties[key];\n    keyGen.push(key, property.code, property.dynamic ? \"d\" : \"s\");\n  }\n  return keyGen.join(\"_\");\n}\n\nexport { ParticleBuffer };\n//# sourceMappingURL=ParticleBuffer.mjs.map\n","var fragment = \"varying vec2 vUV;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uTexture;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uTexture, vUV) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.frag.mjs.map\n","var vertex = \"attribute vec2 aVertex;\\nattribute vec2 aUV;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPosition;\\nattribute float aRotation;\\n\\nuniform mat3 uTranslationMatrix;\\nuniform float uRound;\\nuniform vec2 uResolution;\\nuniform vec4 uColor;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n\\nvec2 roundPixels(vec2 position, vec2 targetSize)\\n{       \\n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\nvoid main(void){\\n    float cosRotation = cos(aRotation);\\n    float sinRotation = sin(aRotation);\\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPosition;\\n\\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    if(uRound == 1.0)\\n    {\\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\\n    }\\n\\n    vUV = aUV;\\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles.vert.mjs.map\n","var wgsl = \"\\nstruct ParticleUniforms {\\n  uProjectionMatrix:mat3x3<f32>,\\n  uColor:vec4<f32>,\\n  uResolution:vec2<f32>,\\n  uRoundPixels:f32,\\n};\\n\\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\\n\\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\\n@group(1) @binding(1) var uSampler : sampler;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) color : vec4<f32>,\\n  };\\n@vertex\\nfn mainVertex(\\n  @location(0) aVertex: vec2<f32>,\\n  @location(1) aPosition: vec2<f32>,\\n  @location(2) aUV: vec2<f32>,\\n  @location(3) aColor: vec4<f32>,\\n  @location(4) aRotation: f32,\\n) -> VSOutput {\\n  \\n   let v = vec2(\\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\\n   ) + aPosition;\\n\\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\\n\\n  return VSOutput(\\n   position,\\n   aUV,\\n   vColor,\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) color: vec4<f32>,\\n  @builtin(position) position: vec4<f32>,\\n) -> @location(0) vec4<f32> {\\n\\n    var sample = textureSample(uTexture, uSampler, uv) * color;\\n   \\n    return sample;\\n}\";\n\nexport { wgsl as default };\n//# sourceMappingURL=particles.wgsl.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport fragment from './particles.frag.mjs';\nimport vertex from './particles.vert.mjs';\nimport wgsl from './particles.wgsl.mjs';\n\n\"use strict\";\nclass ParticleShader extends Shader {\n  constructor() {\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment\n    });\n    const gpuProgram = GpuProgram.from({\n      fragment: {\n        source: wgsl,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: wgsl,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Color(16777215), type: \"vec4<f32>\" },\n          uRound: { value: 1, type: \"f32\" },\n          uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n        }\n      }\n    });\n  }\n}\n\nexport { ParticleShader };\n//# sourceMappingURL=ParticleShader.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._gpuBufferHash = /* @__PURE__ */ Object.create(null);\n    // eslint-disable-next-line max-len\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    renderable.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBufferHash[renderable.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  destroyRenderable(renderable) {\n    const buffer = this._gpuBufferHash[renderable.uid];\n    buffer.destroy();\n    this._gpuBufferHash[renderable.uid] = null;\n    renderable.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexport { ParticleContainerPipe };\n//# sourceMappingURL=ParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GlParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GlParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGlParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GlParticleContainerPipe };\n//# sourceMappingURL=GlParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GpuParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GpuParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGpuParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GpuParticleContainerPipe };\n//# sourceMappingURL=GpuParticleContainerPipe.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this._anchorX = options.anchor?.x;\n    this._anchorY = options.anchor?.y;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const p = this.positions;\n    const {\n      width,\n      height,\n      _leftWidth,\n      _rightWidth,\n      _topHeight,\n      _bottomHeight,\n      _anchorX,\n      _anchorY\n    } = this;\n    const w = _leftWidth + _rightWidth;\n    const scaleW = width > w ? 1 : width / w;\n    const h = _topHeight + _bottomHeight;\n    const scaleH = height > h ? 1 : height / h;\n    const scale = Math.min(scaleW, scaleH);\n    const anchorOffsetX = _anchorX * width;\n    const anchorOffsetY = _anchorY * height;\n    p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n    p[2] = p[10] = p[18] = p[26] = _leftWidth * scale - anchorOffsetX;\n    p[4] = p[12] = p[20] = p[28] = width - _rightWidth * scale - anchorOffsetX;\n    p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n    p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n    p[9] = p[11] = p[13] = p[15] = _topHeight * scale - anchorOffsetY;\n    p[17] = p[19] = p[21] = p[23] = height - _bottomHeight * scale - anchorOffsetY;\n    p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuSpriteHash\");\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  destroyRenderable(sprite) {\n    const batchableMesh = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableMesh.geometry);\n    BigPool.return(batchableMesh);\n    this._gpuSpriteHash[sprite.uid] = null;\n    sprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.setTexture(sprite._texture);\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableMesh = BigPool.get(BatchableMesh);\n    batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n    batchableMesh.renderable = sprite;\n    batchableMesh.transform = sprite.groupTransform;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableMesh;\n    if (!sprite.didViewUpdate) {\n      this._updateBatchableSprite(sprite, batchableMesh);\n    }\n    sprite.on(\"destroyed\", this._destroyRenderableBound);\n    return batchableMesh;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      const batchableMesh = this._gpuSpriteHash[i];\n      batchableMesh.geometry.destroy();\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite.applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_tilingSpriteDataHash\");\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        renderable.texture\n      );\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite.didViewUpdate) {\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.setTexture(tilingSprite._texture);\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite.didViewUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite.didViewUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    tilingSprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", this._destroyRenderableBound);\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      ` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      ` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor() {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const maxTextures = getMaxTexturesPerBatch();\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuBitmapText\");\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    bitmapText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    const context = this._gpuBitmapText[renderableUid].context;\n    if (context.customShader) {\n      BigPool.return(context.customShader);\n      context.customShader = null;\n    }\n    BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = BigPool.get(SdfShader);\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = BigPool.get(Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\n\n\"use strict\";\nfunction updateTextBounds(batchableSprite, text) {\n  const { texture, bounds } = batchableSprite;\n  updateQuadBounds(bounds, text._anchor, texture);\n  const padding = text._style.padding;\n  bounds.minX -= padding;\n  bounds.minY -= padding;\n  bounds.maxX -= padding;\n  bounds.maxY -= padding;\n}\n\nexport { updateTextBounds };\n//# sourceMappingURL=updateTextBounds.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\nimport { updateTextBounds } from '../text/utils/updateTextBounds.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    htmlText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    updateTextBounds(batchableSprite, htmlText);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    updateTextBounds(batchableSprite, htmlText);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.transform = htmlText.groupTransform;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: style.fontWeight,\n          fontStyle: style.fontStyle,\n          fontFamily\n        }, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  return canvasAndContext;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HTMLTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    const resource = image;\n    let canvasAndContext;\n    if (this._createCanvas) {\n      canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(\n      canvasAndContext ? canvasAndContext.canvas : resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\nimport { updateTextBounds } from '../utils/updateTextBounds.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    text.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    updateTextBounds(batchableSprite, text);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.transform = text.groupTransform;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    this._updateText(text);\n    text.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(canvas, resolution = 1) {\n  const { width, height } = canvas;\n  const context = canvas.getContext(\"2d\", {\n    willReadFrequently: true\n  });\n  if (context === null) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  const imageData = context.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n\nexport { getCanvasBoundingBox };\n//# sourceMappingURL=getCanvasBoundingBox.mjs.map\n","import { Color } from '../../../color/Color.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { nextPow2 } from '../../../maths/misc/pow2.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTextureSize(text, resolution, style) {\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    let width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    let height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    width = Math.ceil(width - 1e-6);\n    height = Math.ceil(height - 1e-6);\n    width = nextPow2(width);\n    height = nextPow2(height);\n    return { width, height };\n  }\n  getTexture(options, resolution, style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style,\n        resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(\n      options\n    );\n    this._renderer.texture.initSource(texture._source);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  createTextureAndCanvas(options) {\n    const { text, style } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    const { canvas } = canvasAndContext;\n    this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n    const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n    if (style.trim) {\n      const trimmed = getCanvasBoundingBox(canvas, resolution);\n      texture.frame.copyFrom(trimmed);\n      texture.updateUvs();\n    }\n    return { texture, canvasAndContext };\n  }\n  getManagedTexture(text) {\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    const textKey = text._getKey();\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n    this._activeTextures[textKey] = {\n      canvasAndContext,\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  /**\n   * Returns a texture that was created wit the above `getTexture` function.\n   * Handy if you are done with a texture and want to return it to the pool.\n   * @param texture - The texture to be returned.\n   */\n  returnTexture(texture) {\n    const source = texture.source;\n    source.resource = null;\n    source.uploadMethodId = \"unknown\";\n    source.alphaMode = \"no-premultiply-alpha\";\n    TexturePool.returnTexture(texture);\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n      this.returnTexture(activeTexture.texture);\n      this._activeTextures[textKey] = null;\n    }\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param text\n   * @param style\n   * @param resolution\n   * @param canvasAndContext\n   */\n  renderTextToCanvas(text, style, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    context.textBaseline = style.textBaseline;\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context, measured) : null;\n        if (style._stroke?.width) {\n          const padding = style._stroke.width * style._stroke.alignment;\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context, measured, padding);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param style\n   * @param canvasAndContext\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe.mjs';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe.mjs';\n\n\"use strict\";\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n"],"names":["glProgram","gpuProgram","_NineSliceGeometry"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61]}