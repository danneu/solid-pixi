{"version":3,"file":"animated-sprite-explosion-DxCS5pva.js","sources":["../../src/pages/demo/sprite/animated-sprite-explosion.tsx"],"sourcesContent":["import {\n  AnimatedSprite,\n  Application,\n  Container,\n  useApp,\n} from \"@danneu/solid-pixi\";\nimport * as PIXI from \"pixi.js\";\nimport {\n  createResource,\n  Index,\n  Show,\n  Suspense,\n  type Component,\n} from \"solid-js\";\n\nconst Example: Component<{ textures: PIXI.Texture[] }> = (props) => {\n  const app = useApp();\n\n  return (\n    <Index each={Array(50).fill(0)}>\n      {() => {\n        return (\n          <AnimatedSprite\n            textures={props.textures}\n            x={Math.random() * app.screen.width}\n            y={Math.random() * app.screen.height}\n            anchor={0.5}\n            rotation={Math.random() * 2 * Math.PI}\n            scale={0.75 + Math.random() * 0.5}\n            ref={(el) => {\n              if (el) {\n                el.gotoAndPlay((Math.random() * 26) | 0);\n              }\n            }}\n          />\n        );\n      }}\n    </Index>\n  );\n};\n\nexport default function () {\n  const [textures] = createResource(async () => {\n    await PIXI.Assets.load(\"https://pixijs.com/assets/spritesheet/mc.json\");\n    return Array.from({ length: 26 }, (_, i) =>\n      PIXI.Texture.from(`Explosion_Sequence_A ${i + 1}.png`)\n    );\n  });\n\n  return (\n    <Suspense fallback={<div>Loading</div>}>\n      <Application backgroundColor={0x1099bb}>\n        <Show when={textures()}>\n          {(textures) => (\n            <Container>\n              <Example textures={textures()} />\n            </Container>\n          )}\n        </Show>\n      </Application>\n    </Suspense>\n  );\n}\n"],"names":["Example","props","app","useApp","_$createComponent","Index","each","Array","fill","children","AnimatedSprite","textures","x","Math","random","screen","width","y","height","anchor","rotation","PI","scale","ref","el","gotoAndPlay","createResource","PIXI","load","from","length","_","i","Suspense","fallback","_tmpl$","Application","backgroundColor","Show","when","Container"],"mappings":";;;;;;;;AAeA,MAAMA,UAAoDC,CAAU,UAAA;AAClE,QAAMC,MAAMC,OAAO;AAEnB,SAAAC,gBACGC,OAAK;AAAA,IAAA,IAACC,OAAI;AAAA,aAAEC,MAAM,EAAE,EAAEC,KAAK,CAAC;AAAA,IAAC;AAAA,IAAAC,UAC3BA,MAAM;AACL,aAAAL,gBACGM,gBAAc;AAAA,QAAA,IACbC,WAAQ;AAAA,iBAAEV,MAAMU;AAAAA,QAAQ;AAAA,QAAA,IACxBC,IAAC;AAAA,iBAAEC,KAAKC,OAAAA,IAAWZ,IAAIa,OAAOC;AAAAA,QAAK;AAAA,QAAA,IACnCC,IAAC;AAAA,iBAAEJ,KAAKC,OAAAA,IAAWZ,IAAIa,OAAOG;AAAAA,QAAM;AAAA,QACpCC,QAAQ;AAAA,QAAG,IACXC,WAAQ;AAAA,iBAAEP,KAAKC,OAAAA,IAAW,IAAID,KAAKQ;AAAAA,QAAE;AAAA,QAAA,IACrCC,QAAK;AAAE,iBAAA,OAAOT,KAAKC,OAAAA,IAAW;AAAA,QAAG;AAAA,QAAAS,KAC3BC,CAAO,OAAA;AACX,cAAIA,IAAI;AACNA,eAAGC,YAAaZ,KAAKC,OAAO,IAAI,KAAM,CAAC;AAAA,UAAA;AAAA,QACzC;AAAA,MACF,CAAC;AAAA,IAAA;AAAA,EAGP,CAAC;AAGP;AAE2B,SAAA,0BAAA;AACzB,QAAM,CAACH,QAAQ,IAAIe,eAAe,YAAY;AACtCC,UAAAA,OAAYC,KAAK,+CAA+C;AACtE,WAAOrB,MAAMsB,KAAK;AAAA,MAAEC,QAAQ;AAAA,IAAG,GAAG,CAACC,GAAGC,MACpCL,QAAaE,KAAK,wBAAwBG,IAAI,CAAC,MAAM,CACvD;AAAA,EAAA,CACD;AAED,SAAA5B,gBACG6B,UAAQ;AAAA,IAAA,IAACC,WAAQ;AAAA,aAAAC,OAAA;AAAA,IAAA;AAAA,IAAA,IAAA1B,WAAA;AAAA,aAAAL,gBACfgC,aAAW;AAAA,QAACC,iBAAiB;AAAA,QAAQ,IAAA5B,WAAA;AAAA,iBAAAL,gBACnCkC,MAAI;AAAA,YAAA,IAACC,OAAI;AAAA,qBAAE5B,SAAS;AAAA,YAAC;AAAA,YAAAF,UAClBE,CAAAA,cAAQP,gBACPoC,WAAS;AAAA,cAAA,IAAA/B,WAAA;AAAA,uBAAAL,gBACPJ,SAAO;AAAA,kBAAA,IAACW,WAAQ;AAAA,2BAAEA,UAAS;AAAA,kBAAA;AAAA,gBAAC,CAAA;AAAA,cAAA;AAAA,YAAA,CAAA;AAAA,UAAA,CAEhC;AAAA,QAAA;AAAA,MAAA,CAAA;AAAA,IAAA;AAAA,EAAA,CAAA;AAKX;"}